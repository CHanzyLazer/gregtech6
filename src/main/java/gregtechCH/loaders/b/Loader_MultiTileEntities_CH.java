package gregtechCH.loaders.b;

import gregapi.block.MaterialMachines;
import gregapi.block.MaterialScoopable;
import gregapi.block.multitileentity.MultiTileEntityBlock;
import gregapi.block.multitileentity.MultiTileEntityRegistry;
import gregapi.data.*;
import gregapi.oredict.OreDictItemData;
import gregapi.oredict.OreDictManager;
import gregapi.oredict.OreDictMaterial;
import gregapi.tileentity.connectors.MultiTileEntityAxle;
import gregapi.tileentity.multiblocks.MultiTileEntityMultiBlockPart;
import gregapi.util.CR;
import gregapi.util.OM;
import gregapi.util.ST;
import gregapi.util.UT;
import gregtech.loaders.b.Loader_MultiTileEntities;
import gregtech.tileentity.autotools.MultiTileEntityAutoToolHammer;
import gregtech.tileentity.autotools.MultiTileEntityAutoToolIgniter;
import gregtech.tileentity.batteries.eu.*;
import gregtech.tileentity.batteries.lu.*;
import gregtech.tileentity.batteries.qu.MultiTileEntityZPM;
import gregtech.tileentity.energy.converters.*;
import gregtech.tileentity.energy.generators.*;
import gregtech.tileentity.energy.reactors.*;
import gregtech.tileentity.energy.storage.*;
import gregtech.tileentity.energy.transformers.MultiTileEntityGearBox;
import gregtech.tileentity.energy.transformers.MultiTileEntityLongDistanceTransformer;
import gregtech.tileentity.energy.transformers.MultiTileEntityTransformerElectric;
import gregtech.tileentity.inventories.MultiTileEntityLongDistancePipelineItem;
import gregtech.tileentity.multiblocks.*;
import gregtech.tileentity.sensors.*;
import gregtech.tileentity.tanks.MultiTileEntityLongDistancePipelineFluid;
import gregtech.tileentity.tanks.MultiTileEntityPump;
import gregtechCH.config.machine.generator.*;
import gregtechCH.config.machine.kinetic.*;
import gregtechCH.config.machine.multiblock.AttributesLargeBoilerTank_CH;
import gregtechCH.config.machine.multiblock.AttributesLargeGasTurbine_CH;
import gregtechCH.config.machine.multiblock.AttributesLargeSteamTurbine_CH;
import gregtechCH.config.machine.steam.*;
import gregtechCH.tileentity.energy.MultiTileEntityBasicMachine_CH;
import gregtechCH.tileentity.energy.converters.MultiTileEntityBoilerTank_CH;
import gregtechCH.tileentity.energy.converters.MultiTileEntityTurbineSteam_CH;
import gregtechCH.tileentity.energy.generators.MultiTileEntityMotorLiquid_CH;
import gregtechCH.tileentity.energy.transformers.MultiTileEntityTransformerRotation_CH;
import gregtechCH.tileentity.machines.MultiTileEntityBasicMachineElectric_CH;
import gregtechCH.tileentity.multiblocks.*;
import gregtechCH.tileentity.sensors.MultiTileEntityFlowometerBucket_CH;
import gregtechCH.tileentity.sensors.MultiTileEntityFlowometer_CH;
import net.minecraft.block.Block;
import net.minecraft.block.material.Material;
import net.minecraft.init.Blocks;
import net.minecraft.init.Items;
import net.minecraft.nbt.NBTTagCompound;
import net.minecraft.tileentity.TileEntity;
import net.minecraftforge.fluids.FluidStack;

import java.util.Objects;

import static gregapi.data.CS.*;
import static gregtechCH.config.ConfigForge_CH.DATA_GTCH;
import static gregtechCH.config.ConfigForge_CH.DATA_MACHINES.enableChangeBoiler;
import static gregtechCH.config.ConfigForge_CH.DATA_MACHINES.enableChangeMotor;
import static gregtechCH.config.ConfigJson_CH.*;
import static gregtechCH.data.CS_CH.*;

public class Loader_MultiTileEntities_CH extends Loader_MultiTileEntities implements Runnable  {
    // TODO 这些改为成员变量和成员函数重写的写法，将父类的组分进行拆分重写，这样在父类被修改时可以出现合并冲突并提示我去处理

    @Override
    public void run() {
        MultiTileEntityRegistry aRegistry = MultiTileEntityRegistry.getRegistry("gt.multitileentity");

        MultiTileEntityBlock
                aMetal      = MultiTileEntityBlock.getOrCreate(MD.GT.mID, "iron"         , Material.iron             , Block.soundTypeMetal, TOOL_pickaxe, 0, 0, 15, F, F)
                , aMetalChips = MultiTileEntityBlock.getOrCreate(MD.GT.mID, "iron"         , Material.iron             , Block.soundTypeMetal, TOOL_shovel , 0, 0, 15, F, F)
                , aMetalWires = MultiTileEntityBlock.getOrCreate(MD.GT.mID, "machine"      , MaterialMachines.instance , Block.soundTypeMetal, TOOL_cutter , 0, 0, 15, F, F)
                , aMachine    = MultiTileEntityBlock.getOrCreate(MD.GT.mID, "machine"      , MaterialMachines.instance , Block.soundTypeMetal, TOOL_wrench , 0, 0, 15, F, F)
                , aWooden     = MultiTileEntityBlock.getOrCreate(MD.GT.mID, "wood"         , Material.wood             , Block.soundTypeWood , TOOL_axe    , 0, 0, 15, F, F)
                , aBush       = MultiTileEntityBlock.getOrCreate(MD.GT.mID, "leaves"       , Material.leaves           , Block.soundTypeGrass, TOOL_axe    , 0, 0, 15, F, F)
                , aStone      = MultiTileEntityBlock.getOrCreate(MD.GT.mID, "rock"         , Material.rock             , Block.soundTypeStone, TOOL_pickaxe, 0, 0, 15, F, F)
                , aWool       = MultiTileEntityBlock.getOrCreate(MD.GT.mID, "cloth"        , Material.cloth            , Block.soundTypeCloth, TOOL_shears , 0, 0, 15, F, F)
                , aTNT        = MultiTileEntityBlock.getOrCreate(MD.GT.mID, "tnt"          , Material.tnt              , Block.soundTypeGrass, TOOL_pickaxe, 0, 0, 15, F, F)
                , aUtilMetal  = MultiTileEntityBlock.getOrCreate(MD.GT.mID, "redstoneLight", Material.redstoneLight    , Block.soundTypeMetal, TOOL_pickaxe, 0, 0, 15, F, F)
                , aUtilStone  = MultiTileEntityBlock.getOrCreate(MD.GT.mID, "redstoneLight", Material.redstoneLight    , Block.soundTypeStone, TOOL_pickaxe, 0, 0, 15, F, F)
                , aUtilWood   = MultiTileEntityBlock.getOrCreate(MD.GT.mID, "redstoneLight", Material.redstoneLight    , Block.soundTypeWood , TOOL_axe    , 0, 0, 15, F, F)
                , aUtilWool   = MultiTileEntityBlock.getOrCreate(MD.GT.mID, "redstoneLight", Material.redstoneLight    , Block.soundTypeCloth, TOOL_shears , 0, 0, 15, F, F)
                , aHive       = MultiTileEntityBlock.getOrCreate(MD.GT.mID, "rock"         , MaterialScoopable.instance, Block.soundTypeWood , TOOL_scoop  , 0, 0, 15, F, F)
                ;

        storages   (aRegistry, aMetal, aMetalChips, aMetalWires, aMachine, aWooden, aBush, aStone, aWool, aTNT, aHive, aUtilMetal, aUtilStone, aUtilWood, aUtilWool, MT.NULL, null);
        crucible   (aRegistry, aMetal, aMetalChips, aMetalWires, aMachine, aWooden, aBush, aStone, aWool, aTNT, aHive, aUtilMetal, aUtilStone, aUtilWood, aUtilWool, MT.NULL, null);
        if (DATA_GTCH.enableChangeMachineUnsorted1){
            unsorted1  (aRegistry, aMetal, aMetalChips, aMetalWires, aMachine, aWooden, aBush, aStone, aWool, aTNT, aHive, aUtilMetal, aUtilStone, aUtilWood, aUtilWool, MT.NULL, null);
        } else {
            Loader_MultiTileEntities.unsorted1(aRegistry, aMetal, aMetalChips, aMetalWires, aMachine, aWooden, aBush, aStone, aWool, aTNT, aHive, aUtilMetal, aUtilStone, aUtilWood, aUtilWool, MT.NULL, null);
        }
        if (DATA_GTCH.enableChangeMachineUnsorted2) {
            unsorted2  (aRegistry, aMetal, aMetalChips, aMetalWires, aMachine, aWooden, aBush, aStone, aWool, aTNT, aHive, aUtilMetal, aUtilStone, aUtilWood, aUtilWool, MT.NULL, null);
        } else {
            Loader_MultiTileEntities.unsorted2(aRegistry, aMetal, aMetalChips, aMetalWires, aMachine, aWooden, aBush, aStone, aWool, aTNT, aHive, aUtilMetal, aUtilStone, aUtilWood, aUtilWool, MT.NULL, null);
        }
        computer   (aRegistry, aMetal, aMetalChips, aMetalWires, aMachine, aWooden, aBush, aStone, aWool, aTNT, aHive, aUtilMetal, aUtilStone, aUtilWood, aUtilWool, MT.NULL, null);
        if (DATA_GTCH.enableChangeMachineMultiblocks) {
            multiblocks(aRegistry, aMetal, aMetalChips, aMetalWires, aMachine, aWooden, aBush, aStone, aWool, aTNT, aHive, aUtilMetal, aUtilStone, aUtilWood, aUtilWool, MT.NULL, null);
        } else {
            Loader_MultiTileEntities.multiblocks(aRegistry, aMetal, aMetalChips, aMetalWires, aMachine, aWooden, aBush, aStone, aWool, aTNT, aHive, aUtilMetal, aUtilStone, aUtilWood, aUtilWool, MT.NULL, null);
        }
        if (DATA_GTCH.enableChangeMachineMachines1) {
            machines1  (aRegistry, aMetal, aMetalChips, aMetalWires, aMachine, aWooden, aBush, aStone, aWool, aTNT, aHive, aUtilMetal, aUtilStone, aUtilWood, aUtilWool, MT.NULL, null);
        } else {
            Loader_MultiTileEntities.machines1(aRegistry, aMetal, aMetalChips, aMetalWires, aMachine, aWooden, aBush, aStone, aWool, aTNT, aHive, aUtilMetal, aUtilStone, aUtilWood, aUtilWool, MT.NULL, null);
        }
        if (DATA_GTCH.enableChangeMachineMachines2) {
            machines2  (aRegistry, aMetal, aMetalChips, aMetalWires, aMachine, aWooden, aBush, aStone, aWool, aTNT, aHive, aUtilMetal, aUtilStone, aUtilWood, aUtilWool, MT.NULL, null);
        } else {
            Loader_MultiTileEntities.machines2(aRegistry, aMetal, aMetalChips, aMetalWires, aMachine, aWooden, aBush, aStone, aWool, aTNT, aHive, aUtilMetal, aUtilStone, aUtilWood, aUtilWool, MT.NULL, null);
        }
        if (DATA_GTCH.enableChangeMachineMachines3) {
            machines3  (aRegistry, aMetal, aMetalChips, aMetalWires, aMachine, aWooden, aBush, aStone, aWool, aTNT, aHive, aUtilMetal, aUtilStone, aUtilWood, aUtilWool, MT.NULL, null);
        } else {
            Loader_MultiTileEntities.machines3(aRegistry, aMetal, aMetalChips, aMetalWires, aMachine, aWooden, aBush, aStone, aWool, aTNT, aHive, aUtilMetal, aUtilStone, aUtilWood, aUtilWool, MT.NULL, null);
        }
        if (DATA_GTCH.enableChangeMachineMachines4) {
            machines4  (aRegistry, aMetal, aMetalChips, aMetalWires, aMachine, aWooden, aBush, aStone, aWool, aTNT, aHive, aUtilMetal, aUtilStone, aUtilWood, aUtilWool, MT.NULL, null);
        } else {
            Loader_MultiTileEntities.machines4(aRegistry, aMetal, aMetalChips, aMetalWires, aMachine, aWooden, aBush, aStone, aWool, aTNT, aHive, aUtilMetal, aUtilStone, aUtilWood, aUtilWool, MT.NULL, null);
        }
        if (DATA_GTCH.enableChangeMachineKinetic) {
            kinetic    (aRegistry, aMetal, aMetalChips, aMetalWires, aMachine, aWooden, aBush, aStone, aWool, aTNT, aHive, aUtilMetal, aUtilStone, aUtilWood, aUtilWool, MT.NULL, null);
        } else {
            Loader_MultiTileEntities.kinetic(aRegistry, aMetal, aMetalChips, aMetalWires, aMachine, aWooden, aBush, aStone, aWool, aTNT, aHive, aUtilMetal, aUtilStone, aUtilWood, aUtilWool, MT.NULL, null);
        }
        connectors (aRegistry, aMetal, aMetalChips, aMetalWires, aMachine, aWooden, aBush, aStone, aWool, aTNT, aHive, aUtilMetal, aUtilStone, aUtilWood, aUtilWool, MT.NULL, null);
        extenders  (aRegistry, aMetal, aMetalChips, aMetalWires, aMachine, aWooden, aBush, aStone, aWool, aTNT, aHive, aUtilMetal, aUtilStone, aUtilWood, aUtilWool, MT.NULL, null);
        if (DATA_GTCH.enableChangeMachineSensors) {
            sensors    (aRegistry, aMetal, aMetalChips, aMetalWires, aMachine, aWooden, aBush, aStone, aWool, aTNT, aHive, aUtilMetal, aUtilStone, aUtilWood, aUtilWool, MT.NULL, null);
        } else {
            Loader_MultiTileEntities.sensors(aRegistry, aMetal, aMetalChips, aMetalWires, aMachine, aWooden, aBush, aStone, aWool, aTNT, aHive, aUtilMetal, aUtilStone, aUtilWood, aUtilWool, MT.NULL, null);
        }
        misc       (aRegistry, aMetal, aMetalChips, aMetalWires, aMachine, aWooden, aBush, aStone, aWool, aTNT, aHive, aUtilMetal, aUtilStone, aUtilWood, aUtilWool, MT.NULL, null);
    }

    protected static void unsorted1(MultiTileEntityRegistry aRegistry, MultiTileEntityBlock aMetal, MultiTileEntityBlock aMetalChips, MultiTileEntityBlock aMetalWires, MultiTileEntityBlock aMachine, MultiTileEntityBlock aWooden, MultiTileEntityBlock aBush, MultiTileEntityBlock aStone, MultiTileEntityBlock aWool, MultiTileEntityBlock aTNT, MultiTileEntityBlock aHive, MultiTileEntityBlock aUtilMetal, MultiTileEntityBlock aUtilStone, MultiTileEntityBlock aUtilWood, MultiTileEntityBlock aUtilWool, OreDictMaterial aMat, Class<? extends TileEntity> aClass) {
        // Burning Boxes
        aClass = MultiTileEntityGeneratorBrick.class;
        for (AttributesBurningBoxBrick_CH BURNING_BOX_BRICK : DATA_MACHINES_GENERATOR.BurningBoxBrick) {
            aMat = BURNING_BOX_BRICK.material;
            aRegistry.add("Brick Burning Box (Solid)",                      "Burning Boxes",  BURNING_BOX_BRICK.ID,         1104, aClass, aMat.mToolQuality, BURNING_BOX_BRICK.stackSize,           aStone,
                    UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   BURNING_BOX_BRICK.nbtHardness,          NBT_RESISTANCE,   BURNING_BOX_BRICK.nbtResistance,          NBT_FUELMAP, FM.Furnace, NBT_EFFICIENCY,  BURNING_BOX_BRICK.nbtEfficiency,          NBT_OUTPUT,  BURNING_BOX_BRICK.nbtOutput,           NBT_ENERGY_EMITTED, TD.Energy.HU),
                    BURNING_BOX_BRICK.recipeObject);
        }
        aClass = MultiTileEntityGeneratorMetal.class;
        for (AttributesBurningBoxSolid_CH BURNING_BOX_SOLID : DATA_MACHINES_GENERATOR.BurningBoxSolid) {
            aMat = BURNING_BOX_SOLID.material;
            aRegistry.add("Burning Box (Solid, "+aMat.getLocal()+")",       "Burning Boxes",  BURNING_BOX_SOLID.ID,         1104, aClass, aMat.mToolQuality, BURNING_BOX_SOLID.stackSize,           aMachine,
                    UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   BURNING_BOX_SOLID.nbtHardness,          NBT_RESISTANCE,   BURNING_BOX_SOLID.nbtResistance,          NBT_FUELMAP, FM.Furnace, NBT_EFFICIENCY,  BURNING_BOX_SOLID.nbtEfficiency,          NBT_OUTPUT,  BURNING_BOX_SOLID.nbtOutput,           NBT_ENERGY_EMITTED, TD.Energy.HU),
                    BURNING_BOX_SOLID.recipeObject);
        }
        for (AttributesDenseBurningBoxSolid_CH DENSE_BURNING_BOX_SOLID : DATA_MACHINES_GENERATOR.DenseBurningBoxSolid) {
            aMat = DENSE_BURNING_BOX_SOLID.material;
            aRegistry.add("Dense Burning Box (Solid, "+aMat.getLocal()+")", "Burning Boxes",  DENSE_BURNING_BOX_SOLID.ID,   1104, aClass, aMat.mToolQuality, DENSE_BURNING_BOX_SOLID.stackSize,     aMachine,
                    UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   DENSE_BURNING_BOX_SOLID.nbtHardness,    NBT_RESISTANCE,   DENSE_BURNING_BOX_SOLID.nbtResistance,    NBT_FUELMAP, FM.Furnace, NBT_EFFICIENCY,  DENSE_BURNING_BOX_SOLID.nbtEfficiency,    NBT_OUTPUT,  DENSE_BURNING_BOX_SOLID.nbtOutput,     NBT_ENERGY_EMITTED, TD.Energy.HU),
                    DENSE_BURNING_BOX_SOLID.recipeObject);
        }

        // Steam Boilers
        aClass = enableChangeBoiler ? MultiTileEntityBoilerTank_CH.class : MultiTileEntityBoilerTank.class;
        for (AttributesSteamBoilerTank_CH STEAM_BOILER_TANK : DATA_MACHINES_STEAM.SteamBoilerTank) {
            aMat = STEAM_BOILER_TANK.material;
            aRegistry.add("Steam Boiler Tank ("+aMat.getLocal()+")",        "Steam Boilers", STEAM_BOILER_TANK.ID,         1204, aClass, aMat.mToolQuality,STEAM_BOILER_TANK.stackSize,           aMachine,
                    UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   STEAM_BOILER_TANK.nbtHardness,          NBT_RESISTANCE,   STEAM_BOILER_TANK.nbtResistance,          NBT_CAPACITY, STEAM_BOILER_TANK.nbtCapacity,        NBT_CAPACITY_SU, STEAM_BOILER_TANK.nbtCapacity_SU,          NBT_INPUT, STEAM_BOILER_TANK.nbtInput,            NBT_EFFICIENCY_CH,STEAM_BOILER_TANK.nbtEfficiency_CH,           NBT_ENERGY_ACCEPTED, TD.Energy.HU,    NBT_OUTPUT_SU,  STEAM_BOILER_TANK.nbtInput*STEAM_PER_EU),
                   STEAM_BOILER_TANK.recipeObject);
        }
        for (AttributesStrongSteamBoilerTank_CH STRONG_STEAM_BOILER_TANK : DATA_MACHINES_STEAM.StrongSteamBoilerTank) {
            aMat = STRONG_STEAM_BOILER_TANK.material;
            aRegistry.add("Steam Boiler Tank ("+aMat.getLocal()+")",        "Steam Boilers",  STRONG_STEAM_BOILER_TANK.ID,   1204, aClass, aMat.mToolQuality, STRONG_STEAM_BOILER_TANK.stackSize,     aMachine,
                    UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   STRONG_STEAM_BOILER_TANK.nbtHardness,   NBT_RESISTANCE,   STRONG_STEAM_BOILER_TANK.nbtResistance,   NBT_CAPACITY, STRONG_STEAM_BOILER_TANK.nbtCapacity, NBT_CAPACITY_SU, STRONG_STEAM_BOILER_TANK.nbtCapacity_SU,   NBT_INPUT,  STRONG_STEAM_BOILER_TANK.nbtInput,    NBT_EFFICIENCY_CH, STRONG_STEAM_BOILER_TANK.nbtEfficiency_CH,   NBT_ENERGY_ACCEPTED, TD.Energy.HU,    NBT_OUTPUT_SU,  STRONG_STEAM_BOILER_TANK.nbtInput*STEAM_PER_EU),
                    STRONG_STEAM_BOILER_TANK.recipeObject);
        }

        // Steam Engines
        aClass = MultiTileEntityEngineSteam.class;
        for (AttributesSteamEngine_CH STEAM_ENGINE : DATA_MACHINES_STEAM.SteamEngine) {
            aMat = STEAM_ENGINE.material;
            aRegistry.add("Steam Engine ("+aMat.getLocal()+")",             "Engines",        STEAM_ENGINE.ID,             1304, aClass, aMat.mToolQuality, STEAM_ENGINE.stackSize,               Objects.equals(aMat, MT.IronWood) ? aWooden : aMachine,
                    UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   STEAM_ENGINE.nbtHardness,              NBT_RESISTANCE,   STEAM_ENGINE.nbtResistance,              NBT_EFFICIENCY, STEAM_ENGINE.nbtEfficiency,        NBT_CAPACITY,    STEAM_ENGINE.nbtCapacity,                 NBT_OUTPUT,    STEAM_ENGINE.nbtOutput,              NBT_EFFICIENCY_WATER, STEAM_ENGINE.nbtEfficiencyWater,             NBT_ENERGY_EMITTED, TD.Energy.KU),
                    STEAM_ENGINE.recipeObject);
        }
        for (AttributesStrongSteamEngine_CH STRONG_STEAM_ENGINE : DATA_MACHINES_STEAM.StrongSteamEngine) {
            aMat = STRONG_STEAM_ENGINE.material;
            aRegistry.add("Strong Steam Engine ("+aMat.getLocal()+")",      "Engines",        STRONG_STEAM_ENGINE.ID,       1304, aClass, aMat.mToolQuality, STRONG_STEAM_ENGINE.stackSize,         Objects.equals(aMat, MT.IronWood) ? aWooden : aMachine,
                    UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   STRONG_STEAM_ENGINE.nbtHardness,        NBT_RESISTANCE,   STRONG_STEAM_ENGINE.nbtResistance,        NBT_EFFICIENCY, STRONG_STEAM_ENGINE.nbtEfficiency,  NBT_CAPACITY,    STRONG_STEAM_ENGINE.nbtCapacity,           NBT_OUTPUT,    STRONG_STEAM_ENGINE.nbtOutput,   NBT_EFFICIENCY_WATER, STRONG_STEAM_ENGINE.nbtEfficiencyWater,       NBT_ENERGY_EMITTED, TD.Energy.KU),
                    STRONG_STEAM_ENGINE.recipeObject);
        }

        // Burning Boxes Liquid
        aClass = MultiTileEntityGeneratorLiquid.class;
        for (AttributesBurningBoxLiquid_CH BURNING_BOX_LIQUID : DATA_MACHINES_GENERATOR.BurningBoxLiquid) {
            aMat = BURNING_BOX_LIQUID.material;
            aRegistry.add("Burning Box (Liquid, "+aMat.getLocal()+")",       "Burning Boxes",  BURNING_BOX_LIQUID.ID,       1104, aClass, aMat.mToolQuality, BURNING_BOX_LIQUID.stackSize,         aMachine,
                    UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   BURNING_BOX_LIQUID.nbtHardness,        NBT_RESISTANCE,   BURNING_BOX_LIQUID.nbtResistance,        NBT_FUELMAP, FM.Burn, NBT_EFFICIENCY,  BURNING_BOX_LIQUID.nbtEfficiency,        NBT_OUTPUT,  BURNING_BOX_LIQUID.nbtOutput,         NBT_ENERGY_EMITTED, TD.Energy.HU),
                    BURNING_BOX_LIQUID.recipeObject);
        }
        for (AttributesDenseBurningBoxLiquid_CH DENSE_BURNING_BOX_LIQUID : DATA_MACHINES_GENERATOR.DenseBurningBoxLiquid) {
            aMat = DENSE_BURNING_BOX_LIQUID.material;
            aRegistry.add("Dense Burning Box (Liquid, "+aMat.getLocal()+")",       "Burning Boxes",  DENSE_BURNING_BOX_LIQUID.ID,       1104, aClass, aMat.mToolQuality, DENSE_BURNING_BOX_LIQUID.stackSize,         aMachine,
                    UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   DENSE_BURNING_BOX_LIQUID.nbtHardness,        NBT_RESISTANCE,   DENSE_BURNING_BOX_LIQUID.nbtResistance,        NBT_FUELMAP, FM.Burn, NBT_EFFICIENCY,  DENSE_BURNING_BOX_LIQUID.nbtEfficiency,        NBT_OUTPUT,  DENSE_BURNING_BOX_LIQUID.nbtOutput,         NBT_ENERGY_EMITTED, TD.Energy.HU),
                    DENSE_BURNING_BOX_LIQUID.recipeObject);
        }
        // Burning Boxes Gas
        aClass = MultiTileEntityGeneratorGas.class;
        for (AttributesBurningBoxGas_CH BURNING_BOX_GAS : DATA_MACHINES_GENERATOR.BurningBoxGas) {
            aMat = BURNING_BOX_GAS.material;
            aRegistry.add("Burning Box (Gas, "+aMat.getLocal()+")",       "Burning Boxes",  BURNING_BOX_GAS.ID,       1104, aClass, aMat.mToolQuality, BURNING_BOX_GAS.stackSize,         aMachine,
                    UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   BURNING_BOX_GAS.nbtHardness,        NBT_RESISTANCE,   BURNING_BOX_GAS.nbtResistance,        NBT_FUELMAP, FM.Burn, NBT_EFFICIENCY,  BURNING_BOX_GAS.nbtEfficiency,        NBT_OUTPUT,  BURNING_BOX_GAS.nbtOutput,         NBT_ENERGY_EMITTED, TD.Energy.HU),
                    BURNING_BOX_GAS.recipeObject);
        }
        for (AttributesDenseBurningBoxGas_CH DENSE_BURNING_BOX_GAS : DATA_MACHINES_GENERATOR.DenseBurningBoxGas) {
            aMat = DENSE_BURNING_BOX_GAS.material;
            aRegistry.add("Dense Burning Box (Gas, "+aMat.getLocal()+")",       "Burning Boxes",  DENSE_BURNING_BOX_GAS.ID,       1104, aClass, aMat.mToolQuality, DENSE_BURNING_BOX_GAS.stackSize,         aMachine,
                    UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   DENSE_BURNING_BOX_GAS.nbtHardness,        NBT_RESISTANCE,   DENSE_BURNING_BOX_GAS.nbtResistance,        NBT_FUELMAP, FM.Burn, NBT_EFFICIENCY,  DENSE_BURNING_BOX_GAS.nbtEfficiency,        NBT_OUTPUT,  DENSE_BURNING_BOX_GAS.nbtOutput,         NBT_ENERGY_EMITTED, TD.Energy.HU),
                    DENSE_BURNING_BOX_GAS.recipeObject);
        }
        // Burning Boxes Fluidized Bed
        aClass = MultiTileEntityGeneratorFluidBed.class;
        for (AttributesBurningBoxFluidizedBed_CH BURNING_BOX_FLUIDIZED_BED : DATA_MACHINES_GENERATOR.BurningBoxFluidizedBed) {
            aMat = BURNING_BOX_FLUIDIZED_BED.material;
            aRegistry.add("Fluidized Bed Burning Box ("+aMat.getLocal()+")",       "Burning Boxes",  BURNING_BOX_FLUIDIZED_BED.ID,       1104, aClass, aMat.mToolQuality, BURNING_BOX_FLUIDIZED_BED.stackSize,         aMachine,
                    UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   BURNING_BOX_FLUIDIZED_BED.nbtHardness,        NBT_RESISTANCE,   BURNING_BOX_FLUIDIZED_BED.nbtResistance,        NBT_FUELMAP, FM.FluidBed, NBT_EFFICIENCY,  BURNING_BOX_FLUIDIZED_BED.nbtEfficiency,        NBT_OUTPUT,  BURNING_BOX_FLUIDIZED_BED.nbtOutput,         NBT_ENERGY_EMITTED, TD.Energy.HU),
                    BURNING_BOX_FLUIDIZED_BED.recipeObject);
        }
        for (AttributesDenseBurningBoxFluidizedBed_CH DENSE_BURNING_BOX_FLUIDIZED_BED : DATA_MACHINES_GENERATOR.DenseBurningBoxFluidizedBed) {
            aMat = DENSE_BURNING_BOX_FLUIDIZED_BED.material;
            aRegistry.add("Dense Fluidized Bed Burning Box ("+aMat.getLocal()+")",       "Burning Boxes",  DENSE_BURNING_BOX_FLUIDIZED_BED.ID,       1104, aClass, aMat.mToolQuality, DENSE_BURNING_BOX_FLUIDIZED_BED.stackSize,         aMachine,
                    UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   DENSE_BURNING_BOX_FLUIDIZED_BED.nbtHardness,        NBT_RESISTANCE,   DENSE_BURNING_BOX_FLUIDIZED_BED.nbtResistance,        NBT_FUELMAP, FM.FluidBed, NBT_EFFICIENCY,  DENSE_BURNING_BOX_FLUIDIZED_BED.nbtEfficiency,        NBT_OUTPUT,  DENSE_BURNING_BOX_FLUIDIZED_BED.nbtOutput,         NBT_ENERGY_EMITTED, TD.Energy.HU),
                    DENSE_BURNING_BOX_FLUIDIZED_BED.recipeObject);
        }

        // Heat Exchangers
        aClass = MultiTileEntityGeneratorHotFluid.class;
        for (AttributesHeatExchanger_CH HEAT_EXCHANGER : DATA_MACHINES_GENERATOR.HeatExchanger) {
            aMat = HEAT_EXCHANGER.material;
            aRegistry.add("Heat Exchanger ("+aMat.getLocal()+")",       "Burning Boxes",  HEAT_EXCHANGER.ID,       9103, aClass, aMat.mToolQuality, HEAT_EXCHANGER.stackSize,         aMachine,
                    UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   HEAT_EXCHANGER.nbtHardness,        NBT_RESISTANCE,   HEAT_EXCHANGER.nbtResistance,        NBT_FUELMAP, FM.Hot, NBT_EFFICIENCY,  HEAT_EXCHANGER.nbtEfficiency,        NBT_OUTPUT,  HEAT_EXCHANGER.nbtOutput,         NBT_ENERGY_EMITTED, TD.Energy.HU),
                    HEAT_EXCHANGER.recipeObject);
        }
        for (AttributesDenseHeatExchanger_CH DENSE_HEAT_EXCHANGER : DATA_MACHINES_GENERATOR.DenseHeatExchanger) {
            aMat = DENSE_HEAT_EXCHANGER.material;
            aRegistry.add("Dense Heat Exchanger ("+aMat.getLocal()+")",       "Burning Boxes",  DENSE_HEAT_EXCHANGER.ID,       9103, aClass, aMat.mToolQuality, DENSE_HEAT_EXCHANGER.stackSize,         aMachine,
                    UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   DENSE_HEAT_EXCHANGER.nbtHardness,        NBT_RESISTANCE,   DENSE_HEAT_EXCHANGER.nbtResistance,        NBT_FUELMAP, FM.Hot, NBT_EFFICIENCY,  DENSE_HEAT_EXCHANGER.nbtEfficiency,        NBT_OUTPUT,  DENSE_HEAT_EXCHANGER.nbtOutput,         NBT_ENERGY_EMITTED, TD.Energy.HU),
                    DENSE_HEAT_EXCHANGER.recipeObject);
        }
        // Diesel Engines
        aClass = enableChangeMotor ? MultiTileEntityMotorLiquid_CH.class :  MultiTileEntityMotorLiquid.class;
        for (AttributesDieselEngine_CH DIESEL_ENGINE : DATA_MACHINES_GENERATOR.DieselEngine) {
            aMat = DIESEL_ENGINE.material;
            aRegistry.add("Diesel Engine ("+aMat.getLocal()+")", "Engines", DIESEL_ENGINE.ID, 1304, aClass, aMat.mToolQuality, DIESEL_ENGINE.stackSize, aMachine,
                    UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS, DIESEL_ENGINE.nbtHardness, NBT_RESISTANCE, DIESEL_ENGINE.nbtResistance, NBT_FUELMAP, FM.Engine, NBT_EFFICIENCY,  DIESEL_ENGINE.nbtEfficiency, NBT_OUTPUT, DIESEL_ENGINE.nbtOutput, NBT_PREHEAT_ENERGY,  DIESEL_ENGINE.nbtPreheatEnergy, NBT_PREHEAT_RATE ,  DIESEL_ENGINE.nbtPreheatRate, NBT_PREHEAT_COST,   DIESEL_ENGINE.nbtPreheatCost, NBT_COOLDOWN_RATE,   DIESEL_ENGINE.nbtCooldownRate, NBT_ENERGY_EMITTED, TD.Energy.RU),
                    DIESEL_ENGINE.recipeObject);
        }

        // Reactor Stuffs
        if (ConfigsGT.GREGTECH.get("general", "Enable1x1ReactorCore", F)) {
            aMat = MT.Pb;               aRegistry.add("Nuclear Reactor Core (1x1)"                    , "Reactors",  9300,  9200, MultiTileEntityReactorCore1x1.class     , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F), "CP" , "wM"        , 'M', OP.casingMachineDense.dat(aMat), 'C', IL.Processor_Crystal_Ruby, 'P', IL.PISTONS[4]); ItemsGT.addNEIRedirects(aRegistry.getItem(), FL.Coolant_IC2.display(), FL.Coolant_IC2_Hot.display());
        } else {
            aMat = MT.Pb;               aRegistry.add("Nuclear Reactor Core (1x1)"                    , "Reactors",  9300,  9200, MultiTileEntityReactorCore1x1.class     , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F));
        }
        aMat = MT.Pb;                   aRegistry.add("Nuclear Reactor Core (2x2)"                    , "Reactors",  9200,  9200, MultiTileEntityReactorCore2x2.class     , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F), "PCP", "CMC", "PCP", 'M', OP.casingMachineDense.dat(aMat), 'C', IL.Processor_Crystal_Ruby, 'P', IL.PISTONS[4]); ItemsGT.addNEIRedirects(aRegistry.getItem(), FL.Coolant_IC2.display(), FL.Coolant_IC2_Hot.display());


        aMat = MT.Zr;                   aRegistry.add("Empty Reactor Rod"                             , "Reactors",  9201,  9200, MultiTileEntityReactorRodBase.class     , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F)); IL.Reactor_Rod_Empty.set(aRegistry.getItem(), new OreDictItemData(MT.Zr, U));
        aMat = MT.Cd_In_Ag_Alloy;       aRegistry.add("Neutron Absorber Rod"                          , "Reactors",  9202,  9200, MultiTileEntityReactorRodAbsorber.class , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F)); RM.Canner.addRecipe2(F, 16, 16, OP.stick.mat(aMat, 1), IL.Reactor_Rod_Empty.get(1), aRegistry.getItem()); OM.data(aRegistry.getItem(), aMat, OP.stick.mAmount, MT.Zr, U);
        aMat = MT.Be;                   aRegistry.add("Neutron Reflector Rod"                         , "Reactors",  9203,  9200, MultiTileEntityReactorRodReflector.class, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F)); RM.Canner.addRecipe2(F, 16, 16, OP.stick.mat(aMat, 1), IL.Reactor_Rod_Empty.get(1), aRegistry.getItem()); OM.data(aRegistry.getItem(), aMat, OP.stick.mAmount, MT.Zr, U);
        aMat = MT.Graphite;             aRegistry.add("Neutron Moderator Rod"                         , "Reactors",  9204,  9200, MultiTileEntityReactorRodModerator.class, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F)); RM.Canner.addRecipe2(F, 16, 16, OP.stick.mat(aMat, 1), IL.Reactor_Rod_Empty.get(1), aRegistry.getItem()); OM.data(aRegistry.getItem(), aMat, OP.stick.mAmount, MT.Zr, U);

        aMat = MT.Th;                   aRegistry.add("Thorium-232 Fuel Rod"                          , "Reactors",  9210,  9200, MultiTileEntityReactorRodNuclear.class  , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_MAXDURABILITY, 12000000000L, NBT_NUCLEAR_SELF,   2, NBT_NUCLEAR_OTHER,   2, NBT_NUCLEAR_DIV, 32, NBT_NUCLEAR_MAX,      128, NBT_VALUE, 9310)); RM.Canner.addRecipe2(F, 16, 16, OP.stick.mat(aMat, 1), IL.Reactor_Rod_Empty.get(1), aRegistry.getItem());
        aMat = MT.Cyanite;              aRegistry.add("Cyanite Fuel Rod"                              , "Reactors",  9219,  9200, MultiTileEntityReactorRodNuclear.class  , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_MAXDURABILITY, 12000000000L, NBT_NUCLEAR_SELF,   2, NBT_NUCLEAR_OTHER,   2, NBT_NUCLEAR_DIV, 32, NBT_NUCLEAR_MAX,       64, NBT_VALUE, 9319)); RM.Canner.addRecipe2(F, 16, 16, OP.stick.mat(aMat, 1), IL.Reactor_Rod_Empty.get(1), aRegistry.getItem());
        aMat = MT.U_238;                aRegistry.add("Uranium-238 Fuel Rod"                          , "Reactors",  9220,  9200, MultiTileEntityReactorRodNuclear.class  , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_MAXDURABILITY,  6000000000L, NBT_NUCLEAR_SELF,   4, NBT_NUCLEAR_OTHER,   4, NBT_NUCLEAR_DIV, 16, NBT_NUCLEAR_MAX,      512, NBT_VALUE, 9320)); RM.Canner.addRecipe2(F, 16, 16, OP.stick.mat(aMat, 1), IL.Reactor_Rod_Empty.get(1), aRegistry.getItem());
        aMat = MT.U_235;                aRegistry.add("Uranium-235 Fuel Rod"                          , "Reactors",  9221,  9200, MultiTileEntityReactorRodNuclear.class  , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_MAXDURABILITY,  1200000000L, NBT_NUCLEAR_SELF,  32, NBT_NUCLEAR_OTHER,  32, NBT_NUCLEAR_DIV,  4, NBT_NUCLEAR_MAX,     2048, NBT_VALUE, 9321)); RM.Canner.addRecipe2(F, 16, 16, OP.stick.mat(aMat, 1), IL.Reactor_Rod_Empty.get(1), aRegistry.getItem());
        aMat = MT.U_233;                aRegistry.add("Uranium-233 Fuel Rod"                          , "Reactors",  9222,  9200, MultiTileEntityReactorRodNuclear.class  , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_MAXDURABILITY,  6000000000L, NBT_NUCLEAR_SELF,  32, NBT_NUCLEAR_OTHER,  32, NBT_NUCLEAR_DIV,  4, NBT_NUCLEAR_MAX,     2048, NBT_VALUE, 9322)); RM.Canner.addRecipe2(F, 16, 16, OP.stick.mat(aMat, 1), IL.Reactor_Rod_Empty.get(1), aRegistry.getItem());
        aMat = MT.Yellorium;            aRegistry.add("Yellorium Fuel Rod"                            , "Reactors",  9229,  9200, MultiTileEntityReactorRodNuclear.class  , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_MAXDURABILITY,  6000000000L, NBT_NUCLEAR_SELF,   4, NBT_NUCLEAR_OTHER,   4, NBT_NUCLEAR_DIV, 16, NBT_NUCLEAR_MAX,      256, NBT_VALUE, 9329)); RM.Canner.addRecipe2(F, 16, 16, OP.stick.mat(aMat, 1), IL.Reactor_Rod_Empty.get(1), aRegistry.getItem());
        aMat = MT.Pu;                   aRegistry.add("Plutonium-244 Fuel Rod"                        , "Reactors",  9230,  9200, MultiTileEntityReactorRodNuclear.class  , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_MAXDURABILITY,  1200000000L, NBT_NUCLEAR_SELF,  64, NBT_NUCLEAR_OTHER,  64, NBT_NUCLEAR_DIV,  4, NBT_NUCLEAR_MAX,     2048, NBT_VALUE, 9330)); RM.Canner.addRecipe2(F, 16, 16, OP.stick.mat(aMat, 1), IL.Reactor_Rod_Empty.get(1), aRegistry.getItem());
        aMat = MT.Pu_241;               aRegistry.add("Plutonium-241 Fuel Rod"                        , "Reactors",  9231,  9200, MultiTileEntityReactorRodNuclear.class  , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_MAXDURABILITY,  1200000000L, NBT_NUCLEAR_SELF, 128, NBT_NUCLEAR_OTHER, 128, NBT_NUCLEAR_DIV,  3, NBT_NUCLEAR_MAX,     3072, NBT_VALUE, 9331)); RM.Canner.addRecipe2(F, 16, 16, OP.stick.mat(aMat, 1), IL.Reactor_Rod_Empty.get(1), aRegistry.getItem());
        aMat = MT.Pu_243;               aRegistry.add("Plutonium-243 Fuel Rod"                        , "Reactors",  9232,  9200, MultiTileEntityReactorRodNuclear.class  , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_MAXDURABILITY,  1200000000L, NBT_NUCLEAR_SELF, 128, NBT_NUCLEAR_OTHER, 128, NBT_NUCLEAR_DIV,  3, NBT_NUCLEAR_MAX,     4096, NBT_VALUE, 9332)); RM.Canner.addRecipe2(F, 16, 16, OP.stick.mat(aMat, 1), IL.Reactor_Rod_Empty.get(1), aRegistry.getItem());
        aMat = MT.Pu_239;               aRegistry.add("Plutonium-239 Fuel Rod"                        , "Reactors",  9233,  9200, MultiTileEntityReactorRodNuclear.class  , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_MAXDURABILITY,  2400000000L, NBT_NUCLEAR_SELF, 128, NBT_NUCLEAR_OTHER, 128, NBT_NUCLEAR_DIV,  3, NBT_NUCLEAR_MAX,     4096, NBT_VALUE, 9333)); RM.Canner.addRecipe2(F, 16, 16, OP.stick.mat(aMat, 1), IL.Reactor_Rod_Empty.get(1), aRegistry.getItem());
        aMat = MT.Blutonium;            aRegistry.add("Blutonium Fuel Rod"                            , "Reactors",  9239,  9200, MultiTileEntityReactorRodNuclear.class  , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_MAXDURABILITY,  1200000000L, NBT_NUCLEAR_SELF,  64, NBT_NUCLEAR_OTHER,  64, NBT_NUCLEAR_DIV,  4, NBT_NUCLEAR_MAX,     1024, NBT_VALUE, 9339)); RM.Canner.addRecipe2(F, 16, 16, OP.stick.mat(aMat, 1), IL.Reactor_Rod_Empty.get(1), aRegistry.getItem());
        aMat = MT.Am;                   aRegistry.add("Americium-245 Fuel Rod"                        , "Reactors",  9240,  9200, MultiTileEntityReactorRodNuclear.class  , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_MAXDURABILITY,  1200000000L, NBT_NUCLEAR_SELF,  64, NBT_NUCLEAR_OTHER,  64, NBT_NUCLEAR_DIV,  4, NBT_NUCLEAR_MAX,     4096, NBT_VALUE, 9340)); RM.Canner.addRecipe2(F, 16, 16, OP.stick.mat(aMat, 1), IL.Reactor_Rod_Empty.get(1), aRegistry.getItem());
        aMat = MT.Am_241;               aRegistry.add("Americium-241 Fuel Rod"                        , "Reactors",  9241,  9200, MultiTileEntityReactorRodNuclear.class  , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_MAXDURABILITY,  1200000000L, NBT_NUCLEAR_SELF, 128, NBT_NUCLEAR_OTHER, 128, NBT_NUCLEAR_DIV,  3, NBT_NUCLEAR_MAX,     4096, NBT_VALUE, 9341)); RM.Canner.addRecipe2(F, 16, 16, OP.stick.mat(aMat, 1), IL.Reactor_Rod_Empty.get(1), aRegistry.getItem());
        aMat = MT.Ludicrite;            aRegistry.add("Ludicrite Fuel Rod"                            , "Reactors",  9249,  9200, MultiTileEntityReactorRodNuclear.class  , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_MAXDURABILITY,  1200000000L, NBT_NUCLEAR_SELF, 128, NBT_NUCLEAR_OTHER, 128, NBT_NUCLEAR_DIV,  3, NBT_NUCLEAR_MAX,     3072, NBT_VALUE, 9349)); RM.Canner.addRecipe2(F, 16, 16, OP.stick.mat(aMat, 1), IL.Reactor_Rod_Empty.get(1), aRegistry.getItem());
        aMat = MT.Co_60;                aRegistry.add("Cobalt-60 Fuel Rod"                            , "Reactors",  9250,  9200, MultiTileEntityReactorRodNuclear.class  , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_MAXDURABILITY,   120000000L, NBT_NUCLEAR_SELF,   8, NBT_NUCLEAR_OTHER,   0, NBT_NUCLEAR_DIV, 16, NBT_NUCLEAR_MAX,      256, NBT_VALUE, 9350)); RM.Canner.addRecipe2(F, 16, 16, OP.stick.mat(aMat, 1), IL.Reactor_Rod_Empty.get(1), aRegistry.getItem());
        aMat = MT.Nq_528;               aRegistry.add("Enriched Naquadah Fuel Rod"                    , "Reactors",  9260,  9200, MultiTileEntityReactorRodNuclear.class  , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_MAXDURABILITY, 12000000000L, NBT_NUCLEAR_SELF, 128, NBT_NUCLEAR_OTHER, 128, NBT_NUCLEAR_DIV,  4, NBT_NUCLEAR_MAX,     8192, NBT_VALUE, 9360)); RM.Canner.addRecipe2(F, 16, 16, OP.stick.mat(aMat, 1), IL.Reactor_Rod_Empty.get(1), aRegistry.getItem());
        aMat = MT.Nq_522;               aRegistry.add("Naquadria Fuel Rod"                            , "Reactors",  9261,  9200, MultiTileEntityReactorRodNuclear.class  , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_MAXDURABILITY, 12000000000L, NBT_NUCLEAR_SELF, 512, NBT_NUCLEAR_OTHER, 512, NBT_NUCLEAR_DIV,  3, NBT_NUCLEAR_MAX,    16384, NBT_VALUE, 9361)); RM.Canner.addRecipe2(F, 16, 16, OP.stick.mat(aMat, 1), IL.Reactor_Rod_Empty.get(1), aRegistry.getItem());

        aMat = MT.Th;                   aRegistry.add("Depleted Thorium-232 Fuel Rod"                 , "Reactors",  9310,  9200, MultiTileEntityReactorRodDepleted.class , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F)); RM.Centrifuge.addRecipe1(F, 64, 256, aRegistry.getItem(), ZL_FS, ZL_FS, OP.scrapGt.mat(MT.Zr, 9), OP.dustTiny.mat(aMat, 1), OP.dustDiv72.mat(MT.U_238    , 6));
        aMat = MT.Cyanite;              aRegistry.add("Depleted Cyanite Fuel Rod"                     , "Reactors",  9319,  9200, MultiTileEntityReactorRodDepleted.class , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F)); RM.Centrifuge.addRecipe1(F, 64, 256, aRegistry.getItem(), ZL_FS, ZL_FS, OP.scrapGt.mat(MT.Zr, 9), OP.dustTiny.mat(aMat, 1), OP.dustDiv72.mat(MT.Blutonium, 6));
        aMat = MT.U_238;                aRegistry.add("Depleted Uranium-238 Fuel Rod"                 , "Reactors",  9320,  9200, MultiTileEntityReactorRodDepleted.class , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F)); RM.Centrifuge.addRecipe1(F, 64, 256, aRegistry.getItem(), ZL_FS, ZL_FS, OP.scrapGt.mat(MT.Zr, 9), OP.dustTiny.mat(aMat, 1), OP.dustDiv72.mat(MT.U_235    , 6));
        aMat = MT.U_235;                aRegistry.add("Depleted Uranium-235 Fuel Rod"                 , "Reactors",  9321,  9200, MultiTileEntityReactorRodDepleted.class , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F)); RM.Centrifuge.addRecipe1(F, 64, 256, aRegistry.getItem(), ZL_FS, ZL_FS, OP.scrapGt.mat(MT.Zr, 9), OP.dustTiny.mat(aMat, 1), OP.dustDiv72.mat(MT.Pu       , 6));
        aMat = MT.U_233;                aRegistry.add("Depleted Uranium-233 Fuel Rod"                 , "Reactors",  9322,  9200, MultiTileEntityReactorRodDepleted.class , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F)); RM.Centrifuge.addRecipe1(F, 64, 256, aRegistry.getItem(), ZL_FS, ZL_FS, OP.scrapGt.mat(MT.Zr, 9), OP.dustTiny.mat(aMat, 1), OP.dustDiv72.mat(MT.Pu_243   , 6));
        aMat = MT.Yellorium;            aRegistry.add("Depleted Yellorium Fuel Rod"                   , "Reactors",  9329,  9200, MultiTileEntityReactorRodDepleted.class , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F)); RM.Centrifuge.addRecipe1(F, 64, 256, aRegistry.getItem(), ZL_FS, ZL_FS, OP.scrapGt.mat(MT.Zr, 9), OP.dustTiny.mat(aMat, 1), OP.dustDiv72.mat(MT.Cyanite  , 6));
        aMat = MT.Pu;                   aRegistry.add("Depleted Plutonium-244 Fuel Rod"               , "Reactors",  9330,  9200, MultiTileEntityReactorRodDepleted.class , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F)); RM.Centrifuge.addRecipe1(F, 64, 256, aRegistry.getItem(), ZL_FS, ZL_FS, OP.scrapGt.mat(MT.Zr, 9), OP.dustTiny.mat(aMat, 1), OP.dustDiv72.mat(MT.Pu_241   , 6));
        aMat = MT.Pu_241;               aRegistry.add("Depleted Plutonium-241 Fuel Rod"               , "Reactors",  9331,  9200, MultiTileEntityReactorRodDepleted.class , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F)); RM.Centrifuge.addRecipe1(F, 64, 256, aRegistry.getItem(), ZL_FS, ZL_FS, OP.scrapGt.mat(MT.Zr, 9), OP.dustTiny.mat(aMat, 1), OP.dustDiv72.mat(MT.Pu_243   , 6));
        aMat = MT.Pu_243;               aRegistry.add("Depleted Plutonium-243 Fuel Rod"               , "Reactors",  9332,  9200, MultiTileEntityReactorRodDepleted.class , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F)); RM.Centrifuge.addRecipe1(F, 64, 256, aRegistry.getItem(), ZL_FS, ZL_FS, OP.scrapGt.mat(MT.Zr, 9), OP.dustTiny.mat(aMat, 1), OP.dustDiv72.mat(MT.Am       , 6));
        aMat = MT.Pu_239;               aRegistry.add("Depleted Plutonium-239 Fuel Rod"               , "Reactors",  9333,  9200, MultiTileEntityReactorRodDepleted.class , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F)); RM.Centrifuge.addRecipe1(F, 64, 256, aRegistry.getItem(), ZL_FS, ZL_FS, OP.scrapGt.mat(MT.Zr, 9), OP.dustTiny.mat(aMat, 1), OP.dustDiv72.mat(MT.Am_241   , 6));
        aMat = MT.Blutonium;            aRegistry.add("Depleted Blutonium Fuel Rod"                   , "Reactors",  9339,  9200, MultiTileEntityReactorRodDepleted.class , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F)); RM.Centrifuge.addRecipe1(F, 64, 256, aRegistry.getItem(), ZL_FS, ZL_FS, OP.scrapGt.mat(MT.Zr, 9), OP.dustTiny.mat(aMat, 1), OP.dustDiv72.mat(MT.Ludicrite, 6));
        aMat = MT.Am;                   aRegistry.add("Depleted Americium-245 Fuel Rod"               , "Reactors",  9340,  9200, MultiTileEntityReactorRodDepleted.class , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F)); RM.Centrifuge.addRecipe1(F, 64, 256, aRegistry.getItem(), ZL_FS, ZL_FS, OP.scrapGt.mat(MT.Zr, 9), OP.dustTiny.mat(aMat, 1), OP.dustDiv72.mat(MT.Am_241   , 6));
        aMat = MT.Am_241;               aRegistry.add("Depleted Americium-241 Fuel Rod"               , "Reactors",  9341,  9200, MultiTileEntityReactorRodDepleted.class , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F)); RM.Centrifuge.addRecipe1(F, 64, 256, aRegistry.getItem(), ZL_FS, ZL_FS, OP.scrapGt.mat(MT.Zr, 9), OP.dustTiny.mat(aMat, 1), OP.dustDiv72.mat(MT.Nq_528   , 6));
        aMat = MT.Ludicrite;            aRegistry.add("Depleted Ludicrite Fuel Rod"                   , "Reactors",  9349,  9200, MultiTileEntityReactorRodDepleted.class , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F)); RM.Centrifuge.addRecipe1(F, 64, 256, aRegistry.getItem(), ZL_FS, ZL_FS, OP.scrapGt.mat(MT.Zr, 9), OP.dustTiny.mat(aMat, 1), OP.dustDiv72.mat(MT.Yellorium, 6));
        aMat = MT.Co_60;                aRegistry.add("Depleted Cobalt-60 Fuel Rod"                   , "Reactors",  9350,  9200, MultiTileEntityReactorRodDepleted.class , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F)); RM.Centrifuge.addRecipe1(F, 64, 256, aRegistry.getItem(), ZL_FS, ZL_FS, OP.scrapGt.mat(MT.Zr, 9), OP.dustTiny.mat(aMat, 1), OP.dustDiv72.mat(MT.Th       , 6));
        aMat = MT.Nq_528;               aRegistry.add("Depleted Enriched Naquadah Fuel Rod"           , "Reactors",  9360,  9200, MultiTileEntityReactorRodDepleted.class , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F)); RM.Centrifuge.addRecipe1(F, 64, 256, aRegistry.getItem(), ZL_FS, ZL_FS, OP.scrapGt.mat(MT.Zr, 9), OP.dustTiny.mat(aMat, 1), OP.dustDiv72.mat(MT.Nq_522   , 6));
        aMat = MT.Nq_522;               aRegistry.add("Depleted Naquadria Fuel Rod"                   , "Reactors",  9361,  9200, MultiTileEntityReactorRodDepleted.class , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F)); RM.Centrifuge.addRecipe1(F, 64, 256, aRegistry.getItem(), ZL_FS, ZL_FS, OP.scrapGt.mat(MT.Zr, 9), OP.dustTiny.mat(aMat, 1), OP.dustDiv72.mat(MT.Co_60    , 6));

        aMat = MT.Th;                   aRegistry.add("Thorium-232 Breeder Rod"                       , "Reactors",  9410,  9200, MultiTileEntityReactorRodBreeder.class  , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_MAXDURABILITY,  64000000L, NBT_NUCLEAR_LOSS, 1000, NBT_VALUE, 9411)); RM.Canner.addRecipe2(F, 16, 16, OP.bolt.mat(aMat, 4), IL.Reactor_Rod_Empty.get(1), aRegistry.getItem());
        aMat = MT.U_238;                aRegistry.add("Uranium-238 Breeder Rod"                       , "Reactors",  9420,  9200, MultiTileEntityReactorRodBreeder.class  , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_MAXDURABILITY, 256000000L, NBT_NUCLEAR_LOSS, 2500, NBT_VALUE, 9421)); RM.Canner.addRecipe2(F, 16, 16, OP.bolt.mat(aMat, 4), IL.Reactor_Rod_Empty.get(1), aRegistry.getItem());
        aMat = MT.Li;                   aRegistry.add("Lithium Breeder Rod"                           , "Reactors",  9430,  9200, MultiTileEntityReactorRodBreeder.class  , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_MAXDURABILITY,    640000L, NBT_NUCLEAR_LOSS,  250, NBT_VALUE, 9431)); RM.Canner.addRecipe2(F, 16, 16, OP.bolt.mat(aMat, 4), IL.Reactor_Rod_Empty.get(1), aRegistry.getItem());

        aMat = MT.U_233;                aRegistry.add("Uranium-233 Enriched Rod"                      , "Reactors",  9411,  9200, MultiTileEntityReactorRodProduct.class  , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_VALUE, 9410)); RM.Centrifuge.addRecipe1(F, 64, 256, aRegistry.getItem(), ZL_FS, ZL_FS, OP.scrapGt.mat(MT.Zr, 9), OP.dustTiny.mat(aMat, 4), OP.dustDiv72.mat(MT.Th, 4));
        aMat = MT.Pu_239;               aRegistry.add("Plutonium-239 Enriched Rod"                    , "Reactors",  9421,  9200, MultiTileEntityReactorRodProduct.class  , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_VALUE, 9420)); RM.Centrifuge.addRecipe1(F, 64, 256, aRegistry.getItem(), ZL_FS, ZL_FS, OP.scrapGt.mat(MT.Zr, 9), OP.dustTiny.mat(aMat, 4), OP.dustDiv72.mat(MT.U_238, 4));
        aMat = MT.T;                    aRegistry.add("Tritium Enriched Rod"                          , "Reactors",  9431,  9200, MultiTileEntityReactorRodProduct.class  , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_VALUE, 9430)); RM.Canner.addRecipe1(F, 16, 16, aRegistry.getItem(), new FluidStack[] {}, FL.amount(aMat.mGas, 500L), IL.Reactor_Rod_Empty.get(1));

        // Steam Turbines
        aClass = enableChangeMotor ? MultiTileEntityTurbineSteam_CH.class : MultiTileEntityTurbineSteam.class;
        for (AttributesSteamTurbine_CH STEAM_TURBINE : DATA_MACHINES_STEAM.SteamTurbine) {
            aMat = STEAM_TURBINE.material;
            aRegistry.add("Steam Turbine ("+STEAM_TURBINE.rotorMaterial.getLocal()+")" , "Turbines",  STEAM_TURBINE.ID,  1538, aClass, aMat.mToolQuality, STEAM_TURBINE.stackSize, aMachine,
                    UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   STEAM_TURBINE.nbtHardness, NBT_RESISTANCE,   STEAM_TURBINE.nbtResistance, NBT_OUTPUT,   STEAM_TURBINE.nbtOutput, NBT_EFFICIENCY, STEAM_TURBINE.nbtEfficiency, NBT_PREHEAT_ENERGY,  STEAM_TURBINE.nbtPreheatEnergy, NBT_PREHEAT_COST,   STEAM_TURBINE.nbtPreheatCost, NBT_COOLDOWN_RATE,   STEAM_TURBINE.nbtCooldownRate, NBT_EFFICIENCY_WATER, STEAM_TURBINE.nbtEfficiencyWater, NBT_EFFICIENCY_OC, STEAM_TURBINE.nbtEfficiencyOC, NBT_ENERGY_ACCEPTED, TD.Energy.STEAM, NBT_ENERGY_EMITTED, TD.Energy.RU
                    , NBT_INPUT,   UT.Code.units(STEAM_TURBINE.nbtOutput, STEAM_TURBINE.nbtEfficiency, 10000, T) * STEAM_PER_EU, NBT_WASTE_ENERGY, T),
                    STEAM_TURBINE.recipeObject);
        }
    }

    protected static void unsorted2(MultiTileEntityRegistry aRegistry, MultiTileEntityBlock aMetal, MultiTileEntityBlock aMetalChips, MultiTileEntityBlock aMetalWires, MultiTileEntityBlock aMachine, MultiTileEntityBlock aWooden, MultiTileEntityBlock aBush, MultiTileEntityBlock aStone, MultiTileEntityBlock aWool, MultiTileEntityBlock aTNT, MultiTileEntityBlock aHive, MultiTileEntityBlock aUtilMetal, MultiTileEntityBlock aUtilStone, MultiTileEntityBlock aUtilWood, MultiTileEntityBlock aUtilWool, OreDictMaterial aMat, Class<? extends TileEntity> aClass) {
        // Heaters
        aClass = MultiTileEntityHeaterElectric.class;
        aMat = MT.DATA.Electric_T[1];   aRegistry.add("Electric Heater ("                         +VN[1]+")", "Heaters"                             , 10001, 10001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,   32, NBT_OUTPUT,   16, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.HU), "TCT", "CMC", "TCd", 'M', OP.casingMachineDouble.dat(aMat), 'T', OP.screw.dat(aMat), 'C', OP.wireGt01.dat(ANY.Cu       ));
        aMat = MT.DATA.Electric_T[2];   aRegistry.add("Electric Heater ("                         +VN[2]+")", "Heaters"                             , 10002, 10001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,  128, NBT_OUTPUT,   64, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.HU), "TCT", "CMC", "TCd", 'M', OP.casingMachineDouble.dat(aMat), 'T', OP.screw.dat(aMat), 'C', OP.wireGt02.dat(MT.Constantan));
        aMat = MT.DATA.Electric_T[3];   aRegistry.add("Electric Heater ("                         +VN[3]+")", "Heaters"                             , 10003, 10001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,  512, NBT_OUTPUT,  256, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.HU), "TCT", "CMC", "TCd", 'M', OP.casingMachineDouble.dat(aMat), 'T', OP.screw.dat(aMat), 'C', OP.wireGt04.dat(MT.Kanthal   ));
        aMat = MT.DATA.Electric_T[4];   aRegistry.add("Electric Heater ("                         +VN[4]+")", "Heaters"                             , 10004, 10001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT, 2048, NBT_OUTPUT, 1024, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.HU), "TCT", "CMC", "TCd", 'M', OP.casingMachineDouble.dat(aMat), 'T', OP.screw.dat(aMat), 'C', OP.wireGt08.dat(MT.Nichrome  ));
        aMat = MT.DATA.Electric_T[5];   aRegistry.add("Electric Heater ("                         +VN[5]+")", "Heaters"                             , 10005, 10001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT, 8192, NBT_OUTPUT, 4096, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.HU), "TCT", "CMC", "TCd", 'M', OP.casingMachineDouble.dat(aMat), 'T', OP.screw.dat(aMat), 'C', OP.wireGt16.dat(MT.SiC       ));

        aClass = MultiTileEntityHeaterFlux.class;
        aMat = MT.DATA.Flux_T[1];       aRegistry.add("Flux Heater ("                   +aMat.getLocal()+")", "Heaters"                             , 11001, 10001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,  128, NBT_OUTPUT,   16, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.HU), "SSS", "SMS", "SSS", 'M', aRegistry.getItem(10001), 'S', OP.stickLong.dat(aMat));
        aMat = MT.DATA.Flux_T[2];       aRegistry.add("Flux Heater ("                   +aMat.getLocal()+")", "Heaters"                             , 11002, 10001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,  512, NBT_OUTPUT,   64, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.HU), "SSS", "SMS", "SSS", 'M', aRegistry.getItem(10002), 'S', OP.stickLong.dat(aMat));
        aMat = MT.DATA.Flux_T[3];       aRegistry.add("Flux Heater ("                   +aMat.getLocal()+")", "Heaters"                             , 11003, 10001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT, 2048, NBT_OUTPUT,  256, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.HU), "SSS", "SMS", "SSS", 'M', aRegistry.getItem(10003), 'S', OP.stickLong.dat(aMat));
        aMat = MT.DATA.Flux_T[4];       aRegistry.add("Flux Heater ("                   +aMat.getLocal()+")", "Heaters"                             , 11004, 10001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT, 8192, NBT_OUTPUT, 1024, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.HU), "SSS", "SMS", "SSS", 'M', aRegistry.getItem(10004), 'S', OP.stickLong.dat(aMat));
        aMat = MT.DATA.Flux_T[5];       aRegistry.add("Flux Heater ("                   +aMat.getLocal()+")", "Heaters"                             , 11005, 10001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,32768, NBT_OUTPUT, 4096, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.HU), "SSS", "SMS", "SSS", 'M', aRegistry.getItem(10005), 'S', OP.stickLong.dat(aMat));


        // Engines
        aClass = MultiTileEntityEngineElectric.class;
        aMat = MT.DATA.Electric_T[1];   aRegistry.add("Electric Engine ("                         +VN[1]+")", "Engines"                             , 10011,  1304, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,   32, NBT_OUTPUT,   16, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.KU), "PhP", "CIC", "PwP", 'P', OP.plateTriple.dat(aMat), 'I', OP.stickLong.dat(MT.IronMagnetic        ), 'C', OP.wireGt01.dat(ANY.Cu)); // TODO: Temp Recipes
        aMat = MT.DATA.Electric_T[2];   aRegistry.add("Electric Engine ("                         +VN[2]+")", "Engines"                             , 10012,  1304, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,  128, NBT_OUTPUT,   64, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.KU), "PhP", "CIC", "PwP", 'P', OP.plateTriple.dat(aMat), 'I', OP.stickLong.dat(MT.SteelMagnetic       ), 'C', OP.wireGt02.dat(ANY.Cu));
        aMat = MT.DATA.Electric_T[3];   aRegistry.add("Electric Engine ("                         +VN[3]+")", "Engines"                             , 10013,  1304, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,  512, NBT_OUTPUT,  256, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.KU), "PhP", "CIC", "PwP", 'P', OP.plateTriple.dat(aMat), 'I', OP.stickLong.dat(MT.SteelMagnetic       ), 'C', OP.wireGt04.dat(MT.AnnealedCopper));
        aMat = MT.DATA.Electric_T[4];   aRegistry.add("Electric Engine ("                         +VN[4]+")", "Engines"                             , 10014,  1304, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT, 2048, NBT_OUTPUT, 1024, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.KU), "PhP", "CIC", "PwP", 'P', OP.plateTriple.dat(aMat), 'I', OP.stickLong.dat(MT.NeodymiumMagnetic   ), 'C', OP.wireGt08.dat(MT.AnnealedCopper));
        aMat = MT.DATA.Electric_T[5];   aRegistry.add("Electric Engine ("                         +VN[5]+")", "Engines"                             , 10015,  1304, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT, 8192, NBT_OUTPUT, 4096, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.KU), "PhP", "CIC", "PwP", 'P', OP.plateTriple.dat(aMat), 'I', OP.stickLong.dat(MT.NeodymiumMagnetic   ), 'C', OP.wireGt16.dat(MT.AnnealedCopper));

        aClass = MultiTileEntityEngineFlux.class;
        aMat = MT.DATA.Flux_T[1];       aRegistry.add("Flux Engine ("                   +aMat.getLocal()+")", "Engines"                             , 11011,  1304, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,  128, NBT_OUTPUT,   16, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.KU), "G", "M", "G", 'M', aRegistry.getItem(10011), 'G', OP.gearGt.dat(aMat));
        aMat = MT.DATA.Flux_T[2];       aRegistry.add("Flux Engine ("                   +aMat.getLocal()+")", "Engines"                             , 11012,  1304, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,  512, NBT_OUTPUT,   64, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.KU), "G", "M", "G", 'M', aRegistry.getItem(10012), 'G', OP.gearGt.dat(aMat));
        aMat = MT.DATA.Flux_T[3];       aRegistry.add("Flux Engine ("                   +aMat.getLocal()+")", "Engines"                             , 11013,  1304, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT, 2048, NBT_OUTPUT,  256, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.KU), "G", "M", "G", 'M', aRegistry.getItem(10013), 'G', OP.gearGt.dat(aMat));
        aMat = MT.DATA.Flux_T[4];       aRegistry.add("Flux Engine ("                   +aMat.getLocal()+")", "Engines"                             , 11014,  1304, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT, 8192, NBT_OUTPUT, 1024, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.KU), "G", "M", "G", 'M', aRegistry.getItem(10014), 'G', OP.gearGt.dat(aMat));
        aMat = MT.DATA.Flux_T[5];       aRegistry.add("Flux Engine ("                   +aMat.getLocal()+")", "Engines"                             , 11015,  1304, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,32768, NBT_OUTPUT, 4096, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.KU), "G", "M", "G", 'M', aRegistry.getItem(10015), 'G', OP.gearGt.dat(aMat));


        // Motors
        aClass = MultiTileEntityMotorElectric.class;
        aMat = MT.DATA.Electric_T[1];   aRegistry.add("Electric Motor ("                          +VN[1]+")", "Motors"                              , 10021, 10021, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,   32, NBT_OUTPUT,   16, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.RU), "TIT", "CMC", "TGd", 'M', OP.casingMachineDouble.dat(aMat), 'G', OP.gearGt.dat(aMat), 'T', OP.screw.dat(aMat), 'I', OP.stickLong.dat(MT.IronMagnetic         ), 'C', OP.wireGt01.dat(ANY.Cu)); // TODO: Temp Recipes
        aMat = MT.DATA.Electric_T[2];   aRegistry.add("Electric Motor ("                          +VN[2]+")", "Motors"                              , 10022, 10021, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,  128, NBT_OUTPUT,   64, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.RU), "TIT", "CMC", "TGd", 'M', OP.casingMachineDouble.dat(aMat), 'G', OP.gearGt.dat(aMat), 'T', OP.screw.dat(aMat), 'I', OP.stickLong.dat(MT.SteelMagnetic        ), 'C', OP.wireGt02.dat(ANY.Cu));
        aMat = MT.DATA.Electric_T[3];   aRegistry.add("Electric Motor ("                          +VN[3]+")", "Motors"                              , 10023, 10021, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,  512, NBT_OUTPUT,  256, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.RU), "TIT", "CMC", "TGd", 'M', OP.casingMachineDouble.dat(aMat), 'G', OP.gearGt.dat(aMat), 'T', OP.screw.dat(aMat), 'I', OP.stickLong.dat(MT.SteelMagnetic        ), 'C', OP.wireGt04.dat(MT.AnnealedCopper));
        aMat = MT.DATA.Electric_T[4];   aRegistry.add("Electric Motor ("                          +VN[4]+")", "Motors"                              , 10024, 10021, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT, 2048, NBT_OUTPUT, 1024, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.RU), "TIT", "CMC", "TGd", 'M', OP.casingMachineDouble.dat(aMat), 'G', OP.gearGt.dat(aMat), 'T', OP.screw.dat(aMat), 'I', OP.stickLong.dat(MT.NeodymiumMagnetic    ), 'C', OP.wireGt08.dat(MT.AnnealedCopper));
        aMat = MT.DATA.Electric_T[5];   aRegistry.add("Electric Motor ("                          +VN[5]+")", "Motors"                              , 10025, 10021, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT, 8192, NBT_OUTPUT, 4096, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.RU), "TIT", "CMC", "TGd", 'M', OP.casingMachineDouble.dat(aMat), 'G', OP.gearGt.dat(aMat), 'T', OP.screw.dat(aMat), 'I', OP.stickLong.dat(MT.NeodymiumMagnetic    ), 'C', OP.wireGt16.dat(MT.AnnealedCopper));

        aClass = MultiTileEntityMotorFlux.class;
        aMat = MT.DATA.Flux_T[1];       aRegistry.add("Flux Motor ("                    +aMat.getLocal()+")", "Motors"                              , 11021, 10021, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,  128, NBT_OUTPUT,   16, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.RU), "GMG", 'M', aRegistry.getItem(10021), 'G', OP.gearGt.dat(aMat));
        aMat = MT.DATA.Flux_T[2];       aRegistry.add("Flux Motor ("                    +aMat.getLocal()+")", "Motors"                              , 11022, 10021, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,  512, NBT_OUTPUT,   64, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.RU), "GMG", 'M', aRegistry.getItem(10022), 'G', OP.gearGt.dat(aMat));
        aMat = MT.DATA.Flux_T[3];       aRegistry.add("Flux Motor ("                    +aMat.getLocal()+")", "Motors"                              , 11023, 10021, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT, 2048, NBT_OUTPUT,  256, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.RU), "GMG", 'M', aRegistry.getItem(10023), 'G', OP.gearGt.dat(aMat));
        aMat = MT.DATA.Flux_T[4];       aRegistry.add("Flux Motor ("                    +aMat.getLocal()+")", "Motors"                              , 11024, 10021, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT, 8192, NBT_OUTPUT, 1024, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.RU), "GMG", 'M', aRegistry.getItem(10024), 'G', OP.gearGt.dat(aMat));
        aMat = MT.DATA.Flux_T[5];       aRegistry.add("Flux Motor ("                    +aMat.getLocal()+")", "Motors"                              , 11025, 10021, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,32768, NBT_OUTPUT, 4096, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.RU), "GMG", 'M', aRegistry.getItem(10025), 'G', OP.gearGt.dat(aMat));


        // Magnets
        aClass = MultiTileEntityMagnetElectric.class;
        aMat = MT.DATA.Electric_T[1];   aRegistry.add("Electromagnet ("                           +VN[1]+")", "Magnets"                             , 10031, 10031, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,   32, NBT_OUTPUT,   16, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.MU), "CxC", "CMC", "CwC", 'M', OP.casingMachine.dat(aMat), 'C', OP.wireGt01.dat(ANY.Cu));
        aMat = MT.DATA.Electric_T[2];   aRegistry.add("Electromagnet ("                           +VN[2]+")", "Magnets"                             , 10032, 10031, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,  128, NBT_OUTPUT,   64, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.MU), "CxC", "CMC", "CwC", 'M', OP.casingMachine.dat(aMat), 'C', OP.wireGt02.dat(ANY.Cu));
        aMat = MT.DATA.Electric_T[3];   aRegistry.add("Electromagnet ("                           +VN[3]+")", "Magnets"                             , 10033, 10031, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,  512, NBT_OUTPUT,  256, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.MU), "CxC", "CMC", "CwC", 'M', OP.casingMachine.dat(aMat), 'C', OP.wireGt04.dat(MT.AnnealedCopper));
        aMat = MT.DATA.Electric_T[4];   aRegistry.add("Electromagnet ("                           +VN[4]+")", "Magnets"                             , 10034, 10031, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT, 2048, NBT_OUTPUT, 1024, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.MU), "CxC", "CMC", "CwC", 'M', OP.casingMachine.dat(aMat), 'C', OP.wireGt08.dat(MT.AnnealedCopper));
        aMat = MT.DATA.Electric_T[5];   aRegistry.add("Electromagnet ("                           +VN[5]+")", "Magnets"                             , 10035, 10031, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT, 8192, NBT_OUTPUT, 4096, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.MU), "CxC", "CMC", "CwC", 'M', OP.casingMachine.dat(aMat), 'C', OP.wireGt16.dat(MT.AnnealedCopper));

        aClass = MultiTileEntityMagnetFlux.class;
        aMat = MT.DATA.Flux_T[1];       aRegistry.add("Flux Magnet ("                   +aMat.getLocal()+")", "Magnets"                             , 11031, 10031, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,  128, NBT_OUTPUT,   16, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.MU), "SSS", "SMS", "SSS", 'M', aRegistry.getItem(10031), 'S', OP.stickLong.dat(aMat));
        aMat = MT.DATA.Flux_T[2];       aRegistry.add("Flux Magnet ("                   +aMat.getLocal()+")", "Magnets"                             , 11032, 10031, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,  512, NBT_OUTPUT,   64, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.MU), "SSS", "SMS", "SSS", 'M', aRegistry.getItem(10032), 'S', OP.stickLong.dat(aMat));
        aMat = MT.DATA.Flux_T[3];       aRegistry.add("Flux Magnet ("                   +aMat.getLocal()+")", "Magnets"                             , 11033, 10031, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT, 2048, NBT_OUTPUT,  256, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.MU), "SSS", "SMS", "SSS", 'M', aRegistry.getItem(10033), 'S', OP.stickLong.dat(aMat));
        aMat = MT.DATA.Flux_T[4];       aRegistry.add("Flux Magnet ("                   +aMat.getLocal()+")", "Magnets"                             , 11034, 10031, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT, 8192, NBT_OUTPUT, 1024, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.MU), "SSS", "SMS", "SSS", 'M', aRegistry.getItem(10034), 'S', OP.stickLong.dat(aMat));
        aMat = MT.DATA.Flux_T[5];       aRegistry.add("Flux Magnet ("                   +aMat.getLocal()+")", "Magnets"                             , 11035, 10031, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,32768, NBT_OUTPUT, 4096, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.MU), "SSS", "SMS", "SSS", 'M', aRegistry.getItem(10035), 'S', OP.stickLong.dat(aMat));


        // Transformers
        aClass = MultiTileEntityTransformerElectric.class;
        aMat = MT.DATA.Electric_T[0];   aRegistry.add("Transformer ("+VN[0]+"-"                   +VN[1]+")", "Transformers"                        , 10040, 10041, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT, V[1], NBT_OUTPUT, V[0], NBT_MULTIPLIER, V[1]/V[0], NBT_WASTE_ENERGY, F, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.EU), "WIW", "XMx", "WIW", 'M', OP.casingMachine.dat(aMat), 'W', OP.wireGt01.dat(ANY.Cu), 'X', OP.wireGt04.dat(ANY.Cu), 'I', OP.plateDouble.dat(ANY.Fe));
        aMat = MT.DATA.Electric_T[1];   aRegistry.add("Transformer ("+VN[1]+"-"                   +VN[2]+")", "Transformers"                        , 10041, 10041, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT, V[2], NBT_OUTPUT, V[1], NBT_MULTIPLIER, V[2]/V[1], NBT_WASTE_ENERGY, F, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.EU), "WIW", "XMx", "WIW", 'M', OP.casingMachine.dat(aMat), 'W', OP.wireGt01.dat(ANY.Cu), 'X', OP.wireGt04.dat(ANY.Cu), 'I', OP.plateDouble.dat(ANY.Fe));
        aMat = MT.DATA.Electric_T[2];   aRegistry.add("Transformer ("+VN[2]+"-"                   +VN[3]+")", "Transformers"                        , 10042, 10041, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT, V[3], NBT_OUTPUT, V[2], NBT_MULTIPLIER, V[3]/V[2], NBT_WASTE_ENERGY, F, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.EU), "WIW", "XMx", "WIW", 'M', OP.casingMachine.dat(aMat), 'W', OP.wireGt01.dat(ANY.Cu), 'X', OP.wireGt04.dat(ANY.Cu), 'I', OP.plateDouble.dat(ANY.Fe));
        aMat = MT.DATA.Electric_T[3];   aRegistry.add("Transformer ("+VN[3]+"-"                   +VN[4]+")", "Transformers"                        , 10043, 10041, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT, V[4], NBT_OUTPUT, V[3], NBT_MULTIPLIER, V[4]/V[3], NBT_WASTE_ENERGY, F, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.EU), "WIW", "XMx", "WIW", 'M', OP.casingMachine.dat(aMat), 'W', OP.wireGt01.dat(MT.AnnealedCopper), 'X', OP.wireGt04.dat(MT.AnnealedCopper), 'I', OP.plateDouble.dat(ANY.Fe));
        aMat = MT.DATA.Electric_T[4];   aRegistry.add("Transformer ("+VN[4]+"-"                   +VN[5]+")", "Transformers"                        , 10044, 10041, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT, V[5], NBT_OUTPUT, V[4], NBT_MULTIPLIER, V[5]/V[4], NBT_WASTE_ENERGY, F, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.EU), "WIW", "XMx", "WIW", 'M', OP.casingMachine.dat(aMat), 'W', OP.wireGt01.dat(MT.AnnealedCopper), 'X', OP.wireGt04.dat(MT.AnnealedCopper), 'I', OP.plateDouble.dat(ANY.Fe));
        aMat = MT.DATA.Electric_T[5];   aRegistry.add("Transformer ("+VN[5]+"-"+VN[6]+")"                   , "Transformers"                        , 10045, 10041, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT, V[6], NBT_OUTPUT, V[5], NBT_MULTIPLIER, V[6]/V[5], NBT_WASTE_ENERGY, F, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.EU), "WIW", "XMx", "WIW", 'M', OP.casingMachine.dat(aMat), 'W', OP.wireGt01.dat(MT.AnnealedCopper), 'X', OP.wireGt04.dat(MT.AnnealedCopper), 'I', OP.plateDouble.dat(ANY.Fe));
        aMat = MT.DATA.Electric_T[6];   aRegistry.add("Transformer ("+VN[6]+"-"+VN[7]+")"                   , "Transformers"                        , 10046, 10041, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT, V[7], NBT_OUTPUT, V[6], NBT_MULTIPLIER, V[7]/V[6], NBT_WASTE_ENERGY, F, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.EU), "WIW", "XMx", "WIW", 'M', OP.casingMachine.dat(aMat), 'W', OP.wireGt01.dat(MT.AnnealedCopper), 'X', OP.wireGt04.dat(MT.AnnealedCopper), 'I', OP.plateDouble.dat(ANY.Fe));
        aMat = MT.DATA.Electric_T[7];   aRegistry.add("Transformer ("+VN[7]+"-"+VN[8]+")"                   , "Transformers"                        , 10047, 10041, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT, V[8], NBT_OUTPUT, V[7], NBT_MULTIPLIER, V[8]/V[7], NBT_WASTE_ENERGY, F, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.EU), "WIW", "XMx", "WIW", 'M', OP.casingMachine.dat(aMat), 'W', OP.wireGt01.dat(MT.AnnealedCopper), 'X', OP.wireGt04.dat(MT.AnnealedCopper), 'I', OP.plateDouble.dat(ANY.Fe));
        aMat = MT.DATA.Electric_T[8];   aRegistry.add("Transformer ("+VN[8]+"-"+VN[9]+")"                   , "Transformers"                        , 10048, 10041, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT, V[9], NBT_OUTPUT, V[8], NBT_MULTIPLIER, V[9]/V[8], NBT_WASTE_ENERGY, F, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.EU), "WIW", "XMx", "WIW", 'M', OP.casingMachine.dat(aMat), 'W', OP.wireGt01.dat(MT.AnnealedCopper), 'X', OP.wireGt04.dat(MT.AnnealedCopper), 'I', OP.plateDouble.dat(ANY.Fe));


        // Battery Boxes
        for (int i = 0; i < 10; i++) {
            aRegistry.add("Battery Box ("       +VN[i]+")", "Battery Boxes", 10080+i, 10081, MultiTileEntityBatteryBox.class, MT.DATA.Electric_T[i].mToolQuality, 16, aMachine, UT.NBT.make(NBT_MATERIAL, MT.DATA.Electric_T[i], NBT_HARDNESS, 4.0F, NBT_RESISTANCE, 4.0F, NBT_INPUT, V[i], NBT_OUTPUT, V[i], NBT_ENERGY_EMITTED, TD.Energy.EU, NBT_INV_SIZE,  4), "WCW", "WCW", "XMX", 'C', MT.DATA.CABLES_01[i], 'X', OD_CIRCUITS[i], 'W', MT.DATA.WIRES_01[i], 'M', OP.casingMachine.dat(MT.DATA.Electric_T[i]));
            aRegistry.add("Large Battery Box (" +VN[i]+")", "Battery Boxes", 10090+i, 10081, MultiTileEntityBatteryBoxLarge.class, MT.DATA.Electric_T[i].mToolQuality, 16, aMachine, UT.NBT.make(NBT_MATERIAL, MT.DATA.Electric_T[i], NBT_HARDNESS, 4.0F, NBT_RESISTANCE, 4.0F, NBT_INPUT, V[i], NBT_OUTPUT, V[i], NBT_ENERGY_EMITTED, TD.Energy.EU, NBT_INV_SIZE, 16), "WCW", "WCW", "XMX", 'C', MT.DATA.CABLES_04[i], 'X', OD_CIRCUITS[i], 'W', MT.DATA.WIRES_04[i], 'M', aRegistry.getItem(10040+i));
        }


        // Solar Panels
        aClass = MultiTileEntitySolarPanelElectric.class;
        aMat = MT.DATA.Electric_T[0];   aRegistry.add("Solar Panel (Silicon)"                               , "Solar Panels"                        , 10050, 10050, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_OUTPUT,  8, NBT_ENERGY_EMITTED, TD.Energy.EU), "SWS", "CMC", "SWS", 'M', OP.casingMachine.dat(aMat), 'W', OP.cableGt01.dat(ANY.Cu           ), 'C', OD_CIRCUITS[1], 'S', OP.plateGem.dat(ANY.Si));
        aMat = MT.DATA.Electric_T[2];   aRegistry.add("Solar Panel (Germanium)"                             , "Solar Panels"                        , 10051, 10050, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_OUTPUT, 16, NBT_ENERGY_EMITTED, TD.Energy.EU), "SWS", "CMC", "SWS", 'M', OP.casingMachine.dat(aMat), 'W', OP.cableGt01.dat(MT.AnnealedCopper), 'C', OD_CIRCUITS[6], 'S', OP.plateGem.dat(MT.Ge));



        // Long Distance Transfer
        aMat = MT.Pt;                   aRegistry.add("Long Distance Item Pipeline Endpoint"                , "Long Distance Transport"             , 10060, 10060, MultiTileEntityLongDistancePipelineItem.class, aMat.mToolQuality, 16, aMachine      , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  16.0F, NBT_RESISTANCE,  16.0F), "ZPZ", "PMP", "ZPZ", 'M', OP.casingMachine.dat(aMat), 'P', OP.pipeMedium.dat(aMat), 'Z', OP.plate.dat(MT.Plastic));
        aMat = ANY.W;                   aRegistry.add("Long Distance Fluid Pipeline Endpoint"               , "Long Distance Transport"             , 10061, 10060, MultiTileEntityLongDistancePipelineFluid.class, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  16.0F, NBT_RESISTANCE,  16.0F), "ZPZ", "PMP", "ZPZ", 'M', OP.casingMachine.dat(aMat), 'P', OP.pipeMedium.dat(aMat), 'Z', OP.plate.dat(MT.Plastic));
        aClass = MultiTileEntityLongDistanceTransformer.class;
        aMat = MT.DATA.Electric_T[4];   aRegistry.add("Long Distance Transformer Endpoint ("      +VN[4]+")", "Long Distance Transport"             , 10064, 10060, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT, V[4], NBT_OUTPUT, V[4], NBT_WASTE_ENERGY, F, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.EU), "WMW", "MxM", "WMW", 'M', aRegistry.getItem(10044), 'W', OP.cableGt04.dat(MT.AnnealedCopper));
        aMat = MT.DATA.Electric_T[5];   aRegistry.add("Long Distance Transformer Endpoint ("      +VN[5]+")", "Long Distance Transport"             , 10065, 10060, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT, V[5], NBT_OUTPUT, V[5], NBT_WASTE_ENERGY, F, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.EU), "WMW", "MxM", "WMW", 'M', aRegistry.getItem(10045), 'W', OP.cableGt04.dat(MT.AnnealedCopper));
        aMat = MT.DATA.Electric_T[6];   aRegistry.add("Long Distance Transformer Endpoint ("+VN[6]+")"      , "Long Distance Transport"             , 10066, 10060, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT, V[6], NBT_OUTPUT, V[6], NBT_WASTE_ENERGY, F, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.EU), "WMW", "MxM", "WMW", 'M', aRegistry.getItem(10046), 'W', OP.cableGt04.dat(MT.AnnealedCopper));
        aMat = MT.DATA.Electric_T[7];   aRegistry.add("Long Distance Transformer Endpoint ("+VN[7]+")"      , "Long Distance Transport"             , 10067, 10060, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT, V[7], NBT_OUTPUT, V[7], NBT_WASTE_ENERGY, F, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.EU), "WMW", "MxM", "WMW", 'M', aRegistry.getItem(10047), 'W', OP.cableGt04.dat(MT.AnnealedCopper));
        aMat = MT.DATA.Electric_T[8];   aRegistry.add("Long Distance Transformer Endpoint ("+VN[8]+")"      , "Long Distance Transport"             , 10068, 10060, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT, V[8], NBT_OUTPUT, V[8], NBT_WASTE_ENERGY, F, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.EU), "WMW", "MxM", "WMW", 'M', aRegistry.getItem(10048), 'W', OP.cableGt04.dat(MT.AnnealedCopper));

        BlocksGT.LongDistPipe01.setCreativeTab(aRegistry.mCreativeTabs.get((short)10060));
        BlocksGT.LongDistWire01.setCreativeTab(aRegistry.mCreativeTabs.get((short)10060));


        // BC Lasers
        aClass = MultiTileEntityLaserBuildcraft.class;
        aMat = MT.DATA.Electric_T[1];   aRegistry.add("Buildcraft Assembly Laser ("               +VN[1]+")", "Lasers"                              , 10071, 10071, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT, V[1], NBT_OUTPUT, V[1]*RF_PER_EU, NBT_WASTE_ENERGY, F, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.RF), "CWC", "PDP", "wfh", 'P', OP.plateTriple.dat(aMat), 'C', OD_CIRCUITS[1], 'W', MT.DATA.CABLES_04[1], 'D', OP.gemFlawless.dat(ANY.Diamond));
        aMat = MT.DATA.Electric_T[2];   aRegistry.add("Buildcraft Assembly Laser ("               +VN[2]+")", "Lasers"                              , 10072, 10071, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT, V[2], NBT_OUTPUT, V[2]*RF_PER_EU, NBT_WASTE_ENERGY, F, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.RF), "CWC", "PDP", "wfh", 'P', OP.plateTriple.dat(aMat), 'C', OD_CIRCUITS[2], 'W', MT.DATA.CABLES_04[2], 'D', OP.gemFlawless.dat(ANY.Diamond));
        aMat = MT.DATA.Electric_T[3];   aRegistry.add("Buildcraft Assembly Laser ("               +VN[3]+")", "Lasers"                              , 10073, 10071, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT, V[3], NBT_OUTPUT, V[3]*RF_PER_EU, NBT_WASTE_ENERGY, F, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.RF), "CWC", "PDP", "wfh", 'P', OP.plateTriple.dat(aMat), 'C', OD_CIRCUITS[3], 'W', MT.DATA.CABLES_04[3], 'D', OP.gemExquisite.dat(ANY.Diamond));
        aMat = MT.DATA.Electric_T[4];   aRegistry.add("Buildcraft Assembly Laser ("               +VN[4]+")", "Lasers"                              , 10074, 10071, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT, V[4], NBT_OUTPUT, V[4]*RF_PER_EU, NBT_WASTE_ENERGY, F, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.RF), "CWC", "PDP", "wfh", 'P', OP.plateTriple.dat(aMat), 'C', OD_CIRCUITS[4], 'W', MT.DATA.CABLES_04[4], 'D', OP.gemExquisite.dat(ANY.Diamond));
        aMat = MT.DATA.Electric_T[5];   aRegistry.add("Buildcraft Assembly Laser ("               +VN[5]+")", "Lasers"                              , 10075, 10071, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT, V[5], NBT_OUTPUT, V[5]*RF_PER_EU, NBT_WASTE_ENERGY, F, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.RF), "CWC", "PDP", "wfh", 'P', OP.plateTriple.dat(aMat), 'C', OD_CIRCUITS[5], 'W', MT.DATA.CABLES_04[5], 'D', OP.gemLegendary.dat(ANY.Diamond));


        // Lasers
        aClass = MultiTileEntityLaserElectric.class;
        aMat = MT.DATA.Electric_T[1];   aRegistry.add("Electric CO2 Laser ("                      +VN[1]+")", "Lasers"                              , 10101, 10071, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,   32, NBT_OUTPUT,   16, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.LU), " L ", " W ", "CMC", 'M', OP.casingMachine.dat(aMat), 'L', IL.Comp_Laser_Gas_CO2, 'C', OD_CIRCUITS[1], 'W', MT.DATA.CABLES_01[1]);
        aMat = MT.DATA.Electric_T[2];   aRegistry.add("Electric CO2 Laser ("                      +VN[2]+")", "Lasers"                              , 10102, 10071, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,  128, NBT_OUTPUT,   64, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.LU), "L L", "W W", "CMC", 'M', OP.casingMachine.dat(aMat), 'L', IL.Comp_Laser_Gas_CO2, 'C', OD_CIRCUITS[2], 'W', MT.DATA.CABLES_01[2]);
        aMat = MT.DATA.Electric_T[3];   aRegistry.add("Electric CO2 Laser ("                      +VN[3]+")", "Lasers"                              , 10103, 10071, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,  512, NBT_OUTPUT,  256, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.LU), "LLL", "WWW", "CMC", 'M', OP.casingMachine.dat(aMat), 'L', IL.Comp_Laser_Gas_CO2, 'C', OD_CIRCUITS[3], 'W', MT.DATA.CABLES_01[3]);
        aMat = MT.DATA.Electric_T[4];   aRegistry.add("Electric CO2 Laser ("                      +VN[4]+")", "Lasers"                              , 10104, 10071, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT, 2048, NBT_OUTPUT, 1024, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.LU), "L L", "LWL", "CMC", 'M', OP.casingMachine.dat(aMat), 'L', IL.Comp_Laser_Gas_CO2, 'C', OD_CIRCUITS[4], 'W', MT.DATA.CABLES_04[4]);
        aMat = MT.DATA.Electric_T[5];   aRegistry.add("Electric CO2 Laser ("                      +VN[5]+")", "Lasers"                              , 10105, 10071, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT, 8192, NBT_OUTPUT, 4096, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.LU), "LLL", "LWL", "CMC", 'M', OP.casingMachine.dat(aMat), 'L', IL.Comp_Laser_Gas_CO2, 'C', OD_CIRCUITS[5], 'W', MT.DATA.CABLES_04[5]);

        aClass = MultiTileEntityLaserFlux.class;
        aMat = MT.DATA.Flux_T[1];       aRegistry.add("Flux Laser ("                    +aMat.getLocal()+")", "Lasers"                              , 11101, 10071, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,  128, NBT_OUTPUT,   16, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.LU), "PPP", "PMP", "PPP", 'M', aRegistry.getItem(10101), 'P', OP.plate.dat(aMat));
        aMat = MT.DATA.Flux_T[2];       aRegistry.add("Flux Laser ("                    +aMat.getLocal()+")", "Lasers"                              , 11102, 10071, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,  512, NBT_OUTPUT,   64, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.LU), "PPP", "PMP", "PPP", 'M', aRegistry.getItem(10102), 'P', OP.plate.dat(aMat));
        aMat = MT.DATA.Flux_T[3];       aRegistry.add("Flux Laser ("                    +aMat.getLocal()+")", "Lasers"                              , 11103, 10071, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT, 2048, NBT_OUTPUT,  256, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.LU), "PPP", "PMP", "PPP", 'M', aRegistry.getItem(10103), 'P', OP.plate.dat(aMat));
        aMat = MT.DATA.Flux_T[4];       aRegistry.add("Flux Laser ("                    +aMat.getLocal()+")", "Lasers"                              , 11104, 10071, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT, 8192, NBT_OUTPUT, 1024, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.LU), "PPP", "PMP", "PPP", 'M', aRegistry.getItem(10104), 'P', OP.plate.dat(aMat));
        aMat = MT.DATA.Flux_T[5];       aRegistry.add("Flux Laser ("                    +aMat.getLocal()+")", "Lasers"                              , 11105, 10071, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,32768, NBT_OUTPUT, 4096, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.LU), "PPP", "PMP", "PPP", 'M', aRegistry.getItem(10105), 'P', OP.plate.dat(aMat));


        // Dynamos
        aClass = MultiTileEntityDynamoElectric.class;
        aMat = MT.DATA.Electric_T[0];   aRegistry.add(T, "Electric Dynamo ("              +VN[0]+")", "Dynamos"                             , 10110, 10111, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,   14, NBT_OUTPUT,    8, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_ENERGY_EMITTED, TD.Energy.EU), "TGT", "CMC", "TId", 'M', OP.casingMachineDouble.dat(aMat), 'T', OP.screw.dat(aMat), 'G', OP.gearGt.dat(aMat), 'I', OP.stickLong.dat(MT.IronMagnetic     ), 'C', OP.wireGt01.dat(ANY.Cu));
        aMat = MT.DATA.Electric_T[1];   aRegistry.add("Electric Dynamo ("                         +VN[1]+")", "Dynamos"                             , 10111, 10111, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,   54, NBT_OUTPUT,   32, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_ENERGY_EMITTED, TD.Energy.EU), "TGT", "CMC", "TId", 'M', OP.casingMachineDouble.dat(aMat), 'T', OP.screw.dat(aMat), 'G', OP.gearGt.dat(aMat), 'I', OP.stickLong.dat(MT.IronMagnetic     ), 'C', OP.wireGt01.dat(ANY.Cu));
        aMat = MT.DATA.Electric_T[2];   aRegistry.add("Electric Dynamo ("                         +VN[2]+")", "Dynamos"                             , 10112, 10111, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,  214, NBT_OUTPUT,  128, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_ENERGY_EMITTED, TD.Energy.EU), "TGT", "CMC", "TId", 'M', OP.casingMachineDouble.dat(aMat), 'T', OP.screw.dat(aMat), 'G', OP.gearGt.dat(aMat), 'I', OP.stickLong.dat(MT.SteelMagnetic    ), 'C', OP.wireGt02.dat(ANY.Cu));
        aMat = MT.DATA.Electric_T[3];   aRegistry.add("Electric Dynamo ("                         +VN[3]+")", "Dynamos"                             , 10113, 10111, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,  854, NBT_OUTPUT,  512, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_ENERGY_EMITTED, TD.Energy.EU), "TGT", "CMC", "TId", 'M', OP.casingMachineDouble.dat(aMat), 'T', OP.screw.dat(aMat), 'G', OP.gearGt.dat(aMat), 'I', OP.stickLong.dat(MT.SteelMagnetic    ), 'C', OP.wireGt04.dat(MT.AnnealedCopper));
        aMat = MT.DATA.Electric_T[4];   aRegistry.add("Electric Dynamo ("                         +VN[4]+")", "Dynamos"                             , 10114, 10111, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT, 3414, NBT_OUTPUT, 2048, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_ENERGY_EMITTED, TD.Energy.EU), "TGT", "CMC", "TId", 'M', OP.casingMachineDouble.dat(aMat), 'T', OP.screw.dat(aMat), 'G', OP.gearGt.dat(aMat), 'I', OP.stickLong.dat(MT.NeodymiumMagnetic), 'C', OP.wireGt08.dat(MT.AnnealedCopper));
        aMat = MT.DATA.Electric_T[5];   aRegistry.add("Electric Dynamo ("                         +VN[5]+")", "Dynamos"                             , 10115, 10111, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,13654, NBT_OUTPUT, 8192, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_ENERGY_EMITTED, TD.Energy.EU), "TGT", "CMC", "TId", 'M', OP.casingMachineDouble.dat(aMat), 'T', OP.screw.dat(aMat), 'G', OP.gearGt.dat(aMat), 'I', OP.stickLong.dat(MT.NeodymiumMagnetic), 'C', OP.wireGt16.dat(MT.AnnealedCopper));

        aClass = MultiTileEntityDynamoFlux.class;
        aMat = MT.DATA.Flux_T[1];       aRegistry.add("Flux Dynamo ("                   +aMat.getLocal()+")", "Dynamos"                             , 11111, 10111, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,   32, NBT_OUTPUT,   88, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_ENERGY_EMITTED, TD.Energy.RF), "SMS", "SGS", 'M', aRegistry.getItem(10111), 'G', OP.gearGt.dat(aMat), 'S', OP.stickLong.dat(aMat));
        aMat = MT.DATA.Flux_T[2];       aRegistry.add("Flux Dynamo ("                   +aMat.getLocal()+")", "Dynamos"                             , 11112, 10111, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,  128, NBT_OUTPUT,  352, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_ENERGY_EMITTED, TD.Energy.RF), "SMS", "SGS", 'M', aRegistry.getItem(10112), 'G', OP.gearGt.dat(aMat), 'S', OP.stickLong.dat(aMat));
        aMat = MT.DATA.Flux_T[3];       aRegistry.add("Flux Dynamo ("                   +aMat.getLocal()+")", "Dynamos"                             , 11113, 10111, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,  512, NBT_OUTPUT, 1408, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_ENERGY_EMITTED, TD.Energy.RF), "SMS", "SGS", 'M', aRegistry.getItem(10113), 'G', OP.gearGt.dat(aMat), 'S', OP.stickLong.dat(aMat));
        aMat = MT.DATA.Flux_T[4];       aRegistry.add("Flux Dynamo ("                   +aMat.getLocal()+")", "Dynamos"                             , 11114, 10111, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT, 2048, NBT_OUTPUT, 5632, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_ENERGY_EMITTED, TD.Energy.RF), "SMS", "SGS", 'M', aRegistry.getItem(10114), 'G', OP.gearGt.dat(aMat), 'S', OP.stickLong.dat(aMat));
        aMat = MT.DATA.Flux_T[5];       aRegistry.add("Flux Dynamo ("                   +aMat.getLocal()+")", "Dynamos"                             , 11115, 10111, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT, 8192, NBT_OUTPUT,22528, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_ENERGY_EMITTED, TD.Energy.RF), "SMS", "SGS", 'M', aRegistry.getItem(10115), 'G', OP.gearGt.dat(aMat), 'S', OP.stickLong.dat(aMat));


        // Quantum Energizers
        aClass = MultiTileEntityQuantumEnergizerLaser.class;
        aMat = MT.Osmiridium;           aRegistry.add("Quantum Energizer (T1)"                              , "Quantum Energizers"                  , 10121, 10121, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  16.0F, NBT_RESISTANCE,  16.0F, NBT_INPUT,   32, NBT_OUTPUT,   16, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.LU, NBT_ENERGY_EMITTED, TD.Energy.QU), "CFC", "SME", "CFC", 'M', OP.casingMachine.dat(aMat), 'F', IL.FIELD_GENERATORS[1], 'S', IL.SENSORS[1], 'E', IL.EMITTERS[1], 'C', IL.Processor_Crystal_Sapphire);
        aMat = MT.Osmiridium;           aRegistry.add("Quantum Energizer (T2)"                              , "Quantum Energizers"                  , 10122, 10121, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  16.0F, NBT_RESISTANCE,  16.0F, NBT_INPUT,  128, NBT_OUTPUT,   64, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.LU, NBT_ENERGY_EMITTED, TD.Energy.QU), "CFC", "SME", "CFC", 'M', OP.casingMachine.dat(aMat), 'F', IL.FIELD_GENERATORS[2], 'S', IL.SENSORS[2], 'E', IL.EMITTERS[2], 'C', IL.Processor_Crystal_Sapphire);
        aMat = MT.Osmiridium;           aRegistry.add("Quantum Energizer (T3)"                              , "Quantum Energizers"                  , 10123, 10121, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  16.0F, NBT_RESISTANCE,  16.0F, NBT_INPUT,  512, NBT_OUTPUT,  256, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.LU, NBT_ENERGY_EMITTED, TD.Energy.QU), "CFC", "SME", "CFC", 'M', OP.casingMachine.dat(aMat), 'F', IL.FIELD_GENERATORS[3], 'S', IL.SENSORS[3], 'E', IL.EMITTERS[3], 'C', IL.Processor_Crystal_Sapphire);
        aMat = MT.Osmiridium;           aRegistry.add("Quantum Energizer (T4)"                              , "Quantum Energizers"                  , 10124, 10121, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  16.0F, NBT_RESISTANCE,  16.0F, NBT_INPUT, 2048, NBT_OUTPUT, 1024, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.LU, NBT_ENERGY_EMITTED, TD.Energy.QU), "CFC", "SME", "CFC", 'M', OP.casingMachine.dat(aMat), 'F', IL.FIELD_GENERATORS[4], 'S', IL.SENSORS[4], 'E', IL.EMITTERS[4], 'C', IL.Processor_Crystal_Sapphire);
        aMat = MT.Osmiridium;           aRegistry.add("Quantum Energizer (T5)"                              , "Quantum Energizers"                  , 10125, 10121, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  16.0F, NBT_RESISTANCE,  16.0F, NBT_INPUT, 8192, NBT_OUTPUT, 4096, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.LU, NBT_ENERGY_EMITTED, TD.Energy.QU), "CFC", "SME", "CFC", 'M', OP.casingMachine.dat(aMat), 'F', IL.FIELD_GENERATORS[5], 'S', IL.SENSORS[5], 'E', IL.EMITTERS[5], 'C', IL.Processor_Crystal_Sapphire);

        // Crystal Chargers
        for (int i = 0; i < 10; i++) {
            aRegistry.add("Crystal Charger (T"      +i+")", "Crystal Chargers", 10130+i, 10131, MultiTileEntityCrystalCharger.class, MT.DATA.Electric_T[i].mToolQuality, 16, aMachine, UT.NBT.make(NBT_MATERIAL, MT.DATA.Electric_T[i], NBT_HARDNESS, 4.0F, NBT_RESISTANCE, 4.0F, NBT_INPUT, V[i], NBT_OUTPUT, V[i], NBT_ENERGY_EMITTED, TD.Energy.LU, NBT_INV_SIZE,  4), "FCF", "FCF", "PMP", 'C', OD_CIRCUITS[i], 'P', IL.Processor_Crystal_Emerald, 'F', IL.FIELD_GENERATORS[i], 'M', OP.casingMachine.dat(MT.DATA.Electric_T[i]));
            aRegistry.add("Large Crystal Charger (T"+i+")", "Crystal Chargers", 10140+i, 10131, MultiTileEntityCrystalChargerLarge.class, MT.DATA.Electric_T[i].mToolQuality, 16, aMachine, UT.NBT.make(NBT_MATERIAL, MT.DATA.Electric_T[i], NBT_HARDNESS, 4.0F, NBT_RESISTANCE, 4.0F, NBT_INPUT, V[i], NBT_OUTPUT, V[i], NBT_ENERGY_EMITTED, TD.Energy.LU, NBT_INV_SIZE, 16), "FCF", "FCF", "PMP", 'C', OD_CIRCUITS[i], 'P', IL.Processor_Crystal_Emerald, 'F', IL.FIELD_GENERATORS[i], 'M', aRegistry.getItem(10130+i));
        }

        // Laser Absorbers
        aClass = MultiTileEntityLaserAbsorberElectric.class;
        aMat = MT.DATA.Electric_T[1];   aRegistry.add("Laser Absorber ("                          +VN[1]+")", "Laser Absorbers"                     , 10151, 10151, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,   32, NBT_OUTPUT,   16, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.LU, NBT_ENERGY_EMITTED, TD.Energy.EU), "SCW", "SMP", "SCW", 'M', OP.casingMachine.dat(aMat), 'S', OP.plateGem.dat(ANY.Si), 'W', MT.DATA.CABLES_01[1], 'C', OD_CIRCUITS[2], 'P', IL.Processor_Crystal_Sapphire);
        aMat = MT.DATA.Electric_T[2];   aRegistry.add("Laser Absorber ("                          +VN[2]+")", "Laser Absorbers"                     , 10152, 10151, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,  128, NBT_OUTPUT,   64, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.LU, NBT_ENERGY_EMITTED, TD.Energy.EU), "SCW", "SMP", "SCW", 'M', OP.casingMachine.dat(aMat), 'S', OP.plateGem.dat(ANY.Si), 'W', MT.DATA.CABLES_01[2], 'C', OD_CIRCUITS[3], 'P', IL.Processor_Crystal_Sapphire);
        aMat = MT.DATA.Electric_T[3];   aRegistry.add("Laser Absorber ("                          +VN[3]+")", "Laser Absorbers"                     , 10153, 10151, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,  512, NBT_OUTPUT,  256, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.LU, NBT_ENERGY_EMITTED, TD.Energy.EU), "SCW", "SMP", "SCW", 'M', OP.casingMachine.dat(aMat), 'S', OP.plateGem.dat(ANY.Si), 'W', MT.DATA.CABLES_01[3], 'C', OD_CIRCUITS[4], 'P', IL.Processor_Crystal_Sapphire);
        aMat = MT.DATA.Electric_T[4];   aRegistry.add("Laser Absorber ("                          +VN[4]+")", "Laser Absorbers"                     , 10154, 10151, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT, 2048, NBT_OUTPUT, 1024, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.LU, NBT_ENERGY_EMITTED, TD.Energy.EU), "SCW", "SMP", "SCW", 'M', OP.casingMachine.dat(aMat), 'S', OP.plateGem.dat(ANY.Si), 'W', MT.DATA.CABLES_01[4], 'C', OD_CIRCUITS[5], 'P', IL.Processor_Crystal_Sapphire);
        aMat = MT.DATA.Electric_T[5];   aRegistry.add("Laser Absorber ("                          +VN[5]+")", "Laser Absorbers"                     , 10155, 10151, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT, 8192, NBT_OUTPUT, 4096, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.LU, NBT_ENERGY_EMITTED, TD.Energy.EU), "SCW", "SMP", "SCW", 'M', OP.casingMachine.dat(aMat), 'S', OP.plateGem.dat(ANY.Si), 'W', MT.DATA.CABLES_01[5], 'C', OD_CIRCUITS[6], 'P', IL.Processor_Crystal_Sapphire);


        // Coolers
        aClass = MultiTileEntityCoolerElectric.class;
        aMat = MT.DATA.Electric_T[1];   aRegistry.add("Thermoelectric Cooler ("                   +VN[1]+")", "Coolers"                             , 10161, 10161, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,   32, NBT_OUTPUT,    8, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.CU, NBT_ENERGY_EMITTED_2, TD.Energy.HU), "WPw", "CMC", "xPW", 'M', OP.casingMachine.dat(aMat), 'W', MT.DATA.CABLES_01[1], 'P', OP.plate           .dat(MT.Si), 'C', OP.plate          .dat(ANY.Cu));
        aMat = MT.DATA.Electric_T[2];   aRegistry.add("Thermoelectric Cooler ("                   +VN[2]+")", "Coolers"                             , 10162, 10161, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,  128, NBT_OUTPUT,   32, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.CU, NBT_ENERGY_EMITTED_2, TD.Energy.HU), "WPw", "CMC", "xPW", 'M', OP.casingMachine.dat(aMat), 'W', MT.DATA.CABLES_01[2], 'P', OP.plateDouble     .dat(MT.Si), 'C', OP.plateDouble    .dat(ANY.Cu));
        aMat = MT.DATA.Electric_T[3];   aRegistry.add("Thermoelectric Cooler ("                   +VN[3]+")", "Coolers"                             , 10163, 10161, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,  512, NBT_OUTPUT,  128, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.CU, NBT_ENERGY_EMITTED_2, TD.Energy.HU), "WPw", "CMC", "xPW", 'M', OP.casingMachine.dat(aMat), 'W', MT.DATA.CABLES_01[3], 'P', OP.plateTriple     .dat(MT.Si), 'C', OP.plateTriple    .dat(ANY.Cu));
        aMat = MT.DATA.Electric_T[4];   aRegistry.add("Thermoelectric Cooler ("                   +VN[4]+")", "Coolers"                             , 10164, 10161, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT, 2048, NBT_OUTPUT,  512, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.CU, NBT_ENERGY_EMITTED_2, TD.Energy.HU), "WPw", "CMC", "xPW", 'M', OP.casingMachine.dat(aMat), 'W', MT.DATA.CABLES_01[4], 'P', OP.plateQuadruple  .dat(MT.Si), 'C', OP.plateQuadruple .dat(ANY.Cu));
        aMat = MT.DATA.Electric_T[5];   aRegistry.add("Thermoelectric Cooler ("                   +VN[5]+")", "Coolers"                             , 10165, 10161, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT, 8192, NBT_OUTPUT, 2048, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.CU, NBT_ENERGY_EMITTED_2, TD.Energy.HU), "WPw", "CMC", "xPW", 'M', OP.casingMachine.dat(aMat), 'W', MT.DATA.CABLES_01[5], 'P', OP.plateQuintuple  .dat(MT.Si), 'C', OP.plateQuintuple .dat(ANY.Cu));

        aClass = MultiTileEntityCoolerFlux.class;
        aMat = MT.DATA.Flux_T[1];       aRegistry.add("Thermofluxic Cooler ("           +aMat.getLocal()+")", "Coolers"                             , 11161, 10161, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,  128, NBT_OUTPUT,    8, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.CU, NBT_ENERGY_EMITTED_2, TD.Energy.HU), "PSP", "PMP", "PSP", 'M', aRegistry.getItem(10161), 'P', OP.plate.dat(aMat), 'S', OP.stickLong.dat(aMat));
        aMat = MT.DATA.Flux_T[2];       aRegistry.add("Thermofluxic Cooler ("           +aMat.getLocal()+")", "Coolers"                             , 11162, 10161, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,  512, NBT_OUTPUT,   32, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.CU, NBT_ENERGY_EMITTED_2, TD.Energy.HU), "PSP", "PMP", "PSP", 'M', aRegistry.getItem(10162), 'P', OP.plate.dat(aMat), 'S', OP.stickLong.dat(aMat));
        aMat = MT.DATA.Flux_T[3];       aRegistry.add("Thermofluxic Cooler ("           +aMat.getLocal()+")", "Coolers"                             , 11163, 10161, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT, 2048, NBT_OUTPUT,  128, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.CU, NBT_ENERGY_EMITTED_2, TD.Energy.HU), "PSP", "PMP", "PSP", 'M', aRegistry.getItem(10163), 'P', OP.plate.dat(aMat), 'S', OP.stickLong.dat(aMat));
        aMat = MT.DATA.Flux_T[4];       aRegistry.add("Thermofluxic Cooler ("           +aMat.getLocal()+")", "Coolers"                             , 11164, 10161, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT, 8192, NBT_OUTPUT,  512, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.CU, NBT_ENERGY_EMITTED_2, TD.Energy.HU), "PSP", "PMP", "PSP", 'M', aRegistry.getItem(10164), 'P', OP.plate.dat(aMat), 'S', OP.stickLong.dat(aMat));
        aMat = MT.DATA.Flux_T[5];       aRegistry.add("Thermofluxic Cooler ("           +aMat.getLocal()+")", "Coolers"                             , 11165, 10161, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,32768, NBT_OUTPUT, 2048, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.CU, NBT_ENERGY_EMITTED_2, TD.Energy.HU), "PSP", "PMP", "PSP", 'M', aRegistry.getItem(10165), 'P', OP.plate.dat(aMat), 'S', OP.stickLong.dat(aMat));


        // ZPM Dechargers
        aMat = MT.Osmiridium;           aRegistry.add("ZPM Decharger (Quantum)"                             , "ZPM"                                 , 11170, 14999, MultiTileEntityZPMDechargerQU.class, aMat.mToolQuality, 16, aMachine, UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS, 4.0F, NBT_RESISTANCE, 50.0F, NBT_INPUT, V[7], NBT_OUTPUT, V[7], NBT_ENERGY_ACCEPTED, TD.Energy.QU, NBT_ENERGY_EMITTED, TD.Energy.QU, NBT_INV_SIZE, 1), "PCP", "CMC", "FCF", 'C', OD_CIRCUITS[6], 'P', IL.Processor_Crystal_Ruby    , 'F', IL.FIELD_GENERATORS[6], 'M', OP.casingMachineDense.dat(aMat));
        aMat = MT.Osmiridium;           aRegistry.add("ZPM Decharger (Electric)"                            , "ZPM"                                 , 11171, 14999, MultiTileEntityZPMDechargerEU.class, aMat.mToolQuality, 16, aMachine, UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS, 4.0F, NBT_RESISTANCE, 50.0F, NBT_INPUT, V[7], NBT_OUTPUT, V[7], NBT_ENERGY_ACCEPTED, TD.Energy.QU, NBT_ENERGY_EMITTED, TD.Energy.EU, NBT_INV_SIZE, 1), "PCP", "CMC", "FCF", 'C', OD_CIRCUITS[6], 'P', IL.Processor_Crystal_Sapphire, 'F', IL.FIELD_GENERATORS[6], 'M', OP.casingMachineDense.dat(aMat));



        // Batteries
        IL.Battery_Lead_Acid_ULV        .set(aRegistry.add("Lead-Acid Battery ("+VN[0]+")"                  , "Batteries"                           , 14000, 14013, MultiTileEntityBatteryEU8.class, 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, DYES_INT[DYE_INDEX_Orange]                     , NBT_INPUT, V[0], NBT_CAPACITY, V[0] *   2000, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "Wx" , "B " , "P " , 'P', OP.plate.dat(MT.BatteryAlloy), 'B', IL.Battery_Lead_Acid_Cell_Filled, 'W', MT.DATA.CABLES_01[0]), null, "gt:re-battery0");
        IL.Battery_Lead_Acid_LV         .set(aRegistry.add("Lead-Acid Battery ("                  +VN[1]+")", "Batteries"                           , 14001, 14013, MultiTileEntityBatteryEU32.class, 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, DYES_INT[DYE_INDEX_Orange]                     , NBT_INPUT, V[1], NBT_CAPACITY, V[1] *   2000, NBT_ENERGY_ACCEPTED, TD.Energy.EU), " Wx", "PBP", " B ", 'P', OP.plate.dat(MT.BatteryAlloy), 'B', IL.Battery_Lead_Acid_Cell_Filled, 'W', MT.DATA.CABLES_01[1]), null, "gt:re-battery1");
        IL.Battery_Lead_Acid_MV         .set(aRegistry.add("Lead-Acid Battery ("                  +VN[2]+")", "Batteries"                           , 14002, 14013, MultiTileEntityBatteryEU128.class, 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, DYES_INT[DYE_INDEX_Orange]                     , NBT_INPUT, V[2], NBT_CAPACITY, V[2] *   2000, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "WxW", "BCB", "PBP", 'P', OP.plate.dat(MT.BatteryAlloy), 'B', IL.Battery_Lead_Acid_Cell_Filled, 'W', MT.DATA.CABLES_01[2], 'C', OD_CIRCUITS[2]), null, "gt:re-battery2");
        IL.Battery_Lead_Acid_HV         .set(aRegistry.add("Lead-Acid Battery ("                  +VN[3]+")", "Batteries"                           , 14003, 14013, MultiTileEntityBatteryEU512.class, 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, DYES_INT[DYE_INDEX_Orange]                     , NBT_INPUT, V[3], NBT_CAPACITY, V[3] *   2000, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "WxW", "BCB", "BPB", 'P', OP.plate.dat(MT.BatteryAlloy), 'B', IL.Battery_Lead_Acid_Cell_Filled, 'W', MT.DATA.CABLES_01[3], 'C', OD_CIRCUITS[3]), null, "gt:re-battery3");
        IL.Battery_Lead_Acid_EV         .set(aRegistry.add("Lead-Acid Battery ("                  +VN[4]+")", "Batteries"                           , 14004, 14013, MultiTileEntityBatteryEU2048.class, 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, DYES_INT[DYE_INDEX_Orange]                     , NBT_INPUT, V[4], NBT_CAPACITY, V[4] *   2000, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "WPW", "BCB", "BBB", 'P', OP.plate.dat(MT.BatteryAlloy), 'B', IL.Battery_Lead_Acid_Cell_Filled, 'W', MT.DATA.CABLES_01[4], 'C', OD_CIRCUITS[4]), null, "gt:re-battery4");

        IL.Battery_SU_LV_SulfuricAcid.set(IL.Battery_Lead_Acid_LV.get(1));
        IL.Battery_SU_MV_SulfuricAcid.set(IL.Battery_Lead_Acid_MV.get(1));
        IL.Battery_SU_HV_SulfuricAcid.set(IL.Battery_Lead_Acid_HV.get(1));

        // Just to populate those Fields with something for Compat with outdated Addons.
        IL.Battery_RE_LV_Redstone.set(IL.Battery_Lead_Acid_LV.get(1));
        IL.Battery_RE_MV_Redstone.set(IL.Battery_Lead_Acid_MV.get(1));
        IL.Battery_RE_HV_Redstone.set(IL.Battery_Lead_Acid_HV.get(1));
        IL.Battery_RE_LV_Nikolite.set(IL.Battery_Lead_Acid_LV.get(1));
        IL.Battery_RE_MV_Nikolite.set(IL.Battery_Lead_Acid_MV.get(1));
        IL.Battery_RE_HV_Nikolite.set(IL.Battery_Lead_Acid_HV.get(1));
        IL.Battery_RE_LV_Teslatite.set(IL.Battery_Lead_Acid_LV.get(1));
        IL.Battery_RE_MV_Teslatite.set(IL.Battery_Lead_Acid_MV.get(1));
        IL.Battery_RE_HV_Teslatite.set(IL.Battery_Lead_Acid_HV.get(1));
        IL.Battery_RE_LV_Electrotine.set(IL.Battery_Lead_Acid_LV.get(1));
        IL.Battery_RE_MV_Electrotine.set(IL.Battery_Lead_Acid_MV.get(1));
        IL.Battery_RE_HV_Electrotine.set(IL.Battery_Lead_Acid_HV.get(1));

        IL.Battery_Alkaline_ULV         .set(aRegistry.add("Alkaline Battery ("+VN[0]+")"                   , "Batteries"                           , 14010, 14013, MultiTileEntityBatteryEU8   .class      , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, DYES_INT[DYE_INDEX_Blue]                       , NBT_INPUT, V[0], NBT_CAPACITY, V[0] *   4000, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "Wx" , "B " , "P " , 'P', OP.plate.dat(MT.BatteryAlloy), 'B', IL.Battery_Alkaline_Cell_Filled, 'W', MT.DATA.CABLES_01[0]), null, "gt:re-battery0");
        IL.Battery_Alkaline_LV          .set(aRegistry.add("Alkaline Battery ("                   +VN[1]+")", "Batteries"                           , 14011, 14013, MultiTileEntityBatteryEU32  .class      , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, DYES_INT[DYE_INDEX_Blue]                       , NBT_INPUT, V[1], NBT_CAPACITY, V[1] *   4000, NBT_ENERGY_ACCEPTED, TD.Energy.EU), " Wx", "PBP", " B ", 'P', OP.plate.dat(MT.BatteryAlloy), 'B', IL.Battery_Alkaline_Cell_Filled, 'W', MT.DATA.CABLES_01[1]), null, "gt:re-battery1");
        IL.Battery_Alkaline_MV          .set(aRegistry.add("Alkaline Battery ("                   +VN[2]+")", "Batteries"                           , 14012, 14013, MultiTileEntityBatteryEU128 .class      , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, DYES_INT[DYE_INDEX_Blue]                       , NBT_INPUT, V[2], NBT_CAPACITY, V[2] *   4000, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "WxW", "BCB", "PBP", 'P', OP.plate.dat(MT.BatteryAlloy), 'B', IL.Battery_Alkaline_Cell_Filled, 'W', MT.DATA.CABLES_01[2], 'C', OD_CIRCUITS[2]), null, "gt:re-battery2");
        IL.Battery_Alkaline_HV          .set(aRegistry.add("Alkaline Battery ("                   +VN[3]+")", "Batteries"                           , 14013, 14013, MultiTileEntityBatteryEU512 .class      , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, DYES_INT[DYE_INDEX_Blue]                       , NBT_INPUT, V[3], NBT_CAPACITY, V[3] *   4000, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "WxW", "BCB", "BPB", 'P', OP.plate.dat(MT.BatteryAlloy), 'B', IL.Battery_Alkaline_Cell_Filled, 'W', MT.DATA.CABLES_01[3], 'C', OD_CIRCUITS[3]), null, "gt:re-battery3");
        IL.Battery_Alkaline_EV          .set(aRegistry.add("Alkaline Battery ("                   +VN[4]+")", "Batteries"                           , 14014, 14013, MultiTileEntityBatteryEU2048.class      , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, DYES_INT[DYE_INDEX_Blue]                       , NBT_INPUT, V[4], NBT_CAPACITY, V[4] *   4000, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "WPW", "BCB", "BBB", 'P', OP.plate.dat(MT.BatteryAlloy), 'B', IL.Battery_Alkaline_Cell_Filled, 'W', MT.DATA.CABLES_01[4], 'C', OD_CIRCUITS[4]), null, "gt:re-battery4");

        // Just to populate those Fields with something for Compat with outdated Addons.
        IL.Battery_SU_LV_Mercury.set(IL.Battery_Alkaline_LV.get(1));
        IL.Battery_SU_MV_Mercury.set(IL.Battery_Alkaline_MV.get(1));
        IL.Battery_SU_HV_Mercury.set(IL.Battery_Alkaline_HV.get(1));

        IL.Battery_NiCd_ULV             .set(aRegistry.add("Nickel-Cadmium Battery ("+VN[0]+")"             , "Batteries"                           , 14020, 14013, MultiTileEntityBatteryEU8   .class      , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, DYES_INT[DYE_INDEX_Lime]                       , NBT_INPUT, V[0], NBT_CAPACITY, V[0] *   4000, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "Wx" , "B " , "P " , 'P', OP.plate.dat(MT.BatteryAlloy), 'B', IL.Battery_NiCd_Cell_Filled, 'W', MT.DATA.CABLES_01[0]), null, "gt:re-battery0");
        IL.Battery_NiCd_LV              .set(aRegistry.add("Nickel-Cadmium Battery ("             +VN[1]+")", "Batteries"                           , 14021, 14013, MultiTileEntityBatteryEU32  .class      , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, DYES_INT[DYE_INDEX_Lime]                       , NBT_INPUT, V[1], NBT_CAPACITY, V[1] *   4000, NBT_ENERGY_ACCEPTED, TD.Energy.EU), " Wx", "PBP", " B ", 'P', OP.plate.dat(MT.BatteryAlloy), 'B', IL.Battery_NiCd_Cell_Filled, 'W', MT.DATA.CABLES_01[1]), null, "gt:re-battery1");
        IL.Battery_NiCd_MV              .set(aRegistry.add("Nickel-Cadmium Battery ("             +VN[2]+")", "Batteries"                           , 14022, 14013, MultiTileEntityBatteryEU128 .class      , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, DYES_INT[DYE_INDEX_Lime]                       , NBT_INPUT, V[2], NBT_CAPACITY, V[2] *   4000, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "WxW", "BCB", "PBP", 'P', OP.plate.dat(MT.BatteryAlloy), 'B', IL.Battery_NiCd_Cell_Filled, 'W', MT.DATA.CABLES_01[2], 'C', OD_CIRCUITS[2]), null, "gt:re-battery2");
        IL.Battery_NiCd_HV              .set(aRegistry.add("Nickel-Cadmium Battery ("             +VN[3]+")", "Batteries"                           , 14023, 14013, MultiTileEntityBatteryEU512 .class      , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, DYES_INT[DYE_INDEX_Lime]                       , NBT_INPUT, V[3], NBT_CAPACITY, V[3] *   4000, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "WxW", "BCB", "BPB", 'P', OP.plate.dat(MT.BatteryAlloy), 'B', IL.Battery_NiCd_Cell_Filled, 'W', MT.DATA.CABLES_01[3], 'C', OD_CIRCUITS[3]), null, "gt:re-battery3");
        IL.Battery_NiCd_EV              .set(aRegistry.add("Nickel-Cadmium Battery ("             +VN[4]+")", "Batteries"                           , 14024, 14013, MultiTileEntityBatteryEU2048.class      , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, DYES_INT[DYE_INDEX_Lime]                       , NBT_INPUT, V[4], NBT_CAPACITY, V[4] *   4000, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "WPW", "BCB", "BBB", 'P', OP.plate.dat(MT.BatteryAlloy), 'B', IL.Battery_NiCd_Cell_Filled, 'W', MT.DATA.CABLES_01[4], 'C', OD_CIRCUITS[4]), null, "gt:re-battery4");

        IL.Battery_RE_LV_Cadmium.set(IL.Battery_NiCd_LV.get(1));
        IL.Battery_RE_MV_Cadmium.set(IL.Battery_NiCd_MV.get(1));
        IL.Battery_RE_HV_Cadmium.set(IL.Battery_NiCd_HV.get(1));

        IL.Battery_LiCoO2_ULV           .set(aRegistry.add("Lithium-Cobalt Battery ("+VN[0]+")"             , "Batteries"                           , 14030, 14013, MultiTileEntityBatteryAdvEU8   .class   , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, DYES_INT[DYE_INDEX_Blue]                       , NBT_INPUT, V[0], NBT_CAPACITY, V[0] *  64000, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "Wx" , "BC" , "P " , 'P', OP.plate.dat(MT.BatteryAlloy), 'B', IL.Battery_LiCoO2_Cell_Filled, 'W', MT.DATA.CABLES_01[0], 'C', OD_CIRCUITS[2]), null, "gt:re-battery0");
        IL.Battery_LiCoO2_LV            .set(aRegistry.add("Lithium-Cobalt Battery ("             +VN[1]+")", "Batteries"                           , 14031, 14013, MultiTileEntityBatteryAdvEU32  .class   , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, DYES_INT[DYE_INDEX_Blue]                       , NBT_INPUT, V[1], NBT_CAPACITY, V[1] *  64000, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "CWx", "PBP", " B ", 'P', OP.plate.dat(MT.BatteryAlloy), 'B', IL.Battery_LiCoO2_Cell_Filled, 'W', MT.DATA.CABLES_01[1], 'C', OD_CIRCUITS[3]), null, "gt:re-battery1");
        IL.Battery_LiCoO2_MV            .set(aRegistry.add("Lithium-Cobalt Battery ("             +VN[2]+")", "Batteries"                           , 14032, 14013, MultiTileEntityBatteryAdvEU128 .class   , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, DYES_INT[DYE_INDEX_Blue]                       , NBT_INPUT, V[2], NBT_CAPACITY, V[2] *  64000, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "WxW", "BCB", "PBP", 'P', OP.plate.dat(MT.BatteryAlloy), 'B', IL.Battery_LiCoO2_Cell_Filled, 'W', MT.DATA.CABLES_01[2], 'C', OD_CIRCUITS[4]), null, "gt:re-battery2");
        IL.Battery_LiCoO2_HV            .set(aRegistry.add("Lithium-Cobalt Battery ("             +VN[3]+")", "Batteries"                           , 14033, 14013, MultiTileEntityBatteryAdvEU512 .class   , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, DYES_INT[DYE_INDEX_Blue]                       , NBT_INPUT, V[3], NBT_CAPACITY, V[3] *  64000, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "WxW", "BCB", "BPB", 'P', OP.plate.dat(MT.BatteryAlloy), 'B', IL.Battery_LiCoO2_Cell_Filled, 'W', MT.DATA.CABLES_01[3], 'C', OD_CIRCUITS[5]), null, "gt:re-battery3");
        IL.Battery_LiCoO2_EV            .set(aRegistry.add("Lithium-Cobalt Battery ("             +VN[4]+")", "Batteries"                           , 14034, 14013, MultiTileEntityBatteryAdvEU2048.class   , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, DYES_INT[DYE_INDEX_Blue]                       , NBT_INPUT, V[4], NBT_CAPACITY, V[4] *  64000, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "WPW", "BCB", "BBB", 'P', OP.plate.dat(MT.BatteryAlloy), 'B', IL.Battery_LiCoO2_Cell_Filled, 'W', MT.DATA.CABLES_01[4], 'C', OD_CIRCUITS[6]), null, "gt:re-battery4");

        IL.Battery_RE_LV_Lithium.set(IL.Battery_LiCoO2_LV.get(1));
        IL.Battery_RE_MV_Lithium.set(IL.Battery_LiCoO2_MV.get(1));
        IL.Battery_RE_HV_Lithium.set(IL.Battery_LiCoO2_HV.get(1));

        IL.Battery_LiMn_ULV             .set(aRegistry.add("Lithium-Manganese Battery ("+VN[0]+")"          , "Batteries"                           , 14040, 14013, MultiTileEntityBatteryAdvEU8   .class   , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, DYES_INT[DYE_INDEX_Green]                      , NBT_INPUT, V[0], NBT_CAPACITY, V[0] * 128000, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "Wx" , "BC" , "P " , 'P', OP.plate.dat(MT.BatteryAlloy), 'B', IL.Battery_LiMn_Cell_Filled, 'W', MT.DATA.CABLES_01[0], 'C', OD_CIRCUITS[2]), null, "gt:re-battery0");
        IL.Battery_LiMn_LV              .set(aRegistry.add("Lithium-Manganese Battery ("          +VN[1]+")", "Batteries"                           , 14041, 14013, MultiTileEntityBatteryAdvEU32  .class   , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, DYES_INT[DYE_INDEX_Green]                      , NBT_INPUT, V[1], NBT_CAPACITY, V[1] * 128000, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "CWx", "PBP", " B ", 'P', OP.plate.dat(MT.BatteryAlloy), 'B', IL.Battery_LiMn_Cell_Filled, 'W', MT.DATA.CABLES_01[1], 'C', OD_CIRCUITS[3]), null, "gt:re-battery1");
        IL.Battery_LiMn_MV              .set(aRegistry.add("Lithium-Manganese Battery ("          +VN[2]+")", "Batteries"                           , 14042, 14013, MultiTileEntityBatteryAdvEU128 .class   , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, DYES_INT[DYE_INDEX_Green]                      , NBT_INPUT, V[2], NBT_CAPACITY, V[2] * 128000, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "WxW", "BCB", "PBP", 'P', OP.plate.dat(MT.BatteryAlloy), 'B', IL.Battery_LiMn_Cell_Filled, 'W', MT.DATA.CABLES_01[2], 'C', OD_CIRCUITS[4]), null, "gt:re-battery2");
        IL.Battery_LiMn_HV              .set(aRegistry.add("Lithium-Manganese Battery ("          +VN[3]+")", "Batteries"                           , 14043, 14013, MultiTileEntityBatteryAdvEU512 .class   , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, DYES_INT[DYE_INDEX_Green]                      , NBT_INPUT, V[3], NBT_CAPACITY, V[3] * 128000, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "WxW", "BCB", "BPB", 'P', OP.plate.dat(MT.BatteryAlloy), 'B', IL.Battery_LiMn_Cell_Filled, 'W', MT.DATA.CABLES_01[3], 'C', OD_CIRCUITS[5]), null, "gt:re-battery3");
        IL.Battery_LiMn_EV              .set(aRegistry.add("Lithium-Manganese Battery ("          +VN[4]+")", "Batteries"                           , 14044, 14013, MultiTileEntityBatteryAdvEU2048.class   , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, DYES_INT[DYE_INDEX_Green]                      , NBT_INPUT, V[4], NBT_CAPACITY, V[4] * 128000, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "WPW", "BCB", "BBB", 'P', OP.plate.dat(MT.BatteryAlloy), 'B', IL.Battery_LiMn_Cell_Filled, 'W', MT.DATA.CABLES_01[4], 'C', OD_CIRCUITS[6]), null, "gt:re-battery4");

        // Just to populate those Fields with something for Compat with outdated Addons.
        IL.Battery_RE_LV_Sodium.set(IL.Battery_LiMn_LV.get(1));
        IL.Battery_RE_MV_Sodium.set(IL.Battery_LiMn_MV.get(1));
        IL.Battery_RE_HV_Sodium.set(IL.Battery_LiMn_HV.get(1));

        CR.shaped(IL.Tool_Scanner       .get(1), CR.DEF_REV, "EXR", "CPU", "BXB", 'B', IL.Battery_Alkaline_HV, 'X', OP.plate.dat(MT.Cr), 'U', OD_USB_STICKS[3], 'C', OD_USB_CABLES[3], 'E', IL.EMITTERS[4], 'R', IL.SENSORS[4], 'P', IL.Processor_Crystal_Sapphire);
        CR.shaped(IL.Tool_Cropnalyzer   .get(1), CR.DEF_REV, "EXR", "CPU", "BXB", 'B', IL.Battery_Alkaline_MV, 'X', OP.plate.dat(MT.Al), 'U', OD_USB_STICKS[1], 'C', OD_USB_CABLES[1], 'E', IL.EMITTERS[2], 'R', IL.SENSORS[2], 'P', OD_CIRCUITS[6]);

        IL.Crystal_Energium_Red_ULV     .set(aRegistry.add("Red Energium Crystal (T0)"                      , "Batteries"                           , 14500, 14013, MultiTileEntityBatteryLU8.class      , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, UT.Code.getRGBInt(MT.EnergiumRed.fRGBaSolid)   , NBT_INPUT, V[0], NBT_CAPACITY, V[0] * 400000, NBT_ENERGY_ACCEPTED, TD.Energy.LU)), null, "gt:re-crystal0");
        IL.Crystal_Energium_Red_LV      .set(aRegistry.add("Red Energium Crystal (T1)"                      , "Batteries"                           , 14501, 14013, MultiTileEntityBatteryLU32.class      , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, UT.Code.getRGBInt(MT.EnergiumRed.fRGBaSolid)   , NBT_INPUT, V[1], NBT_CAPACITY, V[1] * 400000, NBT_ENERGY_ACCEPTED, TD.Energy.LU)), null, "gt:re-crystal1");
        IL.Crystal_Energium_Red_MV      .set(aRegistry.add("Red Energium Crystal (T2)"                      , "Batteries"                           , 14502, 14013, MultiTileEntityBatteryLU128.class      , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, UT.Code.getRGBInt(MT.EnergiumRed.fRGBaSolid)   , NBT_INPUT, V[2], NBT_CAPACITY, V[2] * 400000, NBT_ENERGY_ACCEPTED, TD.Energy.LU)), null, "gt:re-crystal2");
        IL.Crystal_Energium_Red_HV      .set(aRegistry.add("Red Energium Crystal (T3)"                      , "Batteries"                           , 14503, 14013, MultiTileEntityBatteryLU512.class      , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, UT.Code.getRGBInt(MT.EnergiumRed.fRGBaSolid)   , NBT_INPUT, V[3], NBT_CAPACITY, V[3] * 400000, NBT_ENERGY_ACCEPTED, TD.Energy.LU)), null, "gt:re-crystal3");
        IL.Crystal_Energium_Red_EV      .set(aRegistry.add("Red Energium Crystal (T4)"                      , "Batteries"                           , 14504, 14013, MultiTileEntityBatteryLU2048.class      , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, UT.Code.getRGBInt(MT.EnergiumRed.fRGBaSolid)   , NBT_INPUT, V[4], NBT_CAPACITY, V[4] * 400000, NBT_ENERGY_ACCEPTED, TD.Energy.LU)), null, "gt:re-crystal4");
        IL.Crystal_Energium_Red_IV      .set(aRegistry.add("Red Energium Crystal (T5)"                      , "Batteries"                           , 14505, 14013, MultiTileEntityBatteryLU8192.class      , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, UT.Code.getRGBInt(MT.EnergiumRed.fRGBaSolid)   , NBT_INPUT, V[5], NBT_CAPACITY, V[5] * 400000, NBT_ENERGY_ACCEPTED, TD.Energy.LU)), null, "gt:re-crystal5");

        IL.EnergyCrystal_RE_LV_Energium.set(IL.Crystal_Energium_Red_LV.get(1));
        IL.EnergyCrystal_RE_MV_Energium.set(IL.Crystal_Energium_Red_MV.get(1));
        IL.EnergyCrystal_RE_HV_Energium.set(IL.Crystal_Energium_Red_HV.get(1));
        IL.EnergyCrystal_RE_EV_Energium.set(IL.Crystal_Energium_Red_EV.get(1));
        IL.EnergyCrystal_RE_IV_Energium.set(IL.Crystal_Energium_Red_IV.get(1));

        IL.Crystal_Energium_Cyan_ULV    .set(aRegistry.add("Cyan Energium Crystal (T0)"                     , "Batteries"                           , 14510, 14013, MultiTileEntityBatteryLU8   .class      , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, UT.Code.getRGBInt(MT.EnergiumCyan.fRGBaSolid)  , NBT_INPUT, V[0], NBT_CAPACITY, V[0] * 800000, NBT_ENERGY_ACCEPTED, TD.Energy.LU)), null, "gt:re-crystal0");
        IL.Crystal_Energium_Cyan_LV     .set(aRegistry.add("Cyan Energium Crystal (T1)"                     , "Batteries"                           , 14511, 14013, MultiTileEntityBatteryLU32  .class      , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, UT.Code.getRGBInt(MT.EnergiumCyan.fRGBaSolid)  , NBT_INPUT, V[1], NBT_CAPACITY, V[1] * 800000, NBT_ENERGY_ACCEPTED, TD.Energy.LU)), null, "gt:re-crystal1");
        IL.Crystal_Energium_Cyan_MV     .set(aRegistry.add("Cyan Energium Crystal (T2)"                     , "Batteries"                           , 14512, 14013, MultiTileEntityBatteryLU128 .class      , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, UT.Code.getRGBInt(MT.EnergiumCyan.fRGBaSolid)  , NBT_INPUT, V[2], NBT_CAPACITY, V[2] * 800000, NBT_ENERGY_ACCEPTED, TD.Energy.LU)), null, "gt:re-crystal2");
        IL.Crystal_Energium_Cyan_HV     .set(aRegistry.add("Cyan Energium Crystal (T3)"                     , "Batteries"                           , 14513, 14013, MultiTileEntityBatteryLU512 .class      , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, UT.Code.getRGBInt(MT.EnergiumCyan.fRGBaSolid)  , NBT_INPUT, V[3], NBT_CAPACITY, V[3] * 800000, NBT_ENERGY_ACCEPTED, TD.Energy.LU)), null, "gt:re-crystal3");
        IL.Crystal_Energium_Cyan_EV     .set(aRegistry.add("Cyan Energium Crystal (T4)"                     , "Batteries"                           , 14514, 14013, MultiTileEntityBatteryLU2048.class      , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, UT.Code.getRGBInt(MT.EnergiumCyan.fRGBaSolid)  , NBT_INPUT, V[4], NBT_CAPACITY, V[4] * 800000, NBT_ENERGY_ACCEPTED, TD.Energy.LU)), null, "gt:re-crystal4");
        IL.Crystal_Energium_Cyan_IV     .set(aRegistry.add("Cyan Energium Crystal (T5)"                     , "Batteries"                           , 14515, 14013, MultiTileEntityBatteryLU8192.class      , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, UT.Code.getRGBInt(MT.EnergiumCyan.fRGBaSolid)  , NBT_INPUT, V[5], NBT_CAPACITY, V[5] * 800000, NBT_ENERGY_ACCEPTED, TD.Energy.LU)), null, "gt:re-crystal5");

        OreDictManager.INSTANCE.setTarget(OP.gemChipped     , MT.EnergiumRed, IL.Crystal_Energium_Red_ULV.get(1));
        OreDictManager.INSTANCE.setTarget(OP.gemFlawed      , MT.EnergiumRed, IL.Crystal_Energium_Red_LV.get(1));
        OreDictManager.INSTANCE.setTarget(OP.gem            , MT.EnergiumRed, IL.Crystal_Energium_Red_MV.get(1));
        OreDictManager.INSTANCE.setTarget(OP.gemFlawless    , MT.EnergiumRed, IL.Crystal_Energium_Red_HV.get(1));
        OreDictManager.INSTANCE.setTarget(OP.gemExquisite   , MT.EnergiumRed, IL.Crystal_Energium_Red_EV.get(1));
        OreDictManager.INSTANCE.setTarget(OP.gemLegendary   , MT.EnergiumRed, IL.Crystal_Energium_Red_IV.get(1));

        OreDictManager.INSTANCE.setTarget(OP.gemChipped     , MT.EnergiumCyan, IL.Crystal_Energium_Cyan_ULV.get(1));
        OreDictManager.INSTANCE.setTarget(OP.gemFlawed      , MT.EnergiumCyan, IL.Crystal_Energium_Cyan_LV.get(1));
        OreDictManager.INSTANCE.setTarget(OP.gem            , MT.EnergiumCyan, IL.Crystal_Energium_Cyan_MV.get(1));
        OreDictManager.INSTANCE.setTarget(OP.gemFlawless    , MT.EnergiumCyan, IL.Crystal_Energium_Cyan_HV.get(1));
        OreDictManager.INSTANCE.setTarget(OP.gemExquisite   , MT.EnergiumCyan, IL.Crystal_Energium_Cyan_EV.get(1));
        OreDictManager.INSTANCE.setTarget(OP.gemLegendary   , MT.EnergiumCyan, IL.Crystal_Energium_Cyan_IV.get(1));


        IL.Power_Cell_Empty             .set(aRegistry.add("Power Cell (Empty)"                             , "Portable Power Cells"                , 14700, 14700, MultiTileEntityPowerCell       .class, 0, 16, aUtilMetal, UT.NBT.make(NBT_HARDNESS, 0.5F, NBT_RESISTANCE, 1.0F, NBT_ENERGY_ACCEPTED, TD.Energy.EU                                                                                                                                                   ), "ACA", "FPF", "ACA", 'C', OD_CIRCUITS[4], 'P', OP.foil.dat(MT.Pt), 'F', OP.foil.dat(MT.Plastic), 'A', OP.casingSmall.dat(MT.Al)));
        IL.Power_Cell_H                 .set(aRegistry.add("Power Cell (Hydrogen)"                          , "Portable Power Cells"                , 14701, 14700, MultiTileEntityPowerCell       .class, 0, 16, aUtilMetal, UT.NBT.make(NBT_HARDNESS, 0.5F, NBT_RESISTANCE, 1.0F, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_COLOR_BOTTOM, UT.Code.getRGBInt(MT.H  .fRGBaGas), NBT_INPUT_MIN, 1, NBT_INPUT, V[3], NBT_INPUT_MAX, V   [3], NBT_CAPACITY,         3_200_000L))); RM.Canner.addRecipe1(F, 16, 256, IL.Power_Cell_Empty       .get(1), MT.H   .gas(U*200, T), NF, aRegistry.getItem(UT.NBT.make(NBT_ACTIVE_ENERGY, T))); RM.Canner.addRecipe1(F, 16, 256, aRegistry.getItem(), NF, NF, IL.Power_Cell_Empty.get(1));


        IL.Aneutronic_Fusion_Empty      .set(aRegistry.add("Aneutronic Fusion Power Cell (Empty)"           , "Portable Power Cells"                , 14600, 14700, MultiTileEntityAneutronicFusion.class, 0, 16, aUtilMetal, UT.NBT.make(NBT_HARDNESS, 0.5F, NBT_RESISTANCE, 1.0F, NBT_ENERGY_ACCEPTED, TD.Energy.EU                                                                                                                                                   ), "VPV", "GFG", "VGV", 'P', IL.Processor_Crystal_Ruby, 'V', OP.plateGemTiny.dat(MT.Vb), 'F', IL.FIELD_GENERATORS[5], 'G', OP.foil.dat(MT.Graphene)));
        IL.Aneutronic_Fusion_He3        .set(aRegistry.add("Aneutronic Fusion Power Cell (Helium-3)"        , "Portable Power Cells"                , 14601, 14700, MultiTileEntityAneutronicFusion.class, 0, 16, aUtilMetal, UT.NBT.make(NBT_HARDNESS, 0.5F, NBT_RESISTANCE, 1.0F, NBT_ENERGY_ACCEPTED, TD.Energy.EU                                                      , NBT_INPUT_MIN, 1, NBT_INPUT, V[5], NBT_INPUT_MAX, V   [5], NBT_CAPACITY,     1_024_000_000L))); RM.Canner.addRecipe1(F, 16, 256, IL.Aneutronic_Fusion_Empty.get(1), MT.He_3.gas(U*200, T), NF, aRegistry.getItem(UT.NBT.make(NBT_ACTIVE_ENERGY, T))); RM.Canner.addRecipe1(F, 16, 256, aRegistry.getItem(), NF, NF, IL.Aneutronic_Fusion_Empty.get(1));


        IL.ZPM                          .set(aRegistry.add("Zero-Point-Module (ZPM)"                        , "ZPM"                                 , 14999, 14999, MultiTileEntityZPM             .class, 0, 16, aUtilMetal, UT.NBT.make(NBT_HARDNESS, 0.5F, NBT_RESISTANCE, 1.0F, NBT_ENERGY_ACCEPTED, TD.Energy.QU, NBT_COLOR,                           0xffdd00, NBT_INPUT_MIN, 1, NBT_INPUT, V[7], NBT_INPUT_MAX, VMAX[7], NBT_CAPACITY, 2_000_000_000_000L)), null, "gt:zpm"); if (COMPAT_TC != null) COMPAT_TC.registerThaumcraftAspectsToItem(aRegistry.getItem(), F, TC.stack(TC.ALIENIS, 10), TC.stack(TC.MACHINA, 10), TC.stack(TC.VACUOS, 10), TC.stack(TC.POTENTIA, 10), TC.stack(TC.LUX, 10), TC.stack(TC.LUCRUM, 10));


        // Auto-Tools
        aClass = MultiTileEntityAutoToolHammer.class;
        aMat = MT.DATA.Kinetic_T[1];    aRegistry.add("Automatic Hammer ("              +aMat.getLocal()+")", "Automatic Tools"                     , 15001, 15002, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   7.0F, NBT_RESISTANCE,   7.0F, NBT_INPUT,    8, NBT_QUALITY, 1, NBT_ENERGY_ACCEPTED, TD.Energy.KU), "wR", "MS", "hH", 'M', OP.casingMachineDouble.dat(aMat), 'H', OP.toolHeadHammer.dat(aMat), 'R', OP.stickLong.dat(aMat), 'S', OP.spring.dat(aMat));
        aMat = MT.DATA.Kinetic_T[2];    aRegistry.add("Automatic Hammer ("              +aMat.getLocal()+")", "Automatic Tools"                     , 15002, 15002, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_INPUT,   32, NBT_QUALITY, 2, NBT_ENERGY_ACCEPTED, TD.Energy.KU), "wR", "MS", "hH", 'M', OP.casingMachineDouble.dat(aMat), 'H', OP.toolHeadHammer.dat(aMat), 'R', OP.stickLong.dat(aMat), 'S', OP.spring.dat(aMat));
        aMat = MT.DATA.Kinetic_T[3];    aRegistry.add("Automatic Hammer ("              +aMat.getLocal()+")", "Automatic Tools"                     , 15003, 15002, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   9.0F, NBT_RESISTANCE,   9.0F, NBT_INPUT,  128, NBT_QUALITY, 3, NBT_ENERGY_ACCEPTED, TD.Energy.KU), "wR", "MS", "hH", 'M', OP.casingMachineDouble.dat(aMat), 'H', OP.toolHeadHammer.dat(aMat), 'R', OP.stickLong.dat(aMat), 'S', OP.spring.dat(aMat));
        aMat = MT.DATA.Kinetic_T[4];    aRegistry.add("Automatic Hammer ("              +aMat.getLocal()+")", "Automatic Tools"                     , 15004, 15002, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  12.5F, NBT_RESISTANCE,  12.5F, NBT_INPUT,  512, NBT_QUALITY, 4, NBT_ENERGY_ACCEPTED, TD.Energy.KU), "wR", "MS", "hH", 'M', OP.casingMachineDouble.dat(aMat), 'H', OP.toolHeadHammer.dat(aMat), 'R', OP.stickLong.dat(aMat), 'S', OP.spring.dat(aMat));

        aClass = MultiTileEntityAutoToolIgniter.class;
        aMat = MT.DATA.Electric_T[0];   aRegistry.add("Automatic Igniter ("+VN[0]+")"                       , "Automatic Tools"                     , 15010, 15002, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,    8, NBT_QUALITY, 0, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "BwB", "CMC", 'M', OP.casingMachine.dat(aMat), 'B', OP.bolt.dat(ANY.Steel), 'C', MT.DATA.CABLES_01[0]);
        aMat = MT.DATA.Electric_T[1];   aRegistry.add("Automatic Igniter ("                       +VN[1]+")", "Automatic Tools"                     , 15011, 15002, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,   32, NBT_QUALITY, 1, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "BwB", "CMC", 'M', OP.casingMachine.dat(aMat), 'B', OP.bolt.dat(ANY.Steel), 'C', MT.DATA.CABLES_01[1]);
        aMat = MT.DATA.Electric_T[2];   aRegistry.add("Automatic Igniter ("                       +VN[2]+")", "Automatic Tools"                     , 15012, 15002, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,  128, NBT_QUALITY, 2, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "BwB", "CMC", 'M', OP.casingMachine.dat(aMat), 'B', OP.bolt.dat(ANY.Steel), 'C', MT.DATA.CABLES_01[2]);
        aMat = MT.DATA.Electric_T[3];   aRegistry.add("Automatic Igniter ("                       +VN[3]+")", "Automatic Tools"                     , 15013, 15002, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,  512, NBT_QUALITY, 3, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "BwB", "CMC", 'M', OP.casingMachine.dat(aMat), 'B', OP.bolt.dat(ANY.Steel), 'C', MT.DATA.CABLES_01[3]);
        aMat = MT.DATA.Electric_T[4];   aRegistry.add("Automatic Igniter ("                       +VN[4]+")", "Automatic Tools"                     , 15014, 15002, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT, 2048, NBT_QUALITY, 4, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "BwB", "CMC", 'M', OP.casingMachine.dat(aMat), 'B', OP.bolt.dat(ANY.Steel), 'C', MT.DATA.CABLES_01[4]);
        aMat = MT.DATA.Electric_T[5];   aRegistry.add("Automatic Igniter ("                       +VN[5]+")", "Automatic Tools"                     , 15015, 15002, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT, 8192, NBT_QUALITY, 5, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "BwB", "CMC", 'M', OP.casingMachine.dat(aMat), 'B', OP.bolt.dat(ANY.Steel), 'C', MT.DATA.CABLES_01[5]);



        // Pumps
        aClass = MultiTileEntityPump.class;
        aMat = MT.DATA.Kinetic_T[1];    aRegistry.add("Rotational Pump ("               +aMat.getLocal()+")", "Pumps"                               , 16001, 16002, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   7.0F, NBT_RESISTANCE,   7.0F, NBT_INPUT,   32, NBT_ENERGY_ACCEPTED, TD.Energy.RU), "GwG", "PMP", "RPR", 'M', OP.casingMachineDouble.dat(aMat), 'G', OP.gearGt.dat(aMat), 'R', OP.rotor.dat(MT.StainlessSteel), 'P', OP.pipeSmall.dat(MT.StainlessSteel));
        aMat = MT.DATA.Kinetic_T[2];    aRegistry.add("Rotational Pump ("               +aMat.getLocal()+")", "Pumps"                               , 16002, 16002, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_INPUT,  128, NBT_ENERGY_ACCEPTED, TD.Energy.RU), "GwG", "PMP", "RPR", 'M', OP.casingMachineDouble.dat(aMat), 'G', OP.gearGt.dat(aMat), 'R', OP.rotor.dat(MT.StainlessSteel), 'P', OP.pipeMedium.dat(MT.StainlessSteel));
        aMat = MT.DATA.Kinetic_T[3];    aRegistry.add("Rotational Pump ("               +aMat.getLocal()+")", "Pumps"                               , 16003, 16002, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   9.0F, NBT_RESISTANCE,   9.0F, NBT_INPUT,  512, NBT_ENERGY_ACCEPTED, TD.Energy.RU), "GwG", "PMP", "RPR", 'M', OP.casingMachineDouble.dat(aMat), 'G', OP.gearGt.dat(aMat), 'R', OP.rotor.dat(MT.StainlessSteel), 'P', OP.pipeLarge.dat(MT.StainlessSteel));
        aMat = MT.DATA.Kinetic_T[4];    aRegistry.add("Rotational Pump ("               +aMat.getLocal()+")", "Pumps"                               , 16004, 16002, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  12.5F, NBT_RESISTANCE,  12.5F, NBT_INPUT, 2048, NBT_ENERGY_ACCEPTED, TD.Energy.RU), "GwG", "PMP", "RPR", 'M', OP.casingMachineDouble.dat(aMat), 'G', OP.gearGt.dat(aMat), 'R', OP.rotor.dat(MT.StainlessSteel), 'P', OP.pipeHuge.dat(MT.StainlessSteel));
    }

    protected static void multiblocks(MultiTileEntityRegistry aRegistry, MultiTileEntityBlock aMetal, MultiTileEntityBlock aMetalChips, MultiTileEntityBlock aMetalWires, MultiTileEntityBlock aMachine, MultiTileEntityBlock aWooden, MultiTileEntityBlock aBush, MultiTileEntityBlock aStone, MultiTileEntityBlock aWool, MultiTileEntityBlock aTNT, MultiTileEntityBlock aHive, MultiTileEntityBlock aUtilMetal, MultiTileEntityBlock aUtilStone, MultiTileEntityBlock aUtilWood, MultiTileEntityBlock aUtilWool, OreDictMaterial aMat, Class<? extends TileEntity> aClass) {
        aClass = MultiTileEntityMultiBlockPart.class;
        aMat = MT.Ceramic;              aRegistry.add("Fire Bricks"                                         , "Multiblock Machines", 18000, 17101, aClass                                   , aMat.mToolQuality, 64, aStone     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   5.0F, NBT_RESISTANCE,   5.0F, NBT_TEXTURE, "firebricks"              , NBT_DESIGNS, 0                        ), "CBC", "BWB", "CBC", 'B', OP.ingot.dat(MT.Brick), 'C', OP.dust.dat(ANY.Clay), 'W', OD.container1000water);
        aMat = MT.WoodTreated;          aRegistry.add("Wood Wall"                                           , "Multiblock Machines", 18001, 17101, aClass                                   , aMat.mToolQuality, 64, aWooden    , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   5.0F, NBT_RESISTANCE,   5.0F, NBT_TEXTURE, "woodwall"                , NBT_DESIGNS, 0, NBT_FLAMMABILITY,  150), "W W", "sPh", "W W", 'W', OP.plate.dat(aMat), 'P', OP.plate.dat(MT.Pb));
        // 18020
        // 18021

        aMat = MT.Pb;                   aRegistry.add("Lead Wall"                                           , "Multiblock Machines", 18011, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_TEXTURE, "metalwall"               , NBT_DESIGNS, 7), "wPP", "hPP"       , 'P', OP.plate.dat(aMat)); RM.Welder.addRecipe2(F, 16, 256, OP.plate.mat(aMat, 4), ST.tag(10), aRegistry.getItem());
        aMat = MT.Bronze;               aRegistry.add("Bronze Wall"                                         , "Multiblock Machines", 18010, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_TEXTURE, "metalwall"               , NBT_DESIGNS, 7), "wPP", "hPP"       , 'P', OP.plate.dat(aMat)); RM.Welder.addRecipe2(F, 16, 256, OP.plate.mat(aMat, 4), ST.tag(10), aRegistry.getItem());
        aMat = ANY.Steel;               aRegistry.add("Steel Wall"                                          , "Multiblock Machines", 18009, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_TEXTURE, "metalwall"               , NBT_DESIGNS, 7), "wPP", "hPP"       , 'P', OP.plate.dat(aMat)); RM.Welder.addRecipe2(F, 16, 256, OP.plate.mat(aMat, 4), ST.tag(10), aRegistry.getItem());
        aMat = MT.SteelGalvanized;      aRegistry.add("Galvanized Steel Wall"                               , "Multiblock Machines", 18008, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_TEXTURE, "metalwall"               , NBT_DESIGNS, 7), "wPP", "hPP"       , 'P', OP.plate.dat(aMat)); RM.Welder.addRecipe2(F, 16, 256, OP.plate.mat(aMat, 4), ST.tag(10), aRegistry.getItem());
        aMat = MT.StainlessSteel;       aRegistry.add("Stainless Steel Wall"                                , "Multiblock Machines", 18002, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_TEXTURE, "metalwall"               , NBT_DESIGNS, 7), "wPP", "hPP"       , 'P', OP.plate.dat(aMat)); RM.Welder.addRecipe2(F, 16, 256, OP.plate.mat(aMat, 4), ST.tag(10), aRegistry.getItem());
        aMat = MT.Invar;                aRegistry.add("Invar Wall"                                          , "Multiblock Machines", 18007, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_TEXTURE, "metalwall"               , NBT_DESIGNS, 7), "wPP", "hPP"       , 'P', OP.plate.dat(aMat)); RM.Welder.addRecipe2(F, 16, 256, OP.plate.mat(aMat, 4), ST.tag(10), aRegistry.getItem());
        aMat = MT.Ti;                   aRegistry.add("Titanium Wall"                                       , "Multiblock Machines", 18006, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   9.0F, NBT_RESISTANCE,   9.0F, NBT_TEXTURE, "metalwall"               , NBT_DESIGNS, 7), "wPP", "hPP"       , 'P', OP.plate.dat(aMat)); RM.Welder.addRecipe2(F, 16, 256, OP.plate.mat(aMat, 4), ST.tag(10), aRegistry.getItem());
        aMat = MT.TungstenSteel;        aRegistry.add("Tungstensteel Wall"                                  , "Multiblock Machines", 18003, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  12.5F, NBT_RESISTANCE,  12.5F, NBT_TEXTURE, "metalwall"               , NBT_DESIGNS, 7), "wPP", "hPP"       , 'P', OP.plate.dat(aMat)); RM.Welder.addRecipe2(F, 16, 256, OP.plate.mat(aMat, 4), ST.tag(10), aRegistry.getItem());
        aMat = ANY.W;                   aRegistry.add("Tungsten Wall"                                       , "Multiblock Machines", 18004, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_TEXTURE, "metalwall"               , NBT_DESIGNS, 7), "wPP", "hPP"       , 'P', OP.plate.dat(aMat)); RM.Welder.addRecipe2(F, 16, 256, OP.plate.mat(aMat, 4), ST.tag(10), aRegistry.getItem());
        aMat = MT.Ta4HfC5;              aRegistry.add("Tantalum Hafnium Carbide Wall"                       , "Multiblock Machines", 18012, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  12.5F, NBT_RESISTANCE,  12.5F, NBT_TEXTURE, "metalwall"               , NBT_DESIGNS, 7), "wPP", "hPP"       , 'P', OP.plate.dat(aMat)); RM.Welder.addRecipe2(F, 16, 256, OP.plate.mat(aMat, 4), ST.tag(10), aRegistry.getItem());
        aMat = MT.Ad;                   aRegistry.add("Adamantium Wall"                                     , "Multiblock Machines", 18005, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS, 100.0F, NBT_RESISTANCE, 100.0F, NBT_TEXTURE, "metalwall"               , NBT_DESIGNS, 7), "wPP", "hPP"       , 'P', OP.plate.dat(aMat)); RM.Welder.addRecipe2(F, 16, 256, OP.plate.mat(aMat, 4), ST.tag(10), aRegistry.getItem());

        aMat = MT.Pb;                   aRegistry.add("Dense Lead Wall"                                     , "Multiblock Machines", 18031, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_TEXTURE, "metalwalldense"          , NBT_DESIGNS, 7)); OM.data(aRegistry.getItem(), aMat, U*36); RM.Welder.addRecipe2(F, 64, 512, OP.plateDense.mat(aMat, 4), ST.tag(10), aRegistry.getItem());
        aMat = MT.Bronze;               aRegistry.add("Dense Bronze Wall"                                   , "Multiblock Machines", 18030, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_TEXTURE, "metalwalldense"          , NBT_DESIGNS, 7)); OM.data(aRegistry.getItem(), aMat, U*36); RM.Welder.addRecipe2(F, 64, 512, OP.plateDense.mat(aMat, 4), ST.tag(10), aRegistry.getItem());
        aMat = ANY.Steel;               aRegistry.add("Dense Steel Wall"                                    , "Multiblock Machines", 18029, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_TEXTURE, "metalwalldense"          , NBT_DESIGNS, 7)); OM.data(aRegistry.getItem(), aMat, U*36); RM.Welder.addRecipe2(F, 64, 512, OP.plateDense.mat(aMat, 4), ST.tag(10), aRegistry.getItem());
        aMat = MT.SteelGalvanized;      aRegistry.add("Dense Galvanized Steel Wall"                         , "Multiblock Machines", 18028, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_TEXTURE, "metalwalldense"          , NBT_DESIGNS, 7)); OM.data(aRegistry.getItem(), aMat, U*36); RM.Welder.addRecipe2(F, 64, 512, OP.plateDense.mat(aMat, 4), ST.tag(10), aRegistry.getItem());
        aMat = MT.StainlessSteel;       aRegistry.add("Dense Stainless Steel Wall"                          , "Multiblock Machines", 18022, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_TEXTURE, "metalwalldense"          , NBT_DESIGNS, 7)); OM.data(aRegistry.getItem(), aMat, U*36); RM.Welder.addRecipe2(F, 64, 512, OP.plateDense.mat(aMat, 4), ST.tag(10), aRegistry.getItem());
        aMat = MT.Invar;                aRegistry.add("Dense Invar Wall"                                    , "Multiblock Machines", 18027, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_TEXTURE, "metalwalldense"          , NBT_DESIGNS, 7)); OM.data(aRegistry.getItem(), aMat, U*36); RM.Welder.addRecipe2(F, 64, 512, OP.plateDense.mat(aMat, 4), ST.tag(10), aRegistry.getItem());
        aMat = MT.Ti;                   aRegistry.add("Dense Titanium Wall"                                 , "Multiblock Machines", 18026, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   9.0F, NBT_RESISTANCE,   9.0F, NBT_TEXTURE, "metalwalldense"          , NBT_DESIGNS, 7)); OM.data(aRegistry.getItem(), aMat, U*36); RM.Welder.addRecipe2(F, 64, 512, OP.plateDense.mat(aMat, 4), ST.tag(10), aRegistry.getItem());
        aMat = MT.TungstenSteel;        aRegistry.add("Dense Tungstensteel Wall"                            , "Multiblock Machines", 18023, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  12.5F, NBT_RESISTANCE,  12.5F, NBT_TEXTURE, "metalwalldense"          , NBT_DESIGNS, 7)); OM.data(aRegistry.getItem(), aMat, U*36); RM.Welder.addRecipe2(F, 64, 512, OP.plateDense.mat(aMat, 4), ST.tag(10), aRegistry.getItem());
        aMat = ANY.W;                   aRegistry.add("Dense Tungsten Wall"                                 , "Multiblock Machines", 18024, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_TEXTURE, "metalwalldense"          , NBT_DESIGNS, 7)); OM.data(aRegistry.getItem(), aMat, U*36); RM.Welder.addRecipe2(F, 64, 512, OP.plateDense.mat(aMat, 4), ST.tag(10), aRegistry.getItem());
        aMat = MT.Ta4HfC5;              aRegistry.add("Dense Tantalum Hafnium Carbide Wall"                 , "Multiblock Machines", 18032, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  12.5F, NBT_RESISTANCE,  12.5F, NBT_TEXTURE, "metalwalldense"          , NBT_DESIGNS, 7)); OM.data(aRegistry.getItem(), aMat, U*36); RM.Welder.addRecipe2(F, 64, 512, OP.plateDense.mat(aMat, 4), ST.tag(10), aRegistry.getItem());
        aMat = MT.Ad;                   aRegistry.add("Dense Adamantium Wall"                               , "Multiblock Machines", 18025, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS, 100.0F, NBT_RESISTANCE, 100.0F, NBT_TEXTURE, "metalwalldense"          , NBT_DESIGNS, 7)); OM.data(aRegistry.getItem(), aMat, U*36); RM.Welder.addRecipe2(F, 64, 512, OP.plateDense.mat(aMat, 4), ST.tag(10), aRegistry.getItem());

        aMat = MT.AnnealedCopper;       aRegistry.add("Large Copper Coil"                                   , "Multiblock Machines", 18040, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_TEXTURE, "coil"                    , NBT_DESIGNS, 1), "WWW", "WxW", "WWW", 'W', OP.wireGt04.dat(aMat));
        aMat = MT.NiobiumTitanium;      aRegistry.add("Large Niobium-Titanium Coil"                         , "Multiblock Machines", 18041, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_TEXTURE, "coil"                    , NBT_DESIGNS, 1), "WWW", "WxW", "WWW", 'W', OP.wireGt04.dat(aMat));
        aMat = MT.Nichrome;             aRegistry.add("Large Nichrome Coil"                                 , "Multiblock Machines", 18042, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_TEXTURE, "coil"                    , NBT_DESIGNS, 1), "WWW", "WxW", "WWW", 'W', OP.wireGt04.dat(aMat));
        aMat = MT.SiC;                  aRegistry.add("Large Carborundum Coil"                              , "Multiblock Machines", 18043, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_TEXTURE, "coil"                    , NBT_DESIGNS, 1), "WWW", "WxW", "WWW", 'W', OP.wireGt04.dat(aMat));
        aMat = MT.Os;                   aRegistry.add("Large Osmium Coil"                                   , "Multiblock Machines", 18044, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_TEXTURE, "coil"                    , NBT_DESIGNS, 1), "WWW", "WxW", "WWW", 'W', OP.wireGt04.dat(aMat));
        aMat = MT.Ir;                   aRegistry.add("Large Iridium Coil"                                  , "Multiblock Machines", 18045, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_TEXTURE, "coil"                    , NBT_DESIGNS, 1), "WWW", "WxW", "WWW", 'W', OP.wireGt04.dat(aMat));

        aMat = MT.TungstenSteel;        aRegistry.add("Centrifuge Part"                                     , "Multiblock Machines", 18100, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  12.5F, NBT_RESISTANCE,  12.5F, NBT_TEXTURE, "centrifugeparts"         , NBT_DESIGNS, 8), "TwT", "GMG", "TdT", 'M', OP.casingMachine.dat(aMat), 'G', OP.gearGt.dat(aMat), 'T', OP.screw.dat(aMat));
        aMat = MT.StainlessSteel;       aRegistry.add("Electrolyzer Part"                                   , "Multiblock Machines", 18105, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  12.5F, NBT_RESISTANCE,  12.5F, NBT_TEXTURE, "electrolyzerparts"       , NBT_DESIGNS, 7), "WwW", "WMW", "CCC", 'M', OP.casingMachine.dat(aMat), 'W', OP.wireGt01.dat(MT.Pt), 'C', OD_CIRCUITS[6]);
        aMat = MT.Invar;                aRegistry.add("Heat Transmitter"                                    , "Multiblock Machines", 18101, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_TEXTURE, "heatacceptor"            , NBT_DESIGNS, 0), "MPM", "hRw", "MPM", 'M', OP.plate.dat(aMat), 'P', OP.plateTriple.dat(ANY.Cu), 'R', OP.stickLong.dat(ANY.Cu));
        aMat = MT.StainlessSteel;       aRegistry.add("Distillation Tower Part"                             , "Multiblock Machines", 18102, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_TEXTURE, "distillationtowerparts"  , NBT_DESIGNS, 1), "TMT", "hPd", "TMT", 'M', OP.plate.dat(aMat), 'P', OP.pipeSmall.dat(aMat), 'T', OP.screw.dat(aMat));
        aMat = MT.TungstenSteel;        aRegistry.add("Bedrock Mining Drill Head"                           , "Multiblock Machines", 18103, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  12.5F, NBT_RESISTANCE,  12.5F, NBT_TEXTURE, "bedrockdrill"            , NBT_DESIGNS, 0), "DID", "GMG", "DID", 'M', OP.casingMachineDense.dat(aMat), 'G', OP.gearGt.dat(aMat), 'I', OP.toolHeadDrill.dat(aMat), 'D', OP.gem.dat(ANY.Diamond));
        aMat = MT.SteelGalvanized;      aRegistry.add("Lightning Rod"                                       , "Multiblock Machines", 18104, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   8.0F, NBT_RESISTANCE,   8.0F, NBT_TEXTURE, "lightningrod"            , NBT_DESIGNS, 0), "MWM", "WRW", "MWM", 'M', OP.plate.dat(aMat), 'R', OP.stick.dat(MT.Ir), 'W', OP.wireGt01.dat(MT.NiobiumTitanium));
        aMat = MT.Ti;                   aRegistry.add("Sluice Part"                                         , "Multiblock Machines", 18106, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   9.0F, NBT_RESISTANCE,   9.0F, NBT_TEXTURE, "sluiceparts"             , NBT_DESIGNS, 7), "GGG", "PMP", "PwP", 'M', OP.casingMachine.dat(aMat), 'G', OP.gearGt.dat(aMat), 'P', OP.pipeMedium.dat(aMat));
        aMat = MT.TungstenSteel;        aRegistry.add("Crusher Wheels"                                      , "Multiblock Machines", 18107, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   9.0F, NBT_RESISTANCE,   9.0F, NBT_TEXTURE, "crusherwheels"           , NBT_DESIGNS, 3), "DDD", "GDG", "GMG", 'M', OP.casingMachineDouble.dat(aMat), 'G', OP.gearGt.dat(aMat), 'D', OP.gem.dat(ANY.Diamond));
        aMat = MT.TungstenSteel;        aRegistry.add("Shredder Blades"                                     , "Multiblock Machines", 18108, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   9.0F, NBT_RESISTANCE,   9.0F, NBT_TEXTURE, "shredderblades"          , NBT_DESIGNS, 3), "DGD", "GwG", "GMG", 'M', OP.casingMachineDouble.dat(aMat), 'G', OP.gearGt.dat(aMat), 'D', OP.plateGem.dat(ANY.Diamond));

        aMat = MT.SteelGalvanized;      aRegistry.add("Ventilation Unit"                                    , "Multiblock Machines", 18299, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_TEXTURE, "ventilationunit"         , NBT_DESIGNS, 0), "FwF", "CMC", "EdE", 'M', OP.casingMachine.dat(aMat), 'C', OD_CIRCUITS[3], 'F', IL.Cover_Vent, 'E', IL.MOTORS[1]);
        aMat = MT.SteelGalvanized;      aRegistry.add("Versatile Quadcore Processor Unit"                   , "Multiblock Machines", 18200, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_TEXTURE, "processorversatile"      , NBT_DESIGNS, 0), "DCS", "CMC", "RCE", 'M', OP.casingMachine.dat(aMat), 'C', OD_CIRCUITS[6], 'S', IL.Processor_Crystal_Sapphire, 'D', IL.Processor_Crystal_Diamond, 'R', IL.Processor_Crystal_Ruby, 'E', IL.Processor_Crystal_Emerald);
        aMat = MT.SteelGalvanized;      aRegistry.add("Logic Quadcore Processor Unit"                       , "Multiblock Machines", 18201, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_TEXTURE, "processorlogic"          , NBT_DESIGNS, 0), "PCP", "CMC", "PCP", 'M', OP.casingMachine.dat(aMat), 'C', OD_CIRCUITS[6], 'P', IL.Processor_Crystal_Diamond );
        aMat = MT.SteelGalvanized;      aRegistry.add("Control Quadcore Processor Unit"                     , "Multiblock Machines", 18202, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_TEXTURE, "processorcontrol"        , NBT_DESIGNS, 0), "PCP", "CMC", "PCP", 'M', OP.casingMachine.dat(aMat), 'C', OD_CIRCUITS[6], 'P', IL.Processor_Crystal_Ruby    );
        aMat = MT.SteelGalvanized;      aRegistry.add("Storage Quadcore Processor Unit"                     , "Multiblock Machines", 18203, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_TEXTURE, "processorstorage"        , NBT_DESIGNS, 0), "PCP", "CMC", "PCP", 'M', OP.casingMachine.dat(aMat), 'C', OD_CIRCUITS[6], 'P', IL.Processor_Crystal_Emerald );
        aMat = MT.SteelGalvanized;      aRegistry.add("Conversion Quadcore Processor Unit"                  , "Multiblock Machines", 18204, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_TEXTURE, "processorconversion"     , NBT_DESIGNS, 0), "PCP", "CMC", "PCP", 'M', OP.casingMachine.dat(aMat), 'C', OD_CIRCUITS[6], 'P', IL.Processor_Crystal_Sapphire);



        aMat = MT.Ceramic;              aRegistry.add("Coke Oven"                                           , "Multiblock Machines", 17000, 17101, MultiTileEntityCokeOven.class            , aMat.mToolQuality, 16, aStone     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   5.0F, NBT_RESISTANCE,   5.0F, NBT_TEXTURE, "cokeoven"                , NBT_INPUT,    1, NBT_PARALLEL, 16, NBT_ENERGY_ACCEPTED, TD.Energy.TU, NBT_NO_CONSTANT_POWER, T, NBT_RECIPEMAP, RM.CokeOven, NBT_INV_SIDE_IN, SBIT_U, NBT_INV_SIDE_OUT, SBIT_D, NBT_TANK_SIDE_OUT, 61, NBT_TANK_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, 63, NBT_NEEDS_IGNITION, T), "hRT", "PMR", "dRT", 'M', aRegistry.getItem(18000), 'R', OP.stick.dat(ANY.Iron), 'P', OP.plate.dat(ANY.Iron), 'T', OP.screw.dat(ANY.Iron));

        aMat = MT.WoodTreated;          aRegistry.add("Wood Tank Main Valve"                                , "Multiblock Machines", 17001, 17101, MultiTileEntityTank3x3x3Wood.class       , aMat.mToolQuality, 16, aWooden    , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   5.0F, NBT_RESISTANCE,   5.0F, NBT_TEXTURE, "tankwood"                , NBT_TANK_CAPACITY,     432000, NBT_DESIGN, 18001, NBT_GASPROOF, F, NBT_ACIDPROOF, F, NBT_PLASMAPROOF, F, NBT_FLAMMABILITY,  150), " R ", "rMs", " R ", 'M', aRegistry.getItem(18001), 'R', OP.ring.dat(MT.Pb));
        aMat = MT.StainlessSteel;       aRegistry.add("Small Stainless Steel Tank Main Valve"               , "Multiblock Machines", 17002, 17101, MultiTileEntityTank3x3x3Metal.class      , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_TEXTURE, "tankmetal"               , NBT_TANK_CAPACITY,    1728000, NBT_DESIGN, 18002, NBT_GASPROOF, T, NBT_ACIDPROOF, T, NBT_PLASMAPROOF, F                        ), " R ", "hMs", " R ", 'M', aRegistry.getItem(18002), 'R', OP.ring.dat(aMat));
        aMat = MT.Invar;                aRegistry.add("Small Invar Tank Main Valve"                         , "Multiblock Machines", 17007, 17101, MultiTileEntityTank3x3x3Metal.class      , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_TEXTURE, "tankmetal"               , NBT_TANK_CAPACITY,    1728000, NBT_DESIGN, 18007, NBT_GASPROOF, T, NBT_ACIDPROOF, F, NBT_PLASMAPROOF, F                        ), " R ", "hMs", " R ", 'M', aRegistry.getItem(18007), 'R', OP.ring.dat(aMat));
        aMat = MT.Ti;                   aRegistry.add("Small Titanium Tank Main Valve"                      , "Multiblock Machines", 17006, 17101, MultiTileEntityTank3x3x3Metal.class      , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   9.0F, NBT_RESISTANCE,   9.0F, NBT_TEXTURE, "tankmetal"               , NBT_TANK_CAPACITY,    3456000, NBT_DESIGN, 18006, NBT_GASPROOF, T, NBT_ACIDPROOF, F, NBT_PLASMAPROOF, F                        ), " R ", "hMs", " R ", 'M', aRegistry.getItem(18006), 'R', OP.ring.dat(aMat));
        aMat = MT.TungstenSteel;        aRegistry.add("Small Tungstensteel Tank Main Valve"                 , "Multiblock Machines", 17003, 17101, MultiTileEntityTank3x3x3Metal.class      , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  12.5F, NBT_RESISTANCE,  12.5F, NBT_TEXTURE, "tankmetal"               , NBT_TANK_CAPACITY,    6912000, NBT_DESIGN, 18003, NBT_GASPROOF, T, NBT_ACIDPROOF, F, NBT_PLASMAPROOF, F                        ), " R ", "hMs", " R ", 'M', aRegistry.getItem(18003), 'R', OP.ring.dat(aMat));
        aMat = ANY.W;                   aRegistry.add("Small Tungsten Tank Main Valve"                      , "Multiblock Machines", 17004, 17101, MultiTileEntityTank3x3x3Metal.class      , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_TEXTURE, "tankmetal"               , NBT_TANK_CAPACITY,    6912000, NBT_DESIGN, 18004, NBT_GASPROOF, T, NBT_ACIDPROOF, T, NBT_PLASMAPROOF, F                        ), " R ", "hMs", " R ", 'M', aRegistry.getItem(18004), 'R', OP.ring.dat(aMat));
        aMat = MT.Ad;                   aRegistry.add("Small Adamantium Tank Main Valve"                    , "Multiblock Machines", 17005, 17101, MultiTileEntityTank3x3x3Metal.class      , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS, 100.0F, NBT_RESISTANCE, 100.0F, NBT_TEXTURE, "tankmetal"               , NBT_TANK_CAPACITY,  110592000, NBT_DESIGN, 18005, NBT_GASPROOF, T, NBT_ACIDPROOF, T, NBT_PLASMAPROOF, T                        ), " R ", "hMs", " R ", 'M', aRegistry.getItem(18005), 'R', OP.ring.dat(aMat));

        aMat = MT.StainlessSteel;       aRegistry.add("Small Dense Stainless Steel Tank Main Valve"         , "Multiblock Machines", 17022, 17101, MultiTileEntityTank3x3x3Metal.class      , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_TEXTURE, "tankmetal"               , NBT_TANK_CAPACITY,    6912000, NBT_DESIGN, 18022, NBT_GASPROOF, T, NBT_ACIDPROOF, T, NBT_PLASMAPROOF, F                        ), " R ", "hMs", " R ", 'M', aRegistry.getItem(18022), 'R', OP.ring.dat(aMat));
        aMat = MT.Invar;                aRegistry.add("Small Dense Invar Tank Main Valve"                   , "Multiblock Machines", 17027, 17101, MultiTileEntityTank3x3x3Metal.class      , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_TEXTURE, "tankmetal"               , NBT_TANK_CAPACITY,    6912000, NBT_DESIGN, 18027, NBT_GASPROOF, T, NBT_ACIDPROOF, F, NBT_PLASMAPROOF, F                        ), " R ", "hMs", " R ", 'M', aRegistry.getItem(18027), 'R', OP.ring.dat(aMat));
        aMat = MT.Ti;                   aRegistry.add("Small Dense Titanium Tank Main Valve"                , "Multiblock Machines", 17026, 17101, MultiTileEntityTank3x3x3Metal.class      , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   9.0F, NBT_RESISTANCE,   9.0F, NBT_TEXTURE, "tankmetal"               , NBT_TANK_CAPACITY,   13824000, NBT_DESIGN, 18026, NBT_GASPROOF, T, NBT_ACIDPROOF, F, NBT_PLASMAPROOF, F                        ), " R ", "hMs", " R ", 'M', aRegistry.getItem(18026), 'R', OP.ring.dat(aMat));
        aMat = MT.TungstenSteel;        aRegistry.add("Small Dense Tungstensteel Tank Main Valve"           , "Multiblock Machines", 17023, 17101, MultiTileEntityTank3x3x3Metal.class      , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  12.5F, NBT_RESISTANCE,  12.5F, NBT_TEXTURE, "tankmetal"               , NBT_TANK_CAPACITY,   27648000, NBT_DESIGN, 18023, NBT_GASPROOF, T, NBT_ACIDPROOF, F, NBT_PLASMAPROOF, F                        ), " R ", "hMs", " R ", 'M', aRegistry.getItem(18023), 'R', OP.ring.dat(aMat));
        aMat = ANY.W;                   aRegistry.add("Small Dense Tungsten Tank Main Valve"                , "Multiblock Machines", 17024, 17101, MultiTileEntityTank3x3x3Metal.class      , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_TEXTURE, "tankmetal"               , NBT_TANK_CAPACITY,   27648000, NBT_DESIGN, 18024, NBT_GASPROOF, T, NBT_ACIDPROOF, T, NBT_PLASMAPROOF, F                        ), " R ", "hMs", " R ", 'M', aRegistry.getItem(18024), 'R', OP.ring.dat(aMat));
        aMat = MT.Ad;                   aRegistry.add("Small Dense Adamantium Tank Main Valve"              , "Multiblock Machines", 17025, 17101, MultiTileEntityTank3x3x3Metal.class      , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS, 100.0F, NBT_RESISTANCE, 100.0F, NBT_TEXTURE, "tankmetal"               , NBT_TANK_CAPACITY,  442368000, NBT_DESIGN, 18025, NBT_GASPROOF, T, NBT_ACIDPROOF, T, NBT_PLASMAPROOF, T                        ), " R ", "hMs", " R ", 'M', aRegistry.getItem(18025), 'R', OP.ring.dat(aMat));

        aMat = MT.StainlessSteel;       aRegistry.add("Large Stainless Steel Tank Main Valve"               , "Multiblock Machines", 17042, 17101, MultiTileEntityTank5x5x5Metal.class      , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_TEXTURE, "tankmetal"               , NBT_TANK_CAPACITY,    8000000, NBT_DESIGN, 18002, NBT_GASPROOF, T, NBT_ACIDPROOF, T, NBT_PLASMAPROOF, F                        ), "PPP", "hMs", "PPP", 'M', aRegistry.getItem(17002), 'P', OP.plate.dat(aMat));
        aMat = MT.Invar;                aRegistry.add("Large Invar Tank Main Valve"                         , "Multiblock Machines", 17047, 17101, MultiTileEntityTank5x5x5Metal.class      , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_TEXTURE, "tankmetal"               , NBT_TANK_CAPACITY,    8000000, NBT_DESIGN, 18007, NBT_GASPROOF, T, NBT_ACIDPROOF, F, NBT_PLASMAPROOF, F                        ), "PPP", "hMs", "PPP", 'M', aRegistry.getItem(17007), 'P', OP.plate.dat(aMat));
        aMat = MT.Ti;                   aRegistry.add("Large Titanium Tank Main Valve"                      , "Multiblock Machines", 17046, 17101, MultiTileEntityTank5x5x5Metal.class      , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   9.0F, NBT_RESISTANCE,   9.0F, NBT_TEXTURE, "tankmetal"               , NBT_TANK_CAPACITY,   16000000, NBT_DESIGN, 18006, NBT_GASPROOF, T, NBT_ACIDPROOF, F, NBT_PLASMAPROOF, F                        ), "PPP", "hMs", "PPP", 'M', aRegistry.getItem(17006), 'P', OP.plate.dat(aMat));
        aMat = MT.TungstenSteel;        aRegistry.add("Large Tungstensteel Tank Main Valve"                 , "Multiblock Machines", 17043, 17101, MultiTileEntityTank5x5x5Metal.class      , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  12.5F, NBT_RESISTANCE,  12.5F, NBT_TEXTURE, "tankmetal"               , NBT_TANK_CAPACITY,   32000000, NBT_DESIGN, 18003, NBT_GASPROOF, T, NBT_ACIDPROOF, F, NBT_PLASMAPROOF, F                        ), "PPP", "hMs", "PPP", 'M', aRegistry.getItem(17003), 'P', OP.plate.dat(aMat));
        aMat = ANY.W;                   aRegistry.add("Large Tungsten Tank Main Valve"                      , "Multiblock Machines", 17044, 17101, MultiTileEntityTank5x5x5Metal.class      , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_TEXTURE, "tankmetal"               , NBT_TANK_CAPACITY,   32000000, NBT_DESIGN, 18004, NBT_GASPROOF, T, NBT_ACIDPROOF, T, NBT_PLASMAPROOF, F                        ), "PPP", "hMs", "PPP", 'M', aRegistry.getItem(17004), 'P', OP.plate.dat(aMat));
        aMat = MT.Ad;                   aRegistry.add("Large Adamantium Tank Main Valve"                    , "Multiblock Machines", 17045, 17101, MultiTileEntityTank5x5x5Metal.class      , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS, 100.0F, NBT_RESISTANCE, 100.0F, NBT_TEXTURE, "tankmetal"               , NBT_TANK_CAPACITY,  512000000, NBT_DESIGN, 18005, NBT_GASPROOF, T, NBT_ACIDPROOF, T, NBT_PLASMAPROOF, T                        ), "PPP", "hMs", "PPP", 'M', aRegistry.getItem(17005), 'P', OP.plate.dat(aMat));

        aMat = MT.StainlessSteel;       aRegistry.add("Large Dense Stainless Steel Tank Main Valve"         , "Multiblock Machines", 17062, 17101, MultiTileEntityTank5x5x5Metal.class      , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_TEXTURE, "tankmetal"               , NBT_TANK_CAPACITY,   32000000, NBT_DESIGN, 18022, NBT_GASPROOF, T, NBT_ACIDPROOF, T, NBT_PLASMAPROOF, F                        ), "PPP", "hMs", "PPP", 'M', aRegistry.getItem(17022), 'P', OP.plateDense.dat(aMat));
        aMat = MT.Invar;                aRegistry.add("Large Dense Invar Tank Main Valve"                   , "Multiblock Machines", 17067, 17101, MultiTileEntityTank5x5x5Metal.class      , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_TEXTURE, "tankmetal"               , NBT_TANK_CAPACITY,   32000000, NBT_DESIGN, 18027, NBT_GASPROOF, T, NBT_ACIDPROOF, F, NBT_PLASMAPROOF, F                        ), "PPP", "hMs", "PPP", 'M', aRegistry.getItem(17027), 'P', OP.plateDense.dat(aMat));
        aMat = MT.Ti;                   aRegistry.add("Large Dense Titanium Tank Main Valve"                , "Multiblock Machines", 17066, 17101, MultiTileEntityTank5x5x5Metal.class      , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   9.0F, NBT_RESISTANCE,   9.0F, NBT_TEXTURE, "tankmetal"               , NBT_TANK_CAPACITY,   64000000, NBT_DESIGN, 18026, NBT_GASPROOF, T, NBT_ACIDPROOF, F, NBT_PLASMAPROOF, F                        ), "PPP", "hMs", "PPP", 'M', aRegistry.getItem(17026), 'P', OP.plateDense.dat(aMat));
        aMat = MT.TungstenSteel;        aRegistry.add("Large Dense Tungstensteel Tank Main Valve"           , "Multiblock Machines", 17063, 17101, MultiTileEntityTank5x5x5Metal.class      , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  12.5F, NBT_RESISTANCE,  12.5F, NBT_TEXTURE, "tankmetal"               , NBT_TANK_CAPACITY,  128000000, NBT_DESIGN, 18023, NBT_GASPROOF, T, NBT_ACIDPROOF, F, NBT_PLASMAPROOF, F                        ), "PPP", "hMs", "PPP", 'M', aRegistry.getItem(17023), 'P', OP.plateDense.dat(aMat));
        aMat = ANY.W;                   aRegistry.add("Large Dense Tungsten Tank Main Valve"                , "Multiblock Machines", 17064, 17101, MultiTileEntityTank5x5x5Metal.class      , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_TEXTURE, "tankmetal"               , NBT_TANK_CAPACITY,  128000000, NBT_DESIGN, 18024, NBT_GASPROOF, T, NBT_ACIDPROOF, T, NBT_PLASMAPROOF, F                        ), "PPP", "hMs", "PPP", 'M', aRegistry.getItem(17024), 'P', OP.plateDense.dat(aMat));
        aMat = MT.Ad;                   aRegistry.add("Large Dense Adamantium Tank Main Valve"              , "Multiblock Machines", 17065, 17101, MultiTileEntityTank5x5x5Metal.class      , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS, 100.0F, NBT_RESISTANCE, 100.0F, NBT_TEXTURE, "tankmetal"               , NBT_TANK_CAPACITY, 2048000000, NBT_DESIGN, 18025, NBT_GASPROOF, T, NBT_ACIDPROOF, T, NBT_PLASMAPROOF, T                        ), "PPP", "hMs", "PPP", 'M', aRegistry.getItem(17025), 'P', OP.plateDense.dat(aMat));


        // 常规大型机器
        aMat = MT.StainlessSteel;       aRegistry.add("Distillation Tower"                                  , "Multiblock Machines", 17101, 17101, MultiTileEntityDistillationTower_CH.class   , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_TEXTURE, "distillationtower"       , NBT_INPUT,  512, NBT_INPUT_MIN,    1, NBT_INPUT_MAX,     1024                       , NBT_ENERGY_ACCEPTED, TD.Energy.HU, NBT_RECIPEMAP, RM.DistillationTower    , NBT_INV_SIDE_AUTO_OUT, SIDE_BACK  , NBT_TANK_SIDE_AUTO_OUT, SIDE_BACK  , NBT_CHEAP_OVERCLOCKING, T                                                                       ), "PPP", "PMP", "PPP", 'M', aRegistry.getItem(18102), 'P', OP.pipeNonuple.dat(aMat));
        aMat = MT.StainlessSteel;       aRegistry.add("Cryo Distillation Tower"                             , "Multiblock Machines", 17111, 17101, MultiTileEntityCryoDistillationTower_CH.class,aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_TEXTURE, "cryodistillationtower"   , NBT_INPUT,  512, NBT_INPUT_MIN,    1, NBT_INPUT_MAX,     1024                       , NBT_ENERGY_ACCEPTED, TD.Energy.CU, NBT_RECIPEMAP, RM.CryoDistillationTower, NBT_INV_SIDE_AUTO_OUT, SIDE_BACK  , NBT_TANK_SIDE_AUTO_OUT, SIDE_BACK  , NBT_CHEAP_OVERCLOCKING, T                                                                       ), "PPP", "PMP", "PPP", 'M', aRegistry.getItem(18102), 'P', OP.pipeNonuple.dat(ANY.Cu));
        aMat = MT.TungstenSteel;        aRegistry.add("Implosion Compressor"                                , "Multiblock Machines", 17110, 17101, MultiTileEntityImplosionCompressor_CH.class , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  12.5F, NBT_RESISTANCE,  12.5F, NBT_TEXTURE, "implosioncompressor"     , NBT_INPUT,    1                                                                     , NBT_ENERGY_ACCEPTED, TD.Energy.TU, NBT_RECIPEMAP, RM.ImplosionCompressor  , NBT_INV_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_TANK_SIDE_AUTO_OUT, SIDE_BOTTOM                           , NBT_PARALLEL,  64                          , NBT_NO_CONSTANT_POWER, T), "CPC", "PAP", "RMR", 'M', aRegistry.getItem(18023), 'R', IL.Processor_Crystal_Ruby, 'C', OD_CIRCUITS[6], 'P', OP.plateDense.dat(aMat), 'A', IL.ROBOT_ARMS[2]);
        aMat = MT.TungstenSteel;        aRegistry.add("Large Centrifuge"                                    , "Multiblock Machines", 17100, 17101, MultiTileEntityCentrifuge_CH.class          , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  12.5F, NBT_RESISTANCE,  12.5F, NBT_TEXTURE, "largecentrifuge"         , NBT_INPUT,  512, NBT_INPUT_MIN,  512, NBT_INPUT_MAX,     4096, NBT_EFFICIENCY,  5000, NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_RECIPEMAP, RM.Centrifuge           , NBT_INV_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_TANK_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_CHEAP_OVERCLOCKING, F, NBT_PARALLEL,  64, NBT_PARALLEL_DURATION, F                          ), "CMC", "RCR"       , 'M', aRegistry.getItem(18100), 'R', IL.Processor_Crystal_Ruby, 'C', OD_CIRCUITS[6]);
        aMat = MT.StainlessSteel;       aRegistry.add("Large Electrolyzer"                                  , "Multiblock Machines", 17103, 17101, MultiTileEntityElectrolyzer_CH.class        , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_TEXTURE, "largeelectrolyzer"       , NBT_INPUT,  512, NBT_INPUT_MIN,  512, NBT_INPUT_MAX,     4096, NBT_EFFICIENCY,  5000, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, RM.Electrolyzer         , NBT_INV_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_TANK_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_CHEAP_OVERCLOCKING, F, NBT_PARALLEL,  64, NBT_PARALLEL_DURATION, F                          ), "CMC", "RCR"       , 'M', aRegistry.getItem(18105), 'R', IL.Processor_Crystal_Ruby, 'C', OD_CIRCUITS[6]);
        aMat = MT.StainlessSteel;       aRegistry.add("Large Coagulator Array"                              , "Multiblock Machines", 17105, 17101, MultiTileEntityCoagulator_CH.class          , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_TEXTURE, "largecoagulator"         , NBT_INPUT,    1                                                                     , NBT_ENERGY_ACCEPTED, TD.Energy.TU, NBT_RECIPEMAP, RM.Coagulator           , NBT_INV_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_TANK_SIDE_AUTO_OUT, SIDE_BOTTOM                           , NBT_PARALLEL,  64                          , NBT_NO_CONSTANT_POWER, T), "CRC", "PMP", "PPP", 'M', aRegistry.getItem(18002), 'R', IL.Processor_Crystal_Ruby, 'C', OD_CIRCUITS[6], 'P', OP.plateDense.dat(aMat));
        aMat = MT.StainlessSteel;       aRegistry.add("Large Autoclave"                                     , "Multiblock Machines", 17112, 17101, MultiTileEntityAutoclave_CH.class           , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_TEXTURE, "largeautoclave"          , NBT_INPUT,    1                                                                     , NBT_ENERGY_ACCEPTED, TD.Energy.TU, NBT_RECIPEMAP, RM.Autoclave            , NBT_INV_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_TANK_SIDE_AUTO_OUT, SIDE_BOTTOM                           , NBT_PARALLEL,  16                          , NBT_NO_CONSTANT_POWER, T, NBT_CANFILL_STEAM, T), "CRC", "PMP", "PPP", 'M', aRegistry.getItem(18022), 'R', IL.Processor_Crystal_Ruby, 'C', OD_CIRCUITS[6], 'P', OP.plateDense.dat(aMat));
        aMat = MT.StainlessSteel;       aRegistry.add("Large Bathing Vat"                                   , "Multiblock Machines", 17104, 17101, MultiTileEntityBath_CH.class                , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_TEXTURE, "largebath"               , NBT_INPUT,    1                                                                     , NBT_ENERGY_ACCEPTED, TD.Energy.TU, NBT_RECIPEMAP, RM.Bath                 , NBT_INV_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_TANK_SIDE_AUTO_OUT, SIDE_BOTTOM                           , NBT_PARALLEL,  64                          , NBT_NO_CONSTANT_POWER, T, NBT_CANFILL_STEAM, T), "CRC", "PMP", "APA", 'M', aRegistry.getItem(18002), 'R', IL.Processor_Crystal_Ruby, 'C', OD_CIRCUITS[6], 'P', OP.plateDense.dat(aMat), 'A', IL.ROBOT_ARMS[2]);
        aMat = MT.StainlessSteel;       aRegistry.add("Large Batch Mixer"                                   , "Multiblock Machines", 17102, 17101, MultiTileEntityMixer_CH.class               , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_TEXTURE, "largemixer"              , NBT_INPUT,  512, NBT_INPUT_MIN,  512, NBT_INPUT_MAX,     4096                       , NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_RECIPEMAP, RM.Mixer                , NBT_INV_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_TANK_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_CHEAP_OVERCLOCKING, F, NBT_PARALLEL, 256, NBT_PARALLEL_DURATION, F                          ), "PSP", "PSP", "RMC", 'M', aRegistry.getItem(18002), 'R', IL.Processor_Crystal_Ruby, 'C', OD_CIRCUITS[6], 'P', OP.plateDense.dat(aMat), 'S', OP.stickLong.dat(aMat));
        aMat = MT.StainlessSteel;       aRegistry.add("Large Fermenter"                                     , "Multiblock Machines", 17113, 17101, MultiTileEntityFermenter_CH.class           , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_TEXTURE, "largefermenter"          , NBT_INPUT,  512, NBT_INPUT_MIN,    1, NBT_INPUT_MAX,     4096                       , NBT_ENERGY_ACCEPTED, TD.Energy.HU, NBT_RECIPEMAP, RM.Fermenter            , NBT_INV_SIDE_AUTO_OUT, SIDE_BACK  , NBT_TANK_SIDE_AUTO_OUT, SIDE_BACK  , NBT_CHEAP_OVERCLOCKING, F, NBT_PARALLEL, 256, NBT_PARALLEL_DURATION, F                          ), "PPP", "CRC", "PMP", 'M', aRegistry.getItem(18002), 'R', IL.Processor_Crystal_Ruby, 'C', OD_CIRCUITS[6], 'P', OP.plateDense.dat(aMat));
        aMat = MT.Invar;                aRegistry.add("Large Electric Oven"                                 , "Multiblock Machines", 17106, 17101, MultiTileEntityOven_CH.class                , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_TEXTURE, "largeoven"               , NBT_INPUT,  512, NBT_INPUT_MIN,  512, NBT_INPUT_MAX,     4096, NBT_EFFICIENCY,  2500, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, RM.Furnace              , NBT_INV_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_TANK_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_CHEAP_OVERCLOCKING, F, NBT_PARALLEL, 256, NBT_PARALLEL_DURATION, F                          ), "PPP", "PwP", "RMC", 'M', aRegistry.getItem(18007), 'R', IL.Processor_Crystal_Ruby, 'C', OD_CIRCUITS[6], 'P', OP.plateDense.dat(aMat));
        aMat = MT.Ti;                   aRegistry.add("Large Sluice"                                        , "Multiblock Machines", 17107, 17101, MultiTileEntitySluice_CH.class              , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   9.0F, NBT_RESISTANCE,   9.0F, NBT_TEXTURE, "largesluice"             , NBT_INPUT,  512, NBT_INPUT_MIN,  512, NBT_INPUT_MAX,     4096, NBT_EFFICIENCY,  5000, NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_RECIPEMAP, RM.Sluice               , NBT_INV_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_TANK_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_CHEAP_OVERCLOCKING, F, NBT_PARALLEL,  64, NBT_PARALLEL_DURATION, F                          ), "GGG", "SwS", "RMC", 'M', aRegistry.getItem(18006), 'R', IL.Processor_Crystal_Ruby, 'C', OD_CIRCUITS[6], 'G', OP.gearGt.dat(aMat), 'S', OP.stick.dat(aMat));
        aMat = MT.TungstenSteel;        aRegistry.add("Large Crusher"                                       , "Multiblock Machines", 17108, 17101, MultiTileEntityCrusher_CH.class             , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  12.5F, NBT_RESISTANCE,  12.5F, NBT_TEXTURE, "largecrusher"            , NBT_INPUT,  512, NBT_INPUT_MIN,  512, NBT_INPUT_MAX,     4096, NBT_EFFICIENCY,  5000, NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_RECIPEMAP, RM.Crusher              , NBT_INV_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_TANK_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_CHEAP_OVERCLOCKING, F, NBT_PARALLEL,  64, NBT_PARALLEL_DURATION, F, NBT_NO_CONSTANT_POWER, T), "GSG", "SGS", "RMC", 'M', aRegistry.getItem(18003), 'R', IL.Processor_Crystal_Ruby, 'C', OD_CIRCUITS[6], 'G', OP.gearGt.dat(aMat), 'S', OP.gearGtSmall.dat(aMat));
        aMat = MT.TungstenSteel;        aRegistry.add("Large Shredder"                                      , "Multiblock Machines", 17109, 17101, MultiTileEntityShredder_CH.class            , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  12.5F, NBT_RESISTANCE,  12.5F, NBT_TEXTURE, "largeshredder"           , NBT_INPUT,  512, NBT_INPUT_MIN,  512, NBT_INPUT_MAX,     4096, NBT_EFFICIENCY,  5000, NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_RECIPEMAP, RM.Shredder             , NBT_INV_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_TANK_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_CHEAP_OVERCLOCKING, F, NBT_PARALLEL,  64, NBT_PARALLEL_DURATION, F, NBT_NO_CONSTANT_POWER, T), "SGS", "GSG", "RMC", 'M', aRegistry.getItem(18003), 'R', IL.Processor_Crystal_Ruby, 'C', OD_CIRCUITS[6], 'G', OP.gearGt.dat(aMat), 'S', OP.gearGtSmall.dat(aMat));
        aMat = ANY.Steel;               aRegistry.add("Large Squeezer"                                      , "Multiblock Machines", 17114, 17101, MultiTileEntitySqueezer_CH.class            , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_TEXTURE, "largesqueezer"           , NBT_INPUT,  512, NBT_INPUT_MIN,  512, NBT_INPUT_MAX,     4096, NBT_EFFICIENCY,  5000, NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_RECIPEMAP, RM.Squeezer             , NBT_INV_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_TANK_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_CHEAP_OVERCLOCKING, F, NBT_PARALLEL,  64, NBT_PARALLEL_DURATION, F, NBT_NO_CONSTANT_POWER, T), "GSG", "GSG", "RMC", 'M', aRegistry.getItem(18009), 'R', IL.Processor_Crystal_Ruby, 'C', OD_CIRCUITS[6], 'G', OP.gearGt.dat(aMat), 'S', OP.gearGtSmall.dat(aMat));
        aMat = MT.Pb;                   aRegistry.add("Large Matter Fabricator"                             , "Multiblock Machines", 17199, 17101, MultiTileEntityMatterFabricator_CH.class    , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_TEXTURE, "largemassfab"            , NBT_INPUT,    1, NBT_INPUT_MIN,    1, NBT_INPUT_MAX,  2097152                       , NBT_ENERGY_ACCEPTED, TD.Energy.QU, NBT_RECIPEMAP, RM.Massfab              , NBT_INV_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_TANK_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_CHEAP_OVERCLOCKING, T, NBT_PARALLEL,  64, NBT_PARALLEL_DURATION, T, NBT_NO_CONSTANT_POWER, T), "FFF", "FMF", "FFF", 'M', aRegistry.getItem(18031), 'F', IL.FIELD_GENERATORS[5]);

        // 聚变反应堆
        aMat = MT.SteelGalvanized;      aRegistry.add("Fusion Reactor"                                      , "Multiblock Machines", 17198, 17101, MultiTileEntityFusionReactor_CH.class       , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  12.5F, NBT_RESISTANCE,  12.5F, NBT_TEXTURE, "fusionreactor"           , NBT_INPUT, 8192, NBT_INPUT_MIN,    1, NBT_INPUT_MAX,    16384                       , NBT_ENERGY_ACCEPTED, TD.Energy.TU, NBT_RECIPEMAP, RM.Fusion               , NBT_ENERGY_ACCEPTED_2, TD.Energy.LU, NBT_ENERGY_EMITTED, TD.Energy.EU, NBT_SPECIAL_IS_START_ENERGY, T, NBT_NO_CONSTANT_POWER, T), "FFF", "FMF", "FFF", 'M', aRegistry.getItem(18003), 'F', IL.FIELD_GENERATORS[5]);


        aMat = ANY.W;                   aRegistry.add("Large Heat Exchanger"                                , "Multiblock Machines", 17197, 17101, MultiTileEntityLargeHeatExchanger.class  , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_TEXTURE, "largeheatexchanger"      , NBT_OUTPUT, 16384, NBT_FUELMAP, FM.Hot, NBT_ENERGY_EMITTED, TD.Energy.HU), "DDD", "PMP", "DDD", 'M', aRegistry.getItem(18024), 'D', OP.plateDense.dat(MT.AnnealedCopper), 'P', OP.pipeHuge.dat(ANY.Cu));

        // Boilers
        aClass = enableChangeBoiler ? MultiTileEntityLargeBoiler_CH.class : MultiTileEntityLargeBoiler.class;
        for (AttributesLargeBoilerTank_CH BOILER_TANK : DATA_MACHINES_MULTIBLOCK.LargeBoilerTank) {
            aMat = BOILER_TANK.material;
            aRegistry.add(aMat.getLocal() + "Stainless Steel" + " Boiler Main Barometer" , "Multiblock Machines", BOILER_TANK.ID, 17101, aClass, aMat.mToolQuality, BOILER_TANK.stackSize, aMachine,
                    UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   BOILER_TANK.nbtHardness, NBT_RESISTANCE,   BOILER_TANK.nbtResistance, NBT_TEXTURE, "largeboiler", NBT_DESIGN, BOILER_TANK.nbtDesign, NBT_CAPACITY,  BOILER_TANK.nbtCapacity, NBT_CAPACITY_SU,  BOILER_TANK.nbtCapacity_SU, NBT_INPUT,  BOILER_TANK.nbtInput,   NBT_EFFICIENCY_CH, BOILER_TANK.nbtEfficiency_CH, NBT_OUTPUT_SU,  BOILER_TANK.nbtInput*STEAM_PER_EU),
                    BOILER_TANK.recipeObject);
        }

        // Steam Turbines
        NBTTagCompound tNBT;
        aClass = enableChangeMotor ? MultiTileEntityLargeTurbineSteam_CH.class : MultiTileEntityLargeTurbineSteam.class;
        for (AttributesLargeSteamTurbine_CH STEAM_TURBINE : DATA_MACHINES_MULTIBLOCK.LargeSteamTurbine) {
            aMat = STEAM_TURBINE.material;
            tNBT = UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS, STEAM_TURBINE.nbtHardness, NBT_RESISTANCE, STEAM_TURBINE.nbtResistance, NBT_TEXTURE, "largeturbine", NBT_DESIGN, STEAM_TURBINE.nbtDesign, NBT_EFFICIENCY_WATER, STEAM_TURBINE.nbtEfficiencyWater, NBT_LENGTH_MIN, STEAM_TURBINE.nbtLengthMin, NBT_LENGTH_MAX, STEAM_TURBINE.nbtLengthMax, NBT_LENGTH_MID, STEAM_TURBINE.nbtLengthMid, NBT_EFFICIENCY_OC, STEAM_TURBINE.nbtEfficiencyOC, NBT_ENERGY_ACCEPTED, TD.Energy.STEAM, NBT_ENERGY_EMITTED, TD.Energy.RU
                    , NBT_OUTPUT, STEAM_TURBINE.nbtOutput[STEAM_TURBINE.nbtLengthMid-STEAM_TURBINE.nbtLengthMin], NBT_EFFICIENCY, STEAM_TURBINE.nbtEfficiency[STEAM_TURBINE.nbtLengthMid-STEAM_TURBINE.nbtLengthMin], NBT_INPUT, UT.Code.units(STEAM_TURBINE.nbtOutput[STEAM_TURBINE.nbtLengthMid-STEAM_TURBINE.nbtLengthMin], STEAM_TURBINE.nbtEfficiency[STEAM_TURBINE.nbtLengthMid-STEAM_TURBINE.nbtLengthMin], 10000, T) * STEAM_PER_EU, NBT_WASTE_ENERGY, T);
            for (int i = 0; i < STEAM_TURBINE.nbtLengthMax-STEAM_TURBINE.nbtLengthMin + 1; ++i) {
                UT.NBT.setNumber(tNBT, NBT_EFFICIENCY+"."+i, STEAM_TURBINE.nbtEfficiency[i]);
                UT.NBT.setNumber(tNBT, NBT_OUTPUT+"."+i, STEAM_TURBINE.nbtOutput[i]);
                UT.NBT.setNumber(tNBT, NBT_PREHEAT_ENERGY+"."+i, STEAM_TURBINE.nbtPreheatEnergy[i]);
                UT.NBT.setNumber(tNBT, NBT_PREHEAT_COST+"."+i, STEAM_TURBINE.nbtPreheatCost[i]);
                UT.NBT.setNumber(tNBT, NBT_COOLDOWN_RATE+"."+i, STEAM_TURBINE.nbtCooldownRate[i]);
            }
            aRegistry.add(STEAM_TURBINE.rotorMaterial.getLocal() + " Steam Turbine Main Housing", "Multiblock Machines", STEAM_TURBINE.ID, 17101, aClass  , aMat.mToolQuality, STEAM_TURBINE.stackSize, aMachine,
                    tNBT, STEAM_TURBINE.recipeObject);
        }

        aMat = MT.StainlessSteel;       aRegistry.add("Stainless Steel Dynamo Main Housing"                 , "Multiblock Machines", 17221, 17101, MultiTileEntityLargeDynamo.class         , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_TEXTURE, "largedynamo"             , NBT_DESIGN, 18022, NBT_INPUT,   4312, NBT_OUTPUT,   4096, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_ENERGY_EMITTED, TD.Energy.EU), "SwS", "CMC", "SBS", 'M', aRegistry.getItem(18022), 'S', OP.stickLong.dat(aMat), 'C', OD_CIRCUITS[6], 'B', "gt:re-battery1");
        aMat = MT.Ti;                   aRegistry.add("Titanium Dynamo Main Housing"                        , "Multiblock Machines", 17222, 17101, MultiTileEntityLargeDynamo.class         , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   9.0F, NBT_RESISTANCE,   9.0F, NBT_TEXTURE, "largedynamo"             , NBT_DESIGN, 18026, NBT_INPUT,   8624, NBT_OUTPUT,   8192, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_ENERGY_EMITTED, TD.Energy.EU), "SwS", "CMC", "SBS", 'M', aRegistry.getItem(18026), 'S', OP.stickLong.dat(aMat), 'C', OD_CIRCUITS[6], 'B', "gt:re-battery1");
        aMat = MT.TungstenSteel;        aRegistry.add("Tungstensteel Dynamo Main Housing"                   , "Multiblock Machines", 17223, 17101, MultiTileEntityLargeDynamo.class         , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  12.5F, NBT_RESISTANCE,  12.5F, NBT_TEXTURE, "largedynamo"             , NBT_DESIGN, 18023, NBT_INPUT,  17246, NBT_OUTPUT,  16384, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_ENERGY_EMITTED, TD.Energy.EU), "SwS", "CMC", "SBS", 'M', aRegistry.getItem(18023), 'S', OP.stickLong.dat(aMat), 'C', OD_CIRCUITS[6], 'B', "gt:re-battery1");
        aMat = MT.Ad;                   aRegistry.add("Adamantium Dynamo Main Housing"                      , "Multiblock Machines", 17224, 17101, MultiTileEntityLargeDynamo.class         , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS, 100.0F, NBT_RESISTANCE, 100.0F, NBT_TEXTURE, "largedynamo"             , NBT_DESIGN, 18025, NBT_INPUT, 137970, NBT_OUTPUT, 131072, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_ENERGY_EMITTED, TD.Energy.EU), "SwS", "CMC", "SBS", 'M', aRegistry.getItem(18025), 'S', OP.stickLong.dat(aMat), 'C', OD_CIRCUITS[6], 'B', "gt:re-battery1");

        // Gas Turbines
        aClass = enableChangeMotor ? MultiTileEntityLargeTurbineGas_CH.class : MultiTileEntityLargeTurbineGas.class;
        for (AttributesLargeGasTurbine_CH GAS_TURBINE : DATA_MACHINES_MULTIBLOCK.LargeGasTurbine) {
            aMat = GAS_TURBINE.material;
            tNBT = UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   GAS_TURBINE.nbtHardness, NBT_RESISTANCE,   GAS_TURBINE.nbtResistance, NBT_TEXTURE, "gasturbine", NBT_DESIGN, GAS_TURBINE.nbtDesign, NBT_LENGTH_MIN, GAS_TURBINE.nbtLengthMin, NBT_LENGTH_MAX, GAS_TURBINE.nbtLengthMax, NBT_LENGTH_MID, GAS_TURBINE.nbtLengthMid, NBT_ENERGY_EMITTED, TD.Energy.RU, NBT_FUELMAP, FM.Gas
                    , NBT_OUTPUT,   GAS_TURBINE.nbtOutput[GAS_TURBINE.nbtLengthMid-GAS_TURBINE.nbtLengthMin], NBT_EFFICIENCY, GAS_TURBINE.nbtEfficiency[GAS_TURBINE.nbtLengthMid-GAS_TURBINE.nbtLengthMin], NBT_INPUT, GAS_TURBINE.nbtOutput[GAS_TURBINE.nbtLengthMid-GAS_TURBINE.nbtLengthMin], NBT_WASTE_ENERGY, F, NBT_LIMIT_CONSUMPTION, T, NBT_ENERGY_ACCEPTED, TD.Energy.HU);
            for (int i = 0; i < GAS_TURBINE.nbtLengthMax-GAS_TURBINE.nbtLengthMin + 1; ++i) {
                UT.NBT.setNumber(tNBT, NBT_EFFICIENCY+"."+i, GAS_TURBINE.nbtEfficiency[i]);
                UT.NBT.setNumber(tNBT, NBT_OUTPUT+"."+i, GAS_TURBINE.nbtOutput[i]);
                UT.NBT.setNumber(tNBT, NBT_PREHEAT_ENERGY+"."+i, GAS_TURBINE.nbtPreheatEnergy[i]);
                UT.NBT.setNumber(tNBT, NBT_PREHEAT_COST+"."+i, GAS_TURBINE.nbtPreheatCost[i]);
                UT.NBT.setNumber(tNBT, NBT_COOLDOWN_RATE+"."+i, GAS_TURBINE.nbtCooldownRate[i]);
                UT.NBT.setNumber(tNBT, NBT_PREHEAT_RATE+"."+i, GAS_TURBINE.nbtPreheatRate[i]);
            }
            aRegistry.add(GAS_TURBINE.rotorMaterial.getLocal() + " Gas Turbine Main Housing", "Multiblock Machines", GAS_TURBINE.ID, 17101, aClass  , aMat.mToolQuality, GAS_TURBINE.stackSize, aMachine,
                    tNBT, GAS_TURBINE.recipeObject);
        }

        aMat = MT.Steel;                aRegistry.add("Large Steel Crucible"                                , "Multiblock Machines", 17309, 17101, MultiTileEntityCrucible.class            , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_TEXTURE, "crucible"                , NBT_DESIGN, 18009, NBT_ACIDPROOF, F), "hMy", 'M', aRegistry.getItem(18009));
        aMat = MT.StainlessSteel;       aRegistry.add("Large Stainless Steel Crucible"                      , "Multiblock Machines", 17302, 17101, MultiTileEntityCrucible.class            , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_TEXTURE, "crucible"                , NBT_DESIGN, 18002, NBT_ACIDPROOF, T), "hMy", 'M', aRegistry.getItem(18002));
        aMat = MT.Invar;                aRegistry.add("Large Invar Crucible"                                , "Multiblock Machines", 17307, 17101, MultiTileEntityCrucible.class            , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_TEXTURE, "crucible"                , NBT_DESIGN, 18007, NBT_ACIDPROOF, F), "hMy", 'M', aRegistry.getItem(18007));
        aMat = MT.Ti;                   aRegistry.add("Large Titanium Crucible"                             , "Multiblock Machines", 17306, 17101, MultiTileEntityCrucible.class            , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   9.0F, NBT_RESISTANCE,   9.0F, NBT_TEXTURE, "crucible"                , NBT_DESIGN, 18006, NBT_ACIDPROOF, F), "hMy", 'M', aRegistry.getItem(18006));
        aMat = MT.TungstenSteel;        aRegistry.add("Large Tungstensteel Crucible"                        , "Multiblock Machines", 17303, 17101, MultiTileEntityCrucible.class            , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  12.5F, NBT_RESISTANCE,  12.5F, NBT_TEXTURE, "crucible"                , NBT_DESIGN, 18003, NBT_ACIDPROOF, F), "hMy", 'M', aRegistry.getItem(18003));
        aMat = ANY.W;                   aRegistry.add("Large Tungsten Crucible"                             , "Multiblock Machines", 17304, 17101, MultiTileEntityCrucible.class            , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_TEXTURE, "crucible"                , NBT_DESIGN, 18004, NBT_ACIDPROOF, T), "hMy", 'M', aRegistry.getItem(18004));
        aMat = MT.Ta4HfC5;              aRegistry.add("Large Tantalum Hafnium Carbide Crucible"             , "Multiblock Machines", 17312, 17101, MultiTileEntityCrucible.class            , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  12.5F, NBT_RESISTANCE,  12.5F, NBT_TEXTURE, "crucible"                , NBT_DESIGN, 18012, NBT_ACIDPROOF, F), "hMy", 'M', aRegistry.getItem(18012));
        aMat = MT.Ad;                   aRegistry.add("Large Adamantium Crucible"                           , "Multiblock Machines", 17305, 17101, MultiTileEntityCrucible.class            , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS, 100.0F, NBT_RESISTANCE, 100.0F, NBT_TEXTURE, "crucible"                , NBT_DESIGN, 18005, NBT_ACIDPROOF, T), "hMy", 'M', aRegistry.getItem(18005));


        aMat = MT.SteelGalvanized;      aRegistry.add("Logistics Core"                                      , "Logistics"          , 17997, 17997, MultiTileEntityLogisticsCore.class       , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_TEXTURE, "logisticscore"           , NBT_ENERGY_ACCEPTED, TD.Energy.EU), "CCC", "PMP", "CCC", 'M', OP.casingMachine.dat(aMat), 'P', IL.Processor_Crystal_Emerald, 'C', OD_CIRCUITS[6]);
        aMat = ANY.W;                   aRegistry.add("Lightning Rod Electric Output"                       , "Multiblock Machines", 17998, 17101, MultiTileEntityLightningRod.class        , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_TEXTURE, "lightningrod"            , NBT_ENERGY_EMITTED, TD.Energy.EU, NBT_CAPACITY, 18000 * VREC[6]), "CWC", "PMP", "CWC", 'M', OP.casingMachine.dat(aMat), 'W', OP.wireGt16.dat(MT.NiobiumTitanium), 'P', IL.Processor_Crystal_Sapphire, 'C', OD_CIRCUITS[6]);
        aMat = MT.Ti;                   aRegistry.add("Bedrock Mining Drill Controller"                     , "Multiblock Machines", 17999, 17101, MultiTileEntityBedrockDrill.class        , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   9.0F, NBT_RESISTANCE,   9.0F, NBT_TEXTURE, "bedrockdrill"            , NBT_RECIPEMAP, RM.BedrockOreList, NBT_ENERGY_ACCEPTED, TD.Energy.RU), "PYP", "CMC", "GIG", 'M', OP.casingMachineDense.dat(aMat), 'G', OP.gearGt.dat(MT.TungstenSteel), 'I', OP.toolHeadDrill.dat(MT.TungstenSteel), 'P', IL.Processor_Crystal_Ruby, 'Y', IL.CONVEYERS[5], 'C', OD_CIRCUITS[6]);
    }

    protected static void machines1(MultiTileEntityRegistry aRegistry, MultiTileEntityBlock aMetal, MultiTileEntityBlock aMetalChips, MultiTileEntityBlock aMetalWires, MultiTileEntityBlock aMachine, MultiTileEntityBlock aWooden, MultiTileEntityBlock aBush, MultiTileEntityBlock aStone, MultiTileEntityBlock aWool, MultiTileEntityBlock aTNT, MultiTileEntityBlock aHive, MultiTileEntityBlock aUtilMetal, MultiTileEntityBlock aUtilStone, MultiTileEntityBlock aUtilWood, MultiTileEntityBlock aUtilWool, OreDictMaterial aMat, Class<? extends TileEntity> aClass) {
        aClass = MultiTileEntityBasicMachine_CH.class;
        aMat = MT.DATA.Heat_T[1];       aRegistry.add("Oven ("                          +aMat.getLocal()+")", "Basic Machines"                      , 20001, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_INPUT,   32, NBT_TEXTURE, "oven", NBT_ENERGY_ACCEPTED, TD.Energy.HU, NBT_RECIPEMAP, RM.Furnace, NBT_INV_SIDE_IN, SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_OUT, 63, NBT_ENERGY_ACCEPTED_SIDES, SBIT_D, NBT_PARALLEL, 4, NBT_PARALLEL_DURATION, T), "wMh", "BCB", 'M', OP.casingMachine.dat(aMat), 'C', OP.plateDouble.dat(ANY.Cu), 'B', Blocks.brick_block);
        aMat = MT.DATA.Heat_T[2];       aRegistry.add("Oven ("                          +aMat.getLocal()+")", "Basic Machines"                      , 20002, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,  128, NBT_TEXTURE, "oven", NBT_ENERGY_ACCEPTED, TD.Energy.HU, NBT_RECIPEMAP, RM.Furnace, NBT_INV_SIDE_IN, SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_OUT, 63, NBT_ENERGY_ACCEPTED_SIDES, SBIT_D, NBT_PARALLEL, 8, NBT_PARALLEL_DURATION, T), "wMh", "BCB", 'M', OP.casingMachine.dat(aMat), 'C', OP.plateDouble.dat(ANY.Cu), 'B', Blocks.brick_block);
        aMat = MT.DATA.Heat_T[3];       aRegistry.add("Oven ("                          +aMat.getLocal()+")", "Basic Machines"                      , 20003, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   9.0F, NBT_RESISTANCE,   9.0F, NBT_INPUT,  512, NBT_TEXTURE, "oven", NBT_ENERGY_ACCEPTED, TD.Energy.HU, NBT_RECIPEMAP, RM.Furnace, NBT_INV_SIDE_IN, SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_OUT, 63, NBT_ENERGY_ACCEPTED_SIDES, SBIT_D, NBT_PARALLEL,16, NBT_PARALLEL_DURATION, T), "wMh", "BCB", 'M', OP.casingMachine.dat(aMat), 'C', OP.plateDouble.dat(ANY.Cu), 'B', Blocks.brick_block);
        aMat = MT.DATA.Heat_T[4];       aRegistry.add("Oven ("                          +aMat.getLocal()+")", "Basic Machines"                      , 20004, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  12.5F, NBT_RESISTANCE,  12.5F, NBT_INPUT, 2048, NBT_TEXTURE, "oven", NBT_ENERGY_ACCEPTED, TD.Energy.HU, NBT_RECIPEMAP, RM.Furnace, NBT_INV_SIDE_IN, SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_OUT, 63, NBT_ENERGY_ACCEPTED_SIDES, SBIT_D, NBT_PARALLEL,32, NBT_PARALLEL_DURATION, T), "wMh", "BCB", 'M', OP.casingMachine.dat(aMat), 'C', OP.plateDouble.dat(ANY.Cu), 'B', Blocks.brick_block);

        aClass = MultiTileEntityBasicMachine_CH.class;
        aMat = MT.DATA.Kinetic_T[1];    aRegistry.add("Shredder ("                      +aMat.getLocal()+")", "Basic Machines"                      , 20011, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   7.0F, NBT_RESISTANCE,   7.0F, NBT_INPUT,   32, NBT_TEXTURE, "shredder", NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_RECIPEMAP, RM.Shredder, NBT_INV_SIDE_IN, SBIT_U, NBT_INV_SIDE_AUTO_IN, SIDE_TOP, NBT_INV_SIDE_OUT, SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_L|SBIT_R), "GDG", "hMw", 'M', OP.casingMachineDouble.dat(aMat), 'G', OP.gearGt.dat(aMat), 'D', OP.plateGem.dat(ANY.Diamond));
        aMat = MT.DATA.Kinetic_T[2];    aRegistry.add("Shredder ("                      +aMat.getLocal()+")", "Basic Machines"                      , 20012, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_INPUT,  128, NBT_TEXTURE, "shredder", NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_RECIPEMAP, RM.Shredder, NBT_INV_SIDE_IN, SBIT_U, NBT_INV_SIDE_AUTO_IN, SIDE_TOP, NBT_INV_SIDE_OUT, SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_L|SBIT_R), "GDG", "hMw", 'M', OP.casingMachineDouble.dat(aMat), 'G', OP.gearGt.dat(aMat), 'D', OP.plateGem.dat(ANY.Diamond));
        aMat = MT.DATA.Kinetic_T[3];    aRegistry.add("Shredder ("                      +aMat.getLocal()+")", "Basic Machines"                      , 20013, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   9.0F, NBT_RESISTANCE,   9.0F, NBT_INPUT,  512, NBT_TEXTURE, "shredder", NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_RECIPEMAP, RM.Shredder, NBT_INV_SIDE_IN, SBIT_U, NBT_INV_SIDE_AUTO_IN, SIDE_TOP, NBT_INV_SIDE_OUT, SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_L|SBIT_R), "GDG", "hMw", 'M', OP.casingMachineDouble.dat(aMat), 'G', OP.gearGt.dat(aMat), 'D', OP.plateGem.dat(ANY.Diamond));
        aMat = MT.DATA.Kinetic_T[4];    aRegistry.add("Shredder ("                      +aMat.getLocal()+")", "Basic Machines"                      , 20014, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  12.5F, NBT_RESISTANCE,  12.5F, NBT_INPUT, 2048, NBT_TEXTURE, "shredder", NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_RECIPEMAP, RM.Shredder, NBT_INV_SIDE_IN, SBIT_U, NBT_INV_SIDE_AUTO_IN, SIDE_TOP, NBT_INV_SIDE_OUT, SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_L|SBIT_R), "GDG", "hMw", 'M', OP.casingMachineDouble.dat(aMat), 'G', OP.gearGt.dat(aMat), 'D', OP.plateGem.dat(ANY.Diamond));

        aClass = MultiTileEntityBasicMachine_CH.class;
        aMat = MT.DATA.Kinetic_T[1];    aRegistry.add("Crusher ("                       +aMat.getLocal()+")", "Basic Machines"                      , 20021, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   7.0F, NBT_RESISTANCE,   7.0F, NBT_INPUT,   32, NBT_TEXTURE, "crusher", NBT_ENERGY_ACCEPTED, TD.Energy.KU, NBT_RECIPEMAP, RM.Crusher, NBT_INV_SIDE_IN, SBIT_U, NBT_INV_SIDE_AUTO_IN, SIDE_TOP, NBT_INV_SIDE_OUT, SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B, NBT_PARALLEL, 4, NBT_PARALLEL_DURATION, T), "DMD", "hSw", 'M', OP.casingMachineDouble.dat(aMat), 'S', OP.spring.dat(aMat), 'D', OP.gem.dat(ANY.Diamond));
        aMat = MT.DATA.Kinetic_T[2];    aRegistry.add("Crusher ("                       +aMat.getLocal()+")", "Basic Machines"                      , 20022, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_INPUT,  128, NBT_TEXTURE, "crusher", NBT_ENERGY_ACCEPTED, TD.Energy.KU, NBT_RECIPEMAP, RM.Crusher, NBT_INV_SIDE_IN, SBIT_U, NBT_INV_SIDE_AUTO_IN, SIDE_TOP, NBT_INV_SIDE_OUT, SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B, NBT_PARALLEL, 8, NBT_PARALLEL_DURATION, T), "DMD", "hSw", 'M', OP.casingMachineDouble.dat(aMat), 'S', OP.spring.dat(aMat), 'D', OP.gem.dat(ANY.Diamond));
        aMat = MT.DATA.Kinetic_T[3];    aRegistry.add("Crusher ("                       +aMat.getLocal()+")", "Basic Machines"                      , 20023, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   9.0F, NBT_RESISTANCE,   9.0F, NBT_INPUT,  512, NBT_TEXTURE, "crusher", NBT_ENERGY_ACCEPTED, TD.Energy.KU, NBT_RECIPEMAP, RM.Crusher, NBT_INV_SIDE_IN, SBIT_U, NBT_INV_SIDE_AUTO_IN, SIDE_TOP, NBT_INV_SIDE_OUT, SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B, NBT_PARALLEL,16, NBT_PARALLEL_DURATION, T), "DMD", "hSw", 'M', OP.casingMachineDouble.dat(aMat), 'S', OP.spring.dat(aMat), 'D', OP.gem.dat(ANY.Diamond));
        aMat = MT.DATA.Kinetic_T[4];    aRegistry.add("Crusher ("                       +aMat.getLocal()+")", "Basic Machines"                      , 20024, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  12.5F, NBT_RESISTANCE,  12.5F, NBT_INPUT, 2048, NBT_TEXTURE, "crusher", NBT_ENERGY_ACCEPTED, TD.Energy.KU, NBT_RECIPEMAP, RM.Crusher, NBT_INV_SIDE_IN, SBIT_U, NBT_INV_SIDE_AUTO_IN, SIDE_TOP, NBT_INV_SIDE_OUT, SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B, NBT_PARALLEL,32, NBT_PARALLEL_DURATION, T), "DMD", "hSw", 'M', OP.casingMachineDouble.dat(aMat), 'S', OP.spring.dat(aMat), 'D', OP.gem.dat(ANY.Diamond));

        aClass = MultiTileEntityBasicMachine_CH.class;
        aMat = MT.DATA.Kinetic_T[1];    aRegistry.add("Lathe ("                         +aMat.getLocal()+")", "Basic Machines"                      , 20041, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   7.0F, NBT_RESISTANCE,   7.0F, NBT_INPUT,   32, NBT_TEXTURE, "lathe", NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_RECIPEMAP, RM.Lathe, NBT_INV_SIDE_IN, SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_D), "TDS", "dMG", 'M', OP.casingMachineDouble.dat(aMat), 'T', OP.screw.dat(aMat), 'G', OP.gearGt.dat(aMat), 'S', OP.gearGtSmall.dat(aMat), 'D', OP.plateGemTiny.dat(ANY.Diamond));
        aMat = MT.DATA.Kinetic_T[2];    aRegistry.add("Lathe ("                         +aMat.getLocal()+")", "Basic Machines"                      , 20042, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_INPUT,  128, NBT_TEXTURE, "lathe", NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_RECIPEMAP, RM.Lathe, NBT_INV_SIDE_IN, SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_D), "TDS", "dMG", 'M', OP.casingMachineDouble.dat(aMat), 'T', OP.screw.dat(aMat), 'G', OP.gearGt.dat(aMat), 'S', OP.gearGtSmall.dat(aMat), 'D', OP.plateGemTiny.dat(ANY.Diamond));
        aMat = MT.DATA.Kinetic_T[3];    aRegistry.add("Lathe ("                         +aMat.getLocal()+")", "Basic Machines"                      , 20043, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   9.0F, NBT_RESISTANCE,   9.0F, NBT_INPUT,  512, NBT_TEXTURE, "lathe", NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_RECIPEMAP, RM.Lathe, NBT_INV_SIDE_IN, SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_D), "TDS", "dMG", 'M', OP.casingMachineDouble.dat(aMat), 'T', OP.screw.dat(aMat), 'G', OP.gearGt.dat(aMat), 'S', OP.gearGtSmall.dat(aMat), 'D', OP.plateGemTiny.dat(ANY.Diamond));
        aMat = MT.DATA.Kinetic_T[4];    aRegistry.add("Lathe ("                         +aMat.getLocal()+")", "Basic Machines"                      , 20044, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  12.5F, NBT_RESISTANCE,  12.5F, NBT_INPUT, 2048, NBT_TEXTURE, "lathe", NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_RECIPEMAP, RM.Lathe, NBT_INV_SIDE_IN, SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_D), "TDS", "dMG", 'M', OP.casingMachineDouble.dat(aMat), 'T', OP.screw.dat(aMat), 'G', OP.gearGt.dat(aMat), 'S', OP.gearGtSmall.dat(aMat), 'D', OP.plateGemTiny.dat(ANY.Diamond));

        aClass = MultiTileEntityBasicMachine_CH.class;
        aMat = MT.DATA.Kinetic_T[1];    aRegistry.add("Sifter ("                        +aMat.getLocal()+")", "Basic Machines"                      , 20051, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   7.0F, NBT_RESISTANCE,   7.0F, NBT_INPUT,   32, NBT_TEXTURE, "sifter", NBT_ENERGY_ACCEPTED, TD.Energy.KU, NBT_RECIPEMAP, RM.Sifting, NBT_INV_SIDE_IN, SBIT_U, NBT_INV_SIDE_AUTO_IN, SIDE_TOP, NBT_INV_SIDE_OUT, SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B, NBT_PARALLEL, 4, NBT_PARALLEL_DURATION, T), "WxW", "RMR", "SwS", 'M', OP.casingMachineDouble.dat(aMat), 'S', OP.spring.dat(aMat), 'W', OP.wireFine.dat(aMat), 'R', OP.stick.dat(aMat));
        aMat = MT.DATA.Kinetic_T[2];    aRegistry.add("Sifter ("                        +aMat.getLocal()+")", "Basic Machines"                      , 20052, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_INPUT,  128, NBT_TEXTURE, "sifter", NBT_ENERGY_ACCEPTED, TD.Energy.KU, NBT_RECIPEMAP, RM.Sifting, NBT_INV_SIDE_IN, SBIT_U, NBT_INV_SIDE_AUTO_IN, SIDE_TOP, NBT_INV_SIDE_OUT, SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B, NBT_PARALLEL, 8, NBT_PARALLEL_DURATION, T), "WxW", "RMR", "SwS", 'M', OP.casingMachineDouble.dat(aMat), 'S', OP.spring.dat(aMat), 'W', OP.wireFine.dat(aMat), 'R', OP.stick.dat(aMat));
        aMat = MT.DATA.Kinetic_T[3];    aRegistry.add("Sifter ("                        +aMat.getLocal()+")", "Basic Machines"                      , 20053, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   9.0F, NBT_RESISTANCE,   9.0F, NBT_INPUT,  512, NBT_TEXTURE, "sifter", NBT_ENERGY_ACCEPTED, TD.Energy.KU, NBT_RECIPEMAP, RM.Sifting, NBT_INV_SIDE_IN, SBIT_U, NBT_INV_SIDE_AUTO_IN, SIDE_TOP, NBT_INV_SIDE_OUT, SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B, NBT_PARALLEL,16, NBT_PARALLEL_DURATION, T), "WxW", "RMR", "SwS", 'M', OP.casingMachineDouble.dat(aMat), 'S', OP.spring.dat(aMat), 'W', OP.wireFine.dat(aMat), 'R', OP.stick.dat(aMat));
        aMat = MT.DATA.Kinetic_T[4];    aRegistry.add("Sifter ("                        +aMat.getLocal()+")", "Basic Machines"                      , 20054, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  12.5F, NBT_RESISTANCE,  12.5F, NBT_INPUT, 2048, NBT_TEXTURE, "sifter", NBT_ENERGY_ACCEPTED, TD.Energy.KU, NBT_RECIPEMAP, RM.Sifting, NBT_INV_SIDE_IN, SBIT_U, NBT_INV_SIDE_AUTO_IN, SIDE_TOP, NBT_INV_SIDE_OUT, SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B, NBT_PARALLEL,32, NBT_PARALLEL_DURATION, T), "WxW", "RMR", "SwS", 'M', OP.casingMachineDouble.dat(aMat), 'S', OP.spring.dat(aMat), 'W', OP.wireFine.dat(aMat), 'R', OP.stick.dat(aMat));

        aClass = MultiTileEntityBasicMachine_CH.class;
        aMat = MT.DATA.Kinetic_T[1];    aRegistry.add("Buzzsaw ("                       +aMat.getLocal()+")", "Basic Machines"                      , 20061, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   7.0F, NBT_RESISTANCE,   7.0F, NBT_INPUT,   32, NBT_TEXTURE, "buzzsaw", NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_RECIPEMAP, RM.Cutter, NBT_INV_SIDE_IN, SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_U|SBIT_D, NBT_TANK_SIDE_AUTO_IN, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B), "DGS", "wMS", 'M', OP.casingMachineDouble.dat(aMat), 'S', OP.gearGtSmall.dat(aMat), 'D', OP.dust.dat(ANY.Diamond), 'G', OP.toolHeadBuzzSaw.dat(ANY.Steel));
        aMat = MT.DATA.Kinetic_T[2];    aRegistry.add("Buzzsaw ("                       +aMat.getLocal()+")", "Basic Machines"                      , 20062, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_INPUT,  128, NBT_TEXTURE, "buzzsaw", NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_RECIPEMAP, RM.Cutter, NBT_INV_SIDE_IN, SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_U|SBIT_D, NBT_TANK_SIDE_AUTO_IN, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B), "DGS", "wMS", 'M', OP.casingMachineDouble.dat(aMat), 'S', OP.gearGtSmall.dat(aMat), 'D', OP.dust.dat(ANY.Diamond), 'G', OP.toolHeadBuzzSaw.dat(MT.CobaltBrass));
        aMat = MT.DATA.Kinetic_T[3];    aRegistry.add("Buzzsaw ("                       +aMat.getLocal()+")", "Basic Machines"                      , 20063, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   9.0F, NBT_RESISTANCE,   9.0F, NBT_INPUT,  512, NBT_TEXTURE, "buzzsaw", NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_RECIPEMAP, RM.Cutter, NBT_INV_SIDE_IN, SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_U|SBIT_D, NBT_TANK_SIDE_AUTO_IN, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B), "DGS", "wMS", 'M', OP.casingMachineDouble.dat(aMat), 'S', OP.gearGtSmall.dat(aMat), 'D', OP.dust.dat(ANY.Diamond), 'G', OP.toolHeadBuzzSaw.dat(MT.CobaltBrass));
        aMat = MT.DATA.Kinetic_T[4];    aRegistry.add("Buzzsaw ("                       +aMat.getLocal()+")", "Basic Machines"                      , 20064, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  12.5F, NBT_RESISTANCE,  12.5F, NBT_INPUT, 2048, NBT_TEXTURE, "buzzsaw", NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_RECIPEMAP, RM.Cutter, NBT_INV_SIDE_IN, SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_U|SBIT_D, NBT_TANK_SIDE_AUTO_IN, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B), "DGS", "wMS", 'M', OP.casingMachineDouble.dat(aMat), 'S', OP.gearGtSmall.dat(aMat), 'D', OP.dust.dat(ANY.Diamond), 'G', OP.toolHeadBuzzSaw.dat(MT.CobaltBrass));

        aClass = MultiTileEntityBasicMachine_CH.class;
        aMat = MT.DATA.Kinetic_T[1];    aRegistry.add("Squeezer ("                      +aMat.getLocal()+")", "Basic Machines"                      , 20071, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   7.0F, NBT_RESISTANCE,   7.0F, NBT_INPUT,   32, NBT_TEXTURE, "squeezer", NBT_ENERGY_ACCEPTED, TD.Energy.KU, NBT_RECIPEMAP, RM.Squeezer, NBT_INV_SIDE_IN, SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_OUT, SBIT_D, NBT_TANK_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_U, NBT_PARALLEL, 4, NBT_PARALLEL_DURATION, T), "RS", "PM", "Pw", 'M', OP.casingMachineDouble.dat(aMat), 'P', OP.plateTriple.dat(aMat), 'S', OP.spring.dat(aMat), 'R', OP.stick.dat(aMat));
        aMat = MT.DATA.Kinetic_T[2];    aRegistry.add("Squeezer ("                      +aMat.getLocal()+")", "Basic Machines"                      , 20072, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_INPUT,  128, NBT_TEXTURE, "squeezer", NBT_ENERGY_ACCEPTED, TD.Energy.KU, NBT_RECIPEMAP, RM.Squeezer, NBT_INV_SIDE_IN, SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_OUT, SBIT_D, NBT_TANK_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_U, NBT_PARALLEL, 8, NBT_PARALLEL_DURATION, T), "RS", "PM", "Pw", 'M', OP.casingMachineDouble.dat(aMat), 'P', OP.plateTriple.dat(aMat), 'S', OP.spring.dat(aMat), 'R', OP.stick.dat(aMat));
        aMat = MT.DATA.Kinetic_T[3];    aRegistry.add("Squeezer ("                      +aMat.getLocal()+")", "Basic Machines"                      , 20073, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   9.0F, NBT_RESISTANCE,   9.0F, NBT_INPUT,  512, NBT_TEXTURE, "squeezer", NBT_ENERGY_ACCEPTED, TD.Energy.KU, NBT_RECIPEMAP, RM.Squeezer, NBT_INV_SIDE_IN, SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_OUT, SBIT_D, NBT_TANK_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_U, NBT_PARALLEL,16, NBT_PARALLEL_DURATION, T), "RS", "PM", "Pw", 'M', OP.casingMachineDouble.dat(aMat), 'P', OP.plateTriple.dat(aMat), 'S', OP.spring.dat(aMat), 'R', OP.stick.dat(aMat));
        aMat = MT.DATA.Kinetic_T[4];    aRegistry.add("Squeezer ("                      +aMat.getLocal()+")", "Basic Machines"                      , 20074, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  12.5F, NBT_RESISTANCE,  12.5F, NBT_INPUT, 2048, NBT_TEXTURE, "squeezer", NBT_ENERGY_ACCEPTED, TD.Energy.KU, NBT_RECIPEMAP, RM.Squeezer, NBT_INV_SIDE_IN, SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_OUT, SBIT_D, NBT_TANK_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_U, NBT_PARALLEL,32, NBT_PARALLEL_DURATION, T), "RS", "PM", "Pw", 'M', OP.casingMachineDouble.dat(aMat), 'P', OP.plateTriple.dat(aMat), 'S', OP.spring.dat(aMat), 'R', OP.stick.dat(aMat));

        aClass = MultiTileEntityBasicMachine_CH.class;
        aMat = MT.DATA.Kinetic_T[1];    aRegistry.add("Centrifuge ("                    +aMat.getLocal()+")", "Basic Machines"                      , 20081, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   7.0F, NBT_RESISTANCE,   7.0F, NBT_INPUT,   32, NBT_TEXTURE, "centrifuge", NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_RECIPEMAP, RM.Centrifuge, NBT_INV_SIDE_IN, SBIT_U, NBT_INV_SIDE_AUTO_IN, SIDE_TOP, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_U, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_L, NBT_TANK_SIDE_AUTO_OUT, SIDE_LEFT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_D, NBT_PARALLEL,  1, NBT_PARALLEL_DURATION, T), "Gw", "SM", "Gh", 'M', OP.casingMachineDouble.dat(aMat), 'G', OP.gearGt.dat(aMat), 'S', OP.stickLong.dat(aMat));
        aMat = MT.DATA.Kinetic_T[2];    aRegistry.add("Centrifuge ("                    +aMat.getLocal()+")", "Basic Machines"                      , 20082, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_INPUT,  128, NBT_TEXTURE, "centrifuge", NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_RECIPEMAP, RM.Centrifuge, NBT_INV_SIDE_IN, SBIT_U, NBT_INV_SIDE_AUTO_IN, SIDE_TOP, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_U, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_L, NBT_TANK_SIDE_AUTO_OUT, SIDE_LEFT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_D, NBT_PARALLEL,  2, NBT_PARALLEL_DURATION, T), "Gw", "SM", "Gh", 'M', OP.casingMachineDouble.dat(aMat), 'G', OP.gearGt.dat(aMat), 'S', OP.stickLong.dat(aMat));
        aMat = MT.DATA.Kinetic_T[3];    aRegistry.add("Centrifuge ("                    +aMat.getLocal()+")", "Basic Machines"                      , 20083, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   9.0F, NBT_RESISTANCE,   9.0F, NBT_INPUT,  512, NBT_TEXTURE, "centrifuge", NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_RECIPEMAP, RM.Centrifuge, NBT_INV_SIDE_IN, SBIT_U, NBT_INV_SIDE_AUTO_IN, SIDE_TOP, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_U, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_L, NBT_TANK_SIDE_AUTO_OUT, SIDE_LEFT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_D, NBT_PARALLEL,  4, NBT_PARALLEL_DURATION, T), "Gw", "SM", "Gh", 'M', OP.casingMachineDouble.dat(aMat), 'G', OP.gearGt.dat(aMat), 'S', OP.stickLong.dat(aMat));
        aMat = MT.DATA.Kinetic_T[4];    aRegistry.add("Centrifuge ("                    +aMat.getLocal()+")", "Basic Machines"                      , 20084, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  12.5F, NBT_RESISTANCE,  12.5F, NBT_INPUT, 2048, NBT_TEXTURE, "centrifuge", NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_RECIPEMAP, RM.Centrifuge, NBT_INV_SIDE_IN, SBIT_U, NBT_INV_SIDE_AUTO_IN, SIDE_TOP, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_U, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_L, NBT_TANK_SIDE_AUTO_OUT, SIDE_LEFT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_D, NBT_PARALLEL,  8, NBT_PARALLEL_DURATION, T), "Gw", "SM", "Gh", 'M', OP.casingMachineDouble.dat(aMat), 'G', OP.gearGt.dat(aMat), 'S', OP.stickLong.dat(aMat));

        aClass = MultiTileEntityBasicMachineElectric_CH.class;
        aMat = MT.DATA.Electric_T[1];   aRegistry.add("Electrolyzer ("                            +VN[1]+")", "Basic Machines"                      , 20091, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,   32, NBT_TEXTURE, "electrolyzer", NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, RM.Electrolyzer, NBT_INV_SIDE_IN, SBIT_U|SBIT_F|SBIT_B, NBT_INV_SIDE_AUTO_IN, SIDE_TOP, NBT_INV_SIDE_OUT, SBIT_R|SBIT_L, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_U|SBIT_F|SBIT_B, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_R|SBIT_L, NBT_TANK_SIDE_AUTO_OUT, SIDE_LEFT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_D, NBT_PARALLEL,  1, NBT_PARALLEL_DURATION, T), "SMS", "WwW", 'M', OP.casingMachine.dat(aMat), 'S', OP.wireGt01.dat(MT.Pt), 'W', MT.DATA.CABLES_01[1]);
        aMat = MT.DATA.Electric_T[2];   aRegistry.add("Electrolyzer ("                            +VN[2]+")", "Basic Machines"                      , 20092, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,  128, NBT_TEXTURE, "electrolyzer", NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, RM.Electrolyzer, NBT_INV_SIDE_IN, SBIT_U|SBIT_F|SBIT_B, NBT_INV_SIDE_AUTO_IN, SIDE_TOP, NBT_INV_SIDE_OUT, SBIT_R|SBIT_L, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_U|SBIT_F|SBIT_B, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_R|SBIT_L, NBT_TANK_SIDE_AUTO_OUT, SIDE_LEFT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_D, NBT_PARALLEL,  2, NBT_PARALLEL_DURATION, T), "SMS", "WwW", 'M', OP.casingMachine.dat(aMat), 'S', OP.wireGt01.dat(MT.Pt), 'W', MT.DATA.CABLES_01[2]);
        aMat = MT.DATA.Electric_T[3];   aRegistry.add("Electrolyzer ("                            +VN[3]+")", "Basic Machines"                      , 20093, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,  512, NBT_TEXTURE, "electrolyzer", NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, RM.Electrolyzer, NBT_INV_SIDE_IN, SBIT_U|SBIT_F|SBIT_B, NBT_INV_SIDE_AUTO_IN, SIDE_TOP, NBT_INV_SIDE_OUT, SBIT_R|SBIT_L, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_U|SBIT_F|SBIT_B, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_R|SBIT_L, NBT_TANK_SIDE_AUTO_OUT, SIDE_LEFT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_D, NBT_PARALLEL,  4, NBT_PARALLEL_DURATION, T), "SMS", "WwW", 'M', OP.casingMachine.dat(aMat), 'S', OP.wireGt01.dat(MT.Pt), 'W', MT.DATA.CABLES_01[3]);
        aMat = MT.DATA.Electric_T[4];   aRegistry.add("Electrolyzer ("                            +VN[4]+")", "Basic Machines"                      , 20094, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT, 2048, NBT_TEXTURE, "electrolyzer", NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, RM.Electrolyzer, NBT_INV_SIDE_IN, SBIT_U|SBIT_F|SBIT_B, NBT_INV_SIDE_AUTO_IN, SIDE_TOP, NBT_INV_SIDE_OUT, SBIT_R|SBIT_L, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_U|SBIT_F|SBIT_B, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_R|SBIT_L, NBT_TANK_SIDE_AUTO_OUT, SIDE_LEFT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_D, NBT_PARALLEL,  8, NBT_PARALLEL_DURATION, T), "SMS", "WwW", 'M', OP.casingMachine.dat(aMat), 'S', OP.wireGt01.dat(MT.Pt), 'W', MT.DATA.CABLES_01[4]);
        aMat = MT.DATA.Electric_T[5];   aRegistry.add("Electrolyzer ("                            +VN[5]+")", "Basic Machines"                      , 20095, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT, 8192, NBT_TEXTURE, "electrolyzer", NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, RM.Electrolyzer, NBT_INV_SIDE_IN, SBIT_U|SBIT_F|SBIT_B, NBT_INV_SIDE_AUTO_IN, SIDE_TOP, NBT_INV_SIDE_OUT, SBIT_R|SBIT_L, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_U|SBIT_F|SBIT_B, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_R|SBIT_L, NBT_TANK_SIDE_AUTO_OUT, SIDE_LEFT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_D, NBT_PARALLEL, 16, NBT_PARALLEL_DURATION, T), "SMS", "WwW", 'M', OP.casingMachine.dat(aMat), 'S', OP.wireGt01.dat(MT.Pt), 'W', MT.DATA.CABLES_01[5]);

        aClass = MultiTileEntityBasicMachine_CH.class;
        aMat = MT.DATA.Kinetic_T[1];    aRegistry.add("Compressor ("                    +aMat.getLocal()+")", "Basic Machines"                      , 20101, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   7.0F, NBT_RESISTANCE,   7.0F, NBT_INPUT,   32, NBT_TEXTURE, "compressor", NBT_ENERGY_ACCEPTED, TD.Energy.KU, NBT_RECIPEMAP, RM.Compressor, NBT_INV_SIDE_IN, SBIT_U, NBT_INV_SIDE_AUTO_IN, SIDE_TOP, NBT_INV_SIDE_OUT, SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_L, NBT_PARALLEL, 4, NBT_PARALLEL_DURATION, T), "PPR", "wMS", 'M', OP.casingMachineDouble.dat(aMat), 'P', OP.plateQuintuple.dat(aMat), 'S', OP.spring.dat(aMat), 'R', OP.stick.dat(aMat));
        aMat = MT.DATA.Kinetic_T[2];    aRegistry.add("Compressor ("                    +aMat.getLocal()+")", "Basic Machines"                      , 20102, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_INPUT,  128, NBT_TEXTURE, "compressor", NBT_ENERGY_ACCEPTED, TD.Energy.KU, NBT_RECIPEMAP, RM.Compressor, NBT_INV_SIDE_IN, SBIT_U, NBT_INV_SIDE_AUTO_IN, SIDE_TOP, NBT_INV_SIDE_OUT, SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_L, NBT_PARALLEL, 8, NBT_PARALLEL_DURATION, T), "PPR", "wMS", 'M', OP.casingMachineDouble.dat(aMat), 'P', OP.plateQuintuple.dat(aMat), 'S', OP.spring.dat(aMat), 'R', OP.stick.dat(aMat));
        aMat = MT.DATA.Kinetic_T[3];    aRegistry.add("Compressor ("                    +aMat.getLocal()+")", "Basic Machines"                      , 20103, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   9.0F, NBT_RESISTANCE,   9.0F, NBT_INPUT,  512, NBT_TEXTURE, "compressor", NBT_ENERGY_ACCEPTED, TD.Energy.KU, NBT_RECIPEMAP, RM.Compressor, NBT_INV_SIDE_IN, SBIT_U, NBT_INV_SIDE_AUTO_IN, SIDE_TOP, NBT_INV_SIDE_OUT, SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_L, NBT_PARALLEL,16, NBT_PARALLEL_DURATION, T), "PPR", "wMS", 'M', OP.casingMachineDouble.dat(aMat), 'P', OP.plateQuintuple.dat(aMat), 'S', OP.spring.dat(aMat), 'R', OP.stick.dat(aMat));
        aMat = MT.DATA.Kinetic_T[4];    aRegistry.add("Compressor ("                    +aMat.getLocal()+")", "Basic Machines"                      , 20104, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  12.5F, NBT_RESISTANCE,  12.5F, NBT_INPUT, 2048, NBT_TEXTURE, "compressor", NBT_ENERGY_ACCEPTED, TD.Energy.KU, NBT_RECIPEMAP, RM.Compressor, NBT_INV_SIDE_IN, SBIT_U, NBT_INV_SIDE_AUTO_IN, SIDE_TOP, NBT_INV_SIDE_OUT, SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_L, NBT_PARALLEL,32, NBT_PARALLEL_DURATION, T), "PPR", "wMS", 'M', OP.casingMachineDouble.dat(aMat), 'P', OP.plateQuintuple.dat(aMat), 'S', OP.spring.dat(aMat), 'R', OP.stick.dat(aMat));

        aClass = MultiTileEntityBasicMachine_CH.class;
        aMat = MT.DATA.Kinetic_T[1];    aRegistry.add("Rolling Mill ("                  +aMat.getLocal()+")", "Basic Machines"                      , 20111, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   7.0F, NBT_RESISTANCE,   7.0F, NBT_INPUT,   32, NBT_TEXTURE, "rollingmill", NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_RECIPEMAP, RM.RollingMill, NBT_INV_SIDE_IN, SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B), "Gh", "M ", "Gw", 'M', OP.casingMachineDouble.dat(aMat), 'G', OP.gearGt.dat(aMat));
        aMat = MT.DATA.Kinetic_T[2];    aRegistry.add("Rolling Mill ("                  +aMat.getLocal()+")", "Basic Machines"                      , 20112, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_INPUT,  128, NBT_TEXTURE, "rollingmill", NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_RECIPEMAP, RM.RollingMill, NBT_INV_SIDE_IN, SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B), "Gh", "M ", "Gw", 'M', OP.casingMachineDouble.dat(aMat), 'G', OP.gearGt.dat(aMat));
        aMat = MT.DATA.Kinetic_T[3];    aRegistry.add("Rolling Mill ("                  +aMat.getLocal()+")", "Basic Machines"                      , 20113, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   9.0F, NBT_RESISTANCE,   9.0F, NBT_INPUT,  512, NBT_TEXTURE, "rollingmill", NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_RECIPEMAP, RM.RollingMill, NBT_INV_SIDE_IN, SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B), "Gh", "M ", "Gw", 'M', OP.casingMachineDouble.dat(aMat), 'G', OP.gearGt.dat(aMat));
        aMat = MT.DATA.Kinetic_T[4];    aRegistry.add("Rolling Mill ("                  +aMat.getLocal()+")", "Basic Machines"                      , 20114, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  12.5F, NBT_RESISTANCE,  12.5F, NBT_INPUT, 2048, NBT_TEXTURE, "rollingmill", NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_RECIPEMAP, RM.RollingMill, NBT_INV_SIDE_IN, SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B), "Gh", "M ", "Gw", 'M', OP.casingMachineDouble.dat(aMat), 'G', OP.gearGt.dat(aMat));

        aClass = MultiTileEntityBasicMachine_CH.class;
        aMat = MT.DATA.Kinetic_T[1];    aRegistry.add("Roll Bender ("                   +aMat.getLocal()+")", "Basic Machines"                      , 20121, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   7.0F, NBT_RESISTANCE,   7.0F, NBT_INPUT,   32, NBT_TEXTURE, "rollbender", NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_RECIPEMAP, RM.RollBender, NBT_INV_SIDE_IN, SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B), "wS ", "GMG", " Sh", 'M', OP.casingMachineDouble.dat(aMat), 'G', OP.gearGt.dat(aMat), 'S', OP.gearGtSmall.dat(aMat));
        aMat = MT.DATA.Kinetic_T[2];    aRegistry.add("Roll Bender ("                   +aMat.getLocal()+")", "Basic Machines"                      , 20122, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_INPUT,  128, NBT_TEXTURE, "rollbender", NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_RECIPEMAP, RM.RollBender, NBT_INV_SIDE_IN, SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B), "wS ", "GMG", " Sh", 'M', OP.casingMachineDouble.dat(aMat), 'G', OP.gearGt.dat(aMat), 'S', OP.gearGtSmall.dat(aMat));
        aMat = MT.DATA.Kinetic_T[3];    aRegistry.add("Roll Bender ("                   +aMat.getLocal()+")", "Basic Machines"                      , 20123, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   9.0F, NBT_RESISTANCE,   9.0F, NBT_INPUT,  512, NBT_TEXTURE, "rollbender", NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_RECIPEMAP, RM.RollBender, NBT_INV_SIDE_IN, SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B), "wS ", "GMG", " Sh", 'M', OP.casingMachineDouble.dat(aMat), 'G', OP.gearGt.dat(aMat), 'S', OP.gearGtSmall.dat(aMat));
        aMat = MT.DATA.Kinetic_T[4];    aRegistry.add("Roll Bender ("                   +aMat.getLocal()+")", "Basic Machines"                      , 20124, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  12.5F, NBT_RESISTANCE,  12.5F, NBT_INPUT, 2048, NBT_TEXTURE, "rollbender", NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_RECIPEMAP, RM.RollBender, NBT_INV_SIDE_IN, SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B), "wS ", "GMG", " Sh", 'M', OP.casingMachineDouble.dat(aMat), 'G', OP.gearGt.dat(aMat), 'S', OP.gearGtSmall.dat(aMat));

        aClass = MultiTileEntityBasicMachine_CH.class;
        aMat = MT.DATA.Kinetic_T[1];    aRegistry.add("Roll Former ("                   +aMat.getLocal()+")", "Basic Machines"                      , 20131, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   7.0F, NBT_RESISTANCE,   7.0F, NBT_INPUT,   32, NBT_TEXTURE, "rollformer", NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_RECIPEMAP, RM.RollFormer, NBT_INV_SIDE_IN, SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B), "wG ", "GMG", " Gh", 'M', OP.casingMachineDouble.dat(aMat), 'G', OP.gearGt.dat(aMat));
        aMat = MT.DATA.Kinetic_T[2];    aRegistry.add("Roll Former ("                   +aMat.getLocal()+")", "Basic Machines"                      , 20132, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_INPUT,  128, NBT_TEXTURE, "rollformer", NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_RECIPEMAP, RM.RollFormer, NBT_INV_SIDE_IN, SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B), "wG ", "GMG", " Gh", 'M', OP.casingMachineDouble.dat(aMat), 'G', OP.gearGt.dat(aMat));
        aMat = MT.DATA.Kinetic_T[3];    aRegistry.add("Roll Former ("                   +aMat.getLocal()+")", "Basic Machines"                      , 20133, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   9.0F, NBT_RESISTANCE,   9.0F, NBT_INPUT,  512, NBT_TEXTURE, "rollformer", NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_RECIPEMAP, RM.RollFormer, NBT_INV_SIDE_IN, SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B), "wG ", "GMG", " Gh", 'M', OP.casingMachineDouble.dat(aMat), 'G', OP.gearGt.dat(aMat));
        aMat = MT.DATA.Kinetic_T[4];    aRegistry.add("Roll Former ("                   +aMat.getLocal()+")", "Basic Machines"                      , 20134, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  12.5F, NBT_RESISTANCE,  12.5F, NBT_INPUT, 2048, NBT_TEXTURE, "rollformer", NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_RECIPEMAP, RM.RollFormer, NBT_INV_SIDE_IN, SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B), "wG ", "GMG", " Gh", 'M', OP.casingMachineDouble.dat(aMat), 'G', OP.gearGt.dat(aMat));

        aClass = MultiTileEntityBasicMachine_CH.class;
        aMat = MT.DATA.Kinetic_T[1];    aRegistry.add("Cluster Mill ("                  +aMat.getLocal()+")", "Basic Machines"                      , 20141, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   7.0F, NBT_RESISTANCE,   7.0F, NBT_INPUT,   32, NBT_TEXTURE, "clustermill", NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_RECIPEMAP, RM.ClusterMill, NBT_INV_SIDE_IN, SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B), "SSS", "wGh", "SMS", 'M', OP.casingMachineQuadruple.dat(aMat), 'G', OP.gearGt.dat(aMat), 'S', OP.gearGtSmall.dat(aMat));
        aMat = MT.DATA.Kinetic_T[2];    aRegistry.add("Cluster Mill ("                  +aMat.getLocal()+")", "Basic Machines"                      , 20142, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_INPUT,  128, NBT_TEXTURE, "clustermill", NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_RECIPEMAP, RM.ClusterMill, NBT_INV_SIDE_IN, SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B), "SSS", "wGh", "SMS", 'M', OP.casingMachineQuadruple.dat(aMat), 'G', OP.gearGt.dat(aMat), 'S', OP.gearGtSmall.dat(aMat));
        aMat = MT.DATA.Kinetic_T[3];    aRegistry.add("Cluster Mill ("                  +aMat.getLocal()+")", "Basic Machines"                      , 20143, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   9.0F, NBT_RESISTANCE,   9.0F, NBT_INPUT,  512, NBT_TEXTURE, "clustermill", NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_RECIPEMAP, RM.ClusterMill, NBT_INV_SIDE_IN, SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B), "SSS", "wGh", "SMS", 'M', OP.casingMachineQuadruple.dat(aMat), 'G', OP.gearGt.dat(aMat), 'S', OP.gearGtSmall.dat(aMat));
        aMat = MT.DATA.Kinetic_T[4];    aRegistry.add("Cluster Mill ("                  +aMat.getLocal()+")", "Basic Machines"                      , 20144, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  12.5F, NBT_RESISTANCE,  12.5F, NBT_INPUT, 2048, NBT_TEXTURE, "clustermill", NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_RECIPEMAP, RM.ClusterMill, NBT_INV_SIDE_IN, SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B), "SSS", "wGh", "SMS", 'M', OP.casingMachineQuadruple.dat(aMat), 'G', OP.gearGt.dat(aMat), 'S', OP.gearGtSmall.dat(aMat));

        aClass = MultiTileEntityBasicMachine_CH.class;
        aMat = MT.DATA.Kinetic_T[1];    aRegistry.add("Wiremill ("                      +aMat.getLocal()+")", "Basic Machines"                      , 20151, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   7.0F, NBT_RESISTANCE,   7.0F, NBT_INPUT,   32, NBT_TEXTURE, "wiremill", NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_RECIPEMAP, RM.Wiremill, NBT_INV_SIDE_IN, SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B), "SGS", "wMh", 'M', OP.casingMachine.dat(aMat), 'G', OP.gearGt.dat(aMat), 'S', OP.gearGtSmall.dat(aMat));
        aMat = MT.DATA.Kinetic_T[2];    aRegistry.add("Wiremill ("                      +aMat.getLocal()+")", "Basic Machines"                      , 20152, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_INPUT,  128, NBT_TEXTURE, "wiremill", NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_RECIPEMAP, RM.Wiremill, NBT_INV_SIDE_IN, SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B), "SGS", "wMh", 'M', OP.casingMachine.dat(aMat), 'G', OP.gearGt.dat(aMat), 'S', OP.gearGtSmall.dat(aMat));
        aMat = MT.DATA.Kinetic_T[3];    aRegistry.add("Wiremill ("                      +aMat.getLocal()+")", "Basic Machines"                      , 20153, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   9.0F, NBT_RESISTANCE,   9.0F, NBT_INPUT,  512, NBT_TEXTURE, "wiremill", NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_RECIPEMAP, RM.Wiremill, NBT_INV_SIDE_IN, SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B), "SGS", "wMh", 'M', OP.casingMachine.dat(aMat), 'G', OP.gearGt.dat(aMat), 'S', OP.gearGtSmall.dat(aMat));
        aMat = MT.DATA.Kinetic_T[4];    aRegistry.add("Wiremill ("                      +aMat.getLocal()+")", "Basic Machines"                      , 20154, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  12.5F, NBT_RESISTANCE,  12.5F, NBT_INPUT, 2048, NBT_TEXTURE, "wiremill", NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_RECIPEMAP, RM.Wiremill, NBT_INV_SIDE_IN, SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B), "SGS", "wMh", 'M', OP.casingMachine.dat(aMat), 'G', OP.gearGt.dat(aMat), 'S', OP.gearGtSmall.dat(aMat));

        aClass = MultiTileEntityBasicMachineElectric_CH.class;
        aMat = MT.DATA.Electric_T[1];   aRegistry.add("Canning Machine ("                         +VN[1]+")", "Basic Machines"                      , 20161, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,   32, NBT_TEXTURE, "canner", NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, RM.Canner, NBT_INV_SIDE_IN, SBIT_U|SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R|SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_U|SBIT_L, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_R|SBIT_D, NBT_TANK_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B, NBT_USE_OUTPUT_TANK, T, NBT_TANK_CAPACITY,   128000L), "wPh", "XMX", "CPW", 'M', OP.casingMachine.dat(aMat), 'X', IL.PUMPS[1], 'C', OD_CIRCUITS[1], 'W', MT.DATA.CABLES_01[1], 'P', OP.pipeTiny  .dat(MT.StainlessSteel));
        aMat = MT.DATA.Electric_T[2];   aRegistry.add("Canning Machine ("                         +VN[2]+")", "Basic Machines"                      , 20162, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,  128, NBT_TEXTURE, "canner", NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, RM.Canner, NBT_INV_SIDE_IN, SBIT_U|SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R|SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_U|SBIT_L, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_R|SBIT_D, NBT_TANK_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B, NBT_USE_OUTPUT_TANK, T, NBT_TANK_CAPACITY,   512000L), "wPh", "XMX", "CPW", 'M', OP.casingMachine.dat(aMat), 'X', IL.PUMPS[2], 'C', OD_CIRCUITS[2], 'W', MT.DATA.CABLES_01[2], 'P', OP.pipeSmall .dat(MT.StainlessSteel));
        aMat = MT.DATA.Electric_T[3];   aRegistry.add("Canning Machine ("                         +VN[3]+")", "Basic Machines"                      , 20163, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,  512, NBT_TEXTURE, "canner", NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, RM.Canner, NBT_INV_SIDE_IN, SBIT_U|SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R|SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_U|SBIT_L, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_R|SBIT_D, NBT_TANK_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B, NBT_USE_OUTPUT_TANK, T, NBT_TANK_CAPACITY,  2048000L), "wPh", "XMX", "CPW", 'M', OP.casingMachine.dat(aMat), 'X', IL.PUMPS[3], 'C', OD_CIRCUITS[3], 'W', MT.DATA.CABLES_01[3], 'P', OP.pipeMedium.dat(MT.StainlessSteel));
        aMat = MT.DATA.Electric_T[4];   aRegistry.add("Canning Machine ("                         +VN[4]+")", "Basic Machines"                      , 20164, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT, 2048, NBT_TEXTURE, "canner", NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, RM.Canner, NBT_INV_SIDE_IN, SBIT_U|SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R|SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_U|SBIT_L, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_R|SBIT_D, NBT_TANK_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B, NBT_USE_OUTPUT_TANK, T, NBT_TANK_CAPACITY,  8192000L), "wPh", "XMX", "CPW", 'M', OP.casingMachine.dat(aMat), 'X', IL.PUMPS[4], 'C', OD_CIRCUITS[4], 'W', MT.DATA.CABLES_01[4], 'P', OP.pipeLarge .dat(MT.StainlessSteel));
        aMat = MT.DATA.Electric_T[5];   aRegistry.add("Canning Machine ("                         +VN[5]+")", "Basic Machines"                      , 20165, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT, 8192, NBT_TEXTURE, "canner", NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, RM.Canner, NBT_INV_SIDE_IN, SBIT_U|SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R|SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_U|SBIT_L, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_R|SBIT_D, NBT_TANK_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B, NBT_USE_OUTPUT_TANK, T, NBT_TANK_CAPACITY, 32768000L), "wPh", "XMX", "CPW", 'M', OP.casingMachine.dat(aMat), 'X', IL.PUMPS[5], 'C', OD_CIRCUITS[5], 'W', MT.DATA.CABLES_01[5], 'P', OP.pipeHuge  .dat(MT.StainlessSteel));

        aClass = MultiTileEntityBasicMachine_CH.class;
        aMat = MT.DATA.Heat_T[1];       aRegistry.add("Roasting Oven ("                 +aMat.getLocal()+")", "Basic Machines"                      , 20171, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_INPUT,   32, NBT_TEXTURE, "roaster", NBT_ENERGY_ACCEPTED, TD.Energy.HU, NBT_RECIPEMAP, RM.Roasting, NBT_INV_SIDE_IN, SBIT_B|SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_B|SBIT_L, NBT_TANK_SIDE_AUTO_IN, SIDE_BACK, NBT_TANK_SIDE_OUT, SBIT_U, NBT_TANK_SIDE_AUTO_OUT, SIDE_TOP, NBT_ENERGY_ACCEPTED_SIDES, SBIT_D), "wPh", "PMP", "BCB", 'M', OP.casingMachine.dat(aMat), 'C', OP.plateDouble.dat(ANY.Cu), 'B', Blocks.brick_block, 'P', OP.pipeMedium.dat(aMat));
        aMat = MT.DATA.Heat_T[2];       aRegistry.add("Roasting Oven ("                 +aMat.getLocal()+")", "Basic Machines"                      , 20172, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,  128, NBT_TEXTURE, "roaster", NBT_ENERGY_ACCEPTED, TD.Energy.HU, NBT_RECIPEMAP, RM.Roasting, NBT_INV_SIDE_IN, SBIT_B|SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_B|SBIT_L, NBT_TANK_SIDE_AUTO_IN, SIDE_BACK, NBT_TANK_SIDE_OUT, SBIT_U, NBT_TANK_SIDE_AUTO_OUT, SIDE_TOP, NBT_ENERGY_ACCEPTED_SIDES, SBIT_D), "wPh", "PMP", "BCB", 'M', OP.casingMachine.dat(aMat), 'C', OP.plateDouble.dat(ANY.Cu), 'B', Blocks.brick_block, 'P', OP.pipeMedium.dat(aMat));
        aMat = MT.DATA.Heat_T[3];       aRegistry.add("Roasting Oven ("                 +aMat.getLocal()+")", "Basic Machines"                      , 20173, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   9.0F, NBT_RESISTANCE,   9.0F, NBT_INPUT,  512, NBT_TEXTURE, "roaster", NBT_ENERGY_ACCEPTED, TD.Energy.HU, NBT_RECIPEMAP, RM.Roasting, NBT_INV_SIDE_IN, SBIT_B|SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_B|SBIT_L, NBT_TANK_SIDE_AUTO_IN, SIDE_BACK, NBT_TANK_SIDE_OUT, SBIT_U, NBT_TANK_SIDE_AUTO_OUT, SIDE_TOP, NBT_ENERGY_ACCEPTED_SIDES, SBIT_D), "wPh", "PMP", "BCB", 'M', OP.casingMachine.dat(aMat), 'C', OP.plateDouble.dat(ANY.Cu), 'B', Blocks.brick_block, 'P', OP.pipeMedium.dat(aMat));
        aMat = MT.DATA.Heat_T[4];       aRegistry.add("Roasting Oven ("                 +aMat.getLocal()+")", "Basic Machines"                      , 20174, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  12.5F, NBT_RESISTANCE,  12.5F, NBT_INPUT, 2048, NBT_TEXTURE, "roaster", NBT_ENERGY_ACCEPTED, TD.Energy.HU, NBT_RECIPEMAP, RM.Roasting, NBT_INV_SIDE_IN, SBIT_B|SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_B|SBIT_L, NBT_TANK_SIDE_AUTO_IN, SIDE_BACK, NBT_TANK_SIDE_OUT, SBIT_U, NBT_TANK_SIDE_AUTO_OUT, SIDE_TOP, NBT_ENERGY_ACCEPTED_SIDES, SBIT_D), "wPh", "PMP", "BCB", 'M', OP.casingMachine.dat(aMat), 'C', OP.plateDouble.dat(ANY.Cu), 'B', Blocks.brick_block, 'P', OP.pipeMedium.dat(aMat));

        aClass = MultiTileEntityBasicMachine_CH.class;
        aMat = MT.DATA.Kinetic_T[1];    aRegistry.add("Mixer ("                         +aMat.getLocal()+")", "Basic Machines"                      , 20181, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   7.0F, NBT_RESISTANCE,   7.0F, NBT_INPUT,   32, NBT_TEXTURE, "mixer", NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_RECIPEMAP, RM.Mixer, NBT_INV_SIDE_IN, SBIT_L|SBIT_U, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R|SBIT_B, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_L|SBIT_U, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_R|SBIT_B, NBT_TANK_SIDE_AUTO_OUT, SIDE_BACK, NBT_ENERGY_ACCEPTED_SIDES, SBIT_D, NBT_PARALLEL, 4, NBT_PARALLEL_DURATION, T), "PMP", "PRP", "hSw", 'M', OP.casingMachine.dat(aMat), 'S', OP.stick.dat(aMat), 'R', OP.rotor.dat(MT.StainlessSteel), 'P', OP.plate.dat(MT.StainlessSteel));
        aMat = MT.DATA.Kinetic_T[2];    aRegistry.add("Mixer ("                         +aMat.getLocal()+")", "Basic Machines"                      , 20182, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_INPUT,  128, NBT_TEXTURE, "mixer", NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_RECIPEMAP, RM.Mixer, NBT_INV_SIDE_IN, SBIT_L|SBIT_U, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R|SBIT_B, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_L|SBIT_U, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_R|SBIT_B, NBT_TANK_SIDE_AUTO_OUT, SIDE_BACK, NBT_ENERGY_ACCEPTED_SIDES, SBIT_D, NBT_PARALLEL, 8, NBT_PARALLEL_DURATION, T), "PMP", "PRP", "hSw", 'M', OP.casingMachine.dat(aMat), 'S', OP.stick.dat(aMat), 'R', OP.rotor.dat(MT.StainlessSteel), 'P', OP.plateDouble.dat(MT.StainlessSteel));
        aMat = MT.DATA.Kinetic_T[3];    aRegistry.add("Mixer ("                         +aMat.getLocal()+")", "Basic Machines"                      , 20183, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   9.0F, NBT_RESISTANCE,   9.0F, NBT_INPUT,  512, NBT_TEXTURE, "mixer", NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_RECIPEMAP, RM.Mixer, NBT_INV_SIDE_IN, SBIT_L|SBIT_U, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R|SBIT_B, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_L|SBIT_U, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_R|SBIT_B, NBT_TANK_SIDE_AUTO_OUT, SIDE_BACK, NBT_ENERGY_ACCEPTED_SIDES, SBIT_D, NBT_PARALLEL,16, NBT_PARALLEL_DURATION, T), "PMP", "PRP", "hSw", 'M', OP.casingMachine.dat(aMat), 'S', OP.stick.dat(aMat), 'R', OP.rotor.dat(MT.StainlessSteel), 'P', OP.plateTriple.dat(MT.StainlessSteel));
        aMat = MT.DATA.Kinetic_T[4];    aRegistry.add("Mixer ("                         +aMat.getLocal()+")", "Basic Machines"                      , 20184, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  12.5F, NBT_RESISTANCE,  12.5F, NBT_INPUT, 2048, NBT_TEXTURE, "mixer", NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_RECIPEMAP, RM.Mixer, NBT_INV_SIDE_IN, SBIT_L|SBIT_U, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R|SBIT_B, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_L|SBIT_U, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_R|SBIT_B, NBT_TANK_SIDE_AUTO_OUT, SIDE_BACK, NBT_ENERGY_ACCEPTED_SIDES, SBIT_D, NBT_PARALLEL,32, NBT_PARALLEL_DURATION, T), "PMP", "PRP", "hSw", 'M', OP.casingMachine.dat(aMat), 'S', OP.stick.dat(aMat), 'R', OP.rotor.dat(MT.StainlessSteel), 'P', OP.plateQuadruple.dat(MT.StainlessSteel));

        aClass = MultiTileEntityBasicMachine_CH.class;
        aMat = MT.DATA.Heat_T[1];       aRegistry.add("Distillery ("                    +aMat.getLocal()+")", "Basic Machines"                      , 20191, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_INPUT,   32, NBT_TEXTURE, "distillery", NBT_ENERGY_ACCEPTED, TD.Energy.HU, NBT_RECIPEMAP, RM.Distillery, NBT_INV_SIDE_IN, SBIT_U|SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_U|SBIT_L, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_B, NBT_TANK_SIDE_AUTO_OUT, SIDE_BACK, NBT_ENERGY_ACCEPTED_SIDES, SBIT_D, NBT_CHEAP_OVERCLOCKING, T, NBT_PARALLEL,  8, NBT_PARALLEL_DURATION, T), "GPG", "WMW", "hCw", 'M', OP.casingMachine.dat(aMat), 'W', OP.wireGt02.dat(MT.Constantan), 'C', OP.plateDouble.dat(ANY.Cu), 'G', OD.blockGlassColorless, 'P', OP.pipeTiny  .dat(MT.StainlessSteel));
        aMat = MT.DATA.Heat_T[2];       aRegistry.add("Distillery ("                    +aMat.getLocal()+")", "Basic Machines"                      , 20192, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,  128, NBT_TEXTURE, "distillery", NBT_ENERGY_ACCEPTED, TD.Energy.HU, NBT_RECIPEMAP, RM.Distillery, NBT_INV_SIDE_IN, SBIT_U|SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_U|SBIT_L, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_B, NBT_TANK_SIDE_AUTO_OUT, SIDE_BACK, NBT_ENERGY_ACCEPTED_SIDES, SBIT_D, NBT_CHEAP_OVERCLOCKING, T, NBT_PARALLEL, 16, NBT_PARALLEL_DURATION, T), "GPG", "WMW", "hCw", 'M', OP.casingMachine.dat(aMat), 'W', OP.wireGt04.dat(MT.Kanthal   ), 'C', OP.plateDouble.dat(ANY.Cu), 'G', OD.blockGlassColorless, 'P', OP.pipeSmall .dat(MT.StainlessSteel));
        aMat = MT.DATA.Heat_T[3];       aRegistry.add("Distillery ("                    +aMat.getLocal()+")", "Basic Machines"                      , 20193, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   9.0F, NBT_RESISTANCE,   9.0F, NBT_INPUT,  512, NBT_TEXTURE, "distillery", NBT_ENERGY_ACCEPTED, TD.Energy.HU, NBT_RECIPEMAP, RM.Distillery, NBT_INV_SIDE_IN, SBIT_U|SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_U|SBIT_L, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_B, NBT_TANK_SIDE_AUTO_OUT, SIDE_BACK, NBT_ENERGY_ACCEPTED_SIDES, SBIT_D, NBT_CHEAP_OVERCLOCKING, T, NBT_PARALLEL, 32, NBT_PARALLEL_DURATION, T), "GPG", "WMW", "hCw", 'M', OP.casingMachine.dat(aMat), 'W', OP.wireGt08.dat(MT.Nichrome  ), 'C', OP.plateDouble.dat(ANY.Cu), 'G', OD.blockGlassColorless, 'P', OP.pipeMedium.dat(MT.StainlessSteel));
        aMat = MT.DATA.Heat_T[4];       aRegistry.add("Distillery ("                    +aMat.getLocal()+")", "Basic Machines"                      , 20194, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  12.5F, NBT_RESISTANCE,  12.5F, NBT_INPUT, 2048, NBT_TEXTURE, "distillery", NBT_ENERGY_ACCEPTED, TD.Energy.HU, NBT_RECIPEMAP, RM.Distillery, NBT_INV_SIDE_IN, SBIT_U|SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_U|SBIT_L, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_B, NBT_TANK_SIDE_AUTO_OUT, SIDE_BACK, NBT_ENERGY_ACCEPTED_SIDES, SBIT_D, NBT_CHEAP_OVERCLOCKING, T, NBT_PARALLEL, 64, NBT_PARALLEL_DURATION, T), "GPG", "WMW", "hCw", 'M', OP.casingMachine.dat(aMat), 'W', OP.wireGt16.dat(MT.SiC       ), 'C', OP.plateDouble.dat(ANY.Cu), 'G', OD.blockGlassColorless, 'P', OP.pipeLarge .dat(MT.StainlessSteel));
    }

    protected static void machines2(MultiTileEntityRegistry aRegistry, MultiTileEntityBlock aMetal, MultiTileEntityBlock aMetalChips, MultiTileEntityBlock aMetalWires, MultiTileEntityBlock aMachine, MultiTileEntityBlock aWooden, MultiTileEntityBlock aBush, MultiTileEntityBlock aStone, MultiTileEntityBlock aWool, MultiTileEntityBlock aTNT, MultiTileEntityBlock aHive, MultiTileEntityBlock aUtilMetal, MultiTileEntityBlock aUtilStone, MultiTileEntityBlock aUtilWood, MultiTileEntityBlock aUtilWool, OreDictMaterial aMat, Class<? extends TileEntity> aClass) {
        aClass = MultiTileEntityBasicMachine_CH.class;
        aMat = MT.DATA.Heat_T[1];       aRegistry.add("Low Heat Extruder ("             +aMat.getLocal()+")", "Basic Machines"                      , 20201, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_INPUT,   32, NBT_TEXTURE, "extruder", NBT_ENERGY_ACCEPTED, TD.Energy.HU, NBT_RECIPEMAP, RM.Extruder, NBT_INV_SIDE_IN, SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_D), "GPw", "PMS", "GPD", 'M', OP.casingMachineDouble.dat(aMat), 'S', OP.toolHeadBuzzSaw.dat(ANY.Steel          ), 'D', OP.dust.dat(ANY.Diamond), 'G', OP.gearGt.dat(aMat), 'P', OP.plate            .dat(ANY.Steel));
        aMat = MT.DATA.Heat_T[2];       aRegistry.add("Extruder ("                      +aMat.getLocal()+")", "Basic Machines"                      , 20202, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,  128, NBT_TEXTURE, "extruder", NBT_ENERGY_ACCEPTED, TD.Energy.HU, NBT_RECIPEMAP, RM.Extruder, NBT_INV_SIDE_IN, SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_D), "GPw", "PMS", "GPD", 'M', OP.casingMachineDouble.dat(aMat), 'S', OP.toolHeadBuzzSaw.dat(MT.TungstenCarbide ), 'D', OP.dust.dat(ANY.Diamond), 'G', OP.gearGt.dat(aMat), 'P', OP.plateDouble      .dat(MT.TungstenCarbide));
        aMat = MT.DATA.Heat_T[3];       aRegistry.add("Extruder ("                      +aMat.getLocal()+")", "Basic Machines"                      , 20203, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   9.0F, NBT_RESISTANCE,   9.0F, NBT_INPUT,  512, NBT_TEXTURE, "extruder", NBT_ENERGY_ACCEPTED, TD.Energy.HU, NBT_RECIPEMAP, RM.Extruder, NBT_INV_SIDE_IN, SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_D), "GPw", "PMS", "GPD", 'M', OP.casingMachineDouble.dat(aMat), 'S', OP.toolHeadBuzzSaw.dat(MT.TungstenCarbide ), 'D', OP.dust.dat(ANY.Diamond), 'G', OP.gearGt.dat(aMat), 'P', OP.plateTriple      .dat(MT.TungstenCarbide));
        aMat = MT.DATA.Heat_T[4];       aRegistry.add("Extruder ("                      +aMat.getLocal()+")", "Basic Machines"                      , 20204, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  12.5F, NBT_RESISTANCE,  12.5F, NBT_INPUT, 2048, NBT_TEXTURE, "extruder", NBT_ENERGY_ACCEPTED, TD.Energy.HU, NBT_RECIPEMAP, RM.Extruder, NBT_INV_SIDE_IN, SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_D), "GPw", "PMS", "GPD", 'M', OP.casingMachineDouble.dat(aMat), 'S', OP.toolHeadBuzzSaw.dat(MT.TungstenCarbide ), 'D', OP.dust.dat(ANY.Diamond), 'G', OP.gearGt.dat(aMat), 'P', OP.plateQuadruple   .dat(MT.TungstenCarbide));

        aClass = MultiTileEntityBasicMachine_CH.class;
        aMat = MT.DATA.Kinetic_T[1];    aRegistry.add("Loom ("                          +aMat.getLocal()+")", "Basic Machines"                      , 20211, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   7.0F, NBT_RESISTANCE,   7.0F, NBT_INPUT,   32, NBT_TEXTURE, "loom", NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_RECIPEMAP, RM.Loom, NBT_INV_SIDE_IN, SBIT_U, NBT_INV_SIDE_AUTO_IN, SIDE_TOP, NBT_INV_SIDE_OUT, SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_L|SBIT_R), "ShS", "GMG", "SwS", 'M', OP.casingMachine.dat(aMat), 'G', OP.gearGt.dat(aMat), 'S', OP.stickLong.dat(aMat));
        aMat = MT.DATA.Kinetic_T[2];    aRegistry.add("Loom ("                          +aMat.getLocal()+")", "Basic Machines"                      , 20212, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_INPUT,  128, NBT_TEXTURE, "loom", NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_RECIPEMAP, RM.Loom, NBT_INV_SIDE_IN, SBIT_U, NBT_INV_SIDE_AUTO_IN, SIDE_TOP, NBT_INV_SIDE_OUT, SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_L|SBIT_R), "ShS", "GMG", "SwS", 'M', OP.casingMachine.dat(aMat), 'G', OP.gearGt.dat(aMat), 'S', OP.stickLong.dat(aMat));
        aMat = MT.DATA.Kinetic_T[3];    aRegistry.add("Loom ("                          +aMat.getLocal()+")", "Basic Machines"                      , 20213, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   9.0F, NBT_RESISTANCE,   9.0F, NBT_INPUT,  512, NBT_TEXTURE, "loom", NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_RECIPEMAP, RM.Loom, NBT_INV_SIDE_IN, SBIT_U, NBT_INV_SIDE_AUTO_IN, SIDE_TOP, NBT_INV_SIDE_OUT, SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_L|SBIT_R), "ShS", "GMG", "SwS", 'M', OP.casingMachine.dat(aMat), 'G', OP.gearGt.dat(aMat), 'S', OP.stickLong.dat(aMat));
        aMat = MT.DATA.Kinetic_T[4];    aRegistry.add("Loom ("                          +aMat.getLocal()+")", "Basic Machines"                      , 20214, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  12.5F, NBT_RESISTANCE,  12.5F, NBT_INPUT, 2048, NBT_TEXTURE, "loom", NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_RECIPEMAP, RM.Loom, NBT_INV_SIDE_IN, SBIT_U, NBT_INV_SIDE_AUTO_IN, SIDE_TOP, NBT_INV_SIDE_OUT, SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_L|SBIT_R), "ShS", "GMG", "SwS", 'M', OP.casingMachine.dat(aMat), 'G', OP.gearGt.dat(aMat), 'S', OP.stickLong.dat(aMat));

        aClass = MultiTileEntityBasicMachine_CH.class;
        aMat = MT.DATA.Electric_T[1];   aRegistry.add("Polarizer ("                     +aMat.getLocal()+")", "Basic Machines"                      , 20221, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,   32, NBT_TEXTURE, "polarizer", NBT_ENERGY_ACCEPTED, TD.Energy.MU, NBT_RECIPEMAP, RM.Polarizer, NBT_INV_SIDE_IN, SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_U|SBIT_D), "TwT", "PMP", "TdT", 'M', OP.casingMachine.dat(aMat), 'P', OP.plate.dat(aMat), 'T', OP.screw.dat(aMat));
        aMat = MT.DATA.Electric_T[2];   aRegistry.add("Polarizer ("                     +aMat.getLocal()+")", "Basic Machines"                      , 20222, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,  128, NBT_TEXTURE, "polarizer", NBT_ENERGY_ACCEPTED, TD.Energy.MU, NBT_RECIPEMAP, RM.Polarizer, NBT_INV_SIDE_IN, SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_U|SBIT_D), "TwT", "PMP", "TdT", 'M', OP.casingMachine.dat(aMat), 'P', OP.plate.dat(aMat), 'T', OP.screw.dat(aMat));
        aMat = MT.DATA.Electric_T[3];   aRegistry.add("Polarizer ("                     +aMat.getLocal()+")", "Basic Machines"                      , 20223, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,  512, NBT_TEXTURE, "polarizer", NBT_ENERGY_ACCEPTED, TD.Energy.MU, NBT_RECIPEMAP, RM.Polarizer, NBT_INV_SIDE_IN, SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_U|SBIT_D), "TwT", "PMP", "TdT", 'M', OP.casingMachine.dat(aMat), 'P', OP.plate.dat(aMat), 'T', OP.screw.dat(aMat));
        aMat = MT.DATA.Electric_T[4];   aRegistry.add("Polarizer ("                     +aMat.getLocal()+")", "Basic Machines"                      , 20224, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT, 2048, NBT_TEXTURE, "polarizer", NBT_ENERGY_ACCEPTED, TD.Energy.MU, NBT_RECIPEMAP, RM.Polarizer, NBT_INV_SIDE_IN, SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_U|SBIT_D), "TwT", "PMP", "TdT", 'M', OP.casingMachine.dat(aMat), 'P', OP.plate.dat(aMat), 'T', OP.screw.dat(aMat));
        aMat = MT.DATA.Electric_T[5];   aRegistry.add("Polarizer ("                     +aMat.getLocal()+")", "Basic Machines"                      , 20225, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT, 8192, NBT_TEXTURE, "polarizer", NBT_ENERGY_ACCEPTED, TD.Energy.MU, NBT_RECIPEMAP, RM.Polarizer, NBT_INV_SIDE_IN, SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_U|SBIT_D), "TwT", "PMP", "TdT", 'M', OP.casingMachine.dat(aMat), 'P', OP.plate.dat(aMat), 'T', OP.screw.dat(aMat));

        aClass = MultiTileEntityBasicMachine_CH.class;
        aMat = MT.DATA.Kinetic_T[1];    aRegistry.add("Press ("                         +aMat.getLocal()+")", "Basic Machines"                      , 20231, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   7.0F, NBT_RESISTANCE,   7.0F, NBT_INPUT,   32, NBT_TEXTURE, "press", NBT_ENERGY_ACCEPTED, TD.Energy.KU, NBT_RECIPEMAP, RM.Press, NBT_INV_SIDE_IN, SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_U, NBT_PARALLEL, 4, NBT_PARALLEL_DURATION, T), "RS", "PM", "Pw", 'M', OP.casingMachine.dat(aMat), 'P', OP.plateDouble.dat(aMat), 'S', OP.spring.dat(aMat), 'R', OP.stick.dat(aMat));
        aMat = MT.DATA.Kinetic_T[2];    aRegistry.add("Press ("                         +aMat.getLocal()+")", "Basic Machines"                      , 20232, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_INPUT,  128, NBT_TEXTURE, "press", NBT_ENERGY_ACCEPTED, TD.Energy.KU, NBT_RECIPEMAP, RM.Press, NBT_INV_SIDE_IN, SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_U, NBT_PARALLEL, 8, NBT_PARALLEL_DURATION, T), "RS", "PM", "Pw", 'M', OP.casingMachine.dat(aMat), 'P', OP.plateDouble.dat(aMat), 'S', OP.spring.dat(aMat), 'R', OP.stick.dat(aMat));
        aMat = MT.DATA.Kinetic_T[3];    aRegistry.add("Press ("                         +aMat.getLocal()+")", "Basic Machines"                      , 20233, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   9.0F, NBT_RESISTANCE,   9.0F, NBT_INPUT,  512, NBT_TEXTURE, "press", NBT_ENERGY_ACCEPTED, TD.Energy.KU, NBT_RECIPEMAP, RM.Press, NBT_INV_SIDE_IN, SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_U, NBT_PARALLEL,16, NBT_PARALLEL_DURATION, T), "RS", "PM", "Pw", 'M', OP.casingMachine.dat(aMat), 'P', OP.plateDouble.dat(aMat), 'S', OP.spring.dat(aMat), 'R', OP.stick.dat(aMat));
        aMat = MT.DATA.Kinetic_T[4];    aRegistry.add("Press ("                         +aMat.getLocal()+")", "Basic Machines"                      , 20234, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  12.5F, NBT_RESISTANCE,  12.5F, NBT_INPUT, 2048, NBT_TEXTURE, "press", NBT_ENERGY_ACCEPTED, TD.Energy.KU, NBT_RECIPEMAP, RM.Press, NBT_INV_SIDE_IN, SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_U, NBT_PARALLEL,32, NBT_PARALLEL_DURATION, T), "RS", "PM", "Pw", 'M', OP.casingMachine.dat(aMat), 'P', OP.plateDouble.dat(aMat), 'S', OP.spring.dat(aMat), 'R', OP.stick.dat(aMat));

        aClass = MultiTileEntityBasicMachine_CH.class;
        aMat = MT.DATA.Heat_T[1];       aRegistry.add("Smelter ("                       +aMat.getLocal()+")", "Basic Machines"                      , 20241, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_INPUT,   32, NBT_TEXTURE, "smelter", NBT_ENERGY_ACCEPTED, TD.Energy.HU, NBT_RECIPEMAP, RM.Smelter, NBT_CHEAP_OVERCLOCKING, T, NBT_INV_SIDE_IN, SBIT_U, NBT_INV_SIDE_AUTO_IN, SIDE_TOP, NBT_INV_SIDE_OUT, SBIT_L, NBT_INV_SIDE_AUTO_OUT, SIDE_LEFT, NBT_TANK_SIDE_IN, SBIT_U, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_R, NBT_TANK_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_D, NBT_PARALLEL, 1000, NBT_PARALLEL_DURATION, T), "wUh", "PMP", "BCB", 'M', OP.casingMachine.dat(aMat), 'U', aRegistry.getItem(1024), 'C', OP.plateDouble.dat(ANY.Cu), 'B', Blocks.brick_block, 'P', OP.pipeMedium.dat(aMat));
        aMat = MT.DATA.Heat_T[2];       aRegistry.add("Smelter ("                       +aMat.getLocal()+")", "Basic Machines"                      , 20242, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,  128, NBT_TEXTURE, "smelter", NBT_ENERGY_ACCEPTED, TD.Energy.HU, NBT_RECIPEMAP, RM.Smelter, NBT_CHEAP_OVERCLOCKING, T, NBT_INV_SIDE_IN, SBIT_U, NBT_INV_SIDE_AUTO_IN, SIDE_TOP, NBT_INV_SIDE_OUT, SBIT_L, NBT_INV_SIDE_AUTO_OUT, SIDE_LEFT, NBT_TANK_SIDE_IN, SBIT_U, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_R, NBT_TANK_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_D, NBT_PARALLEL, 1000, NBT_PARALLEL_DURATION, T), "wUh", "PMP", "BCB", 'M', OP.casingMachine.dat(aMat), 'U', aRegistry.getItem(1019), 'C', OP.plateDouble.dat(ANY.Cu), 'B', Blocks.brick_block, 'P', OP.pipeMedium.dat(aMat));
        aMat = MT.DATA.Heat_T[3];       aRegistry.add("Smelter ("                       +aMat.getLocal()+")", "Basic Machines"                      , 20243, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   9.0F, NBT_RESISTANCE,   9.0F, NBT_INPUT,  512, NBT_TEXTURE, "smelter", NBT_ENERGY_ACCEPTED, TD.Energy.HU, NBT_RECIPEMAP, RM.Smelter, NBT_CHEAP_OVERCLOCKING, T, NBT_INV_SIDE_IN, SBIT_U, NBT_INV_SIDE_AUTO_IN, SIDE_TOP, NBT_INV_SIDE_OUT, SBIT_L, NBT_INV_SIDE_AUTO_OUT, SIDE_LEFT, NBT_TANK_SIDE_IN, SBIT_U, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_R, NBT_TANK_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_D, NBT_PARALLEL, 1000, NBT_PARALLEL_DURATION, T), "wUh", "PMP", "BCB", 'M', OP.casingMachine.dat(aMat), 'U', aRegistry.getItem(1019), 'C', OP.plateDouble.dat(ANY.Cu), 'B', Blocks.brick_block, 'P', OP.pipeMedium.dat(aMat));
        aMat = MT.DATA.Heat_T[4];       aRegistry.add("Smelter ("                       +aMat.getLocal()+")", "Basic Machines"                      , 20244, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  12.5F, NBT_RESISTANCE,  12.5F, NBT_INPUT, 2048, NBT_TEXTURE, "smelter", NBT_ENERGY_ACCEPTED, TD.Energy.HU, NBT_RECIPEMAP, RM.Smelter, NBT_CHEAP_OVERCLOCKING, T, NBT_INV_SIDE_IN, SBIT_U, NBT_INV_SIDE_AUTO_IN, SIDE_TOP, NBT_INV_SIDE_OUT, SBIT_L, NBT_INV_SIDE_AUTO_OUT, SIDE_LEFT, NBT_TANK_SIDE_IN, SBIT_U, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_R, NBT_TANK_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_D, NBT_PARALLEL, 1000, NBT_PARALLEL_DURATION, T), "wUh", "PMP", "BCB", 'M', OP.casingMachine.dat(aMat), 'U', aRegistry.getItem(1043), 'C', OP.plateDouble.dat(ANY.Cu), 'B', Blocks.brick_block, 'P', OP.pipeMedium.dat(aMat));

        aClass = MultiTileEntityBasicMachine_CH.class;
        aMat = MT.DATA.Heat_T[1];       aRegistry.add("Crystallisation Crucible ("      +aMat.getLocal()+")", "Basic Machines"                      , 20251, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_INPUT,   32, NBT_TEXTURE, "crystallisationcrucible", NBT_ENERGY_ACCEPTED, TD.Energy.HU, NBT_RECIPEMAP, RM.CrystallisationCrucible, NBT_INV_SIDE_IN, SBIT_L|SBIT_B|SBIT_U, NBT_INV_SIDE_AUTO_IN, SIDE_TOP, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_L|SBIT_B|SBIT_U, NBT_TANK_SIDE_AUTO_IN, SIDE_LEFT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_D), "wUh", "PMP", "BCB", 'M', OP.casingMachineDouble.dat(aMat), 'U', aRegistry.getItem(1018), 'C', OP.plateDouble.dat(ANY.Cu), 'B', Blocks.brick_block, 'P', OP.pipeMedium.dat(aMat));
        aMat = MT.DATA.Heat_T[2];       aRegistry.add("Crystallisation Crucible ("      +aMat.getLocal()+")", "Basic Machines"                      , 20252, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,  128, NBT_TEXTURE, "crystallisationcrucible", NBT_ENERGY_ACCEPTED, TD.Energy.HU, NBT_RECIPEMAP, RM.CrystallisationCrucible, NBT_INV_SIDE_IN, SBIT_L|SBIT_B|SBIT_U, NBT_INV_SIDE_AUTO_IN, SIDE_TOP, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_L|SBIT_B|SBIT_U, NBT_TANK_SIDE_AUTO_IN, SIDE_LEFT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_D), "wUh", "PMP", "BCB", 'M', OP.casingMachineDouble.dat(aMat), 'U', aRegistry.getItem(1039), 'C', OP.plateDouble.dat(ANY.Cu), 'B', Blocks.brick_block, 'P', OP.pipeMedium.dat(aMat));
        aMat = MT.DATA.Heat_T[3];       aRegistry.add("Crystallisation Crucible ("      +aMat.getLocal()+")", "Basic Machines"                      , 20253, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   9.0F, NBT_RESISTANCE,   9.0F, NBT_INPUT,  512, NBT_TEXTURE, "crystallisationcrucible", NBT_ENERGY_ACCEPTED, TD.Energy.HU, NBT_RECIPEMAP, RM.CrystallisationCrucible, NBT_INV_SIDE_IN, SBIT_L|SBIT_B|SBIT_U, NBT_INV_SIDE_AUTO_IN, SIDE_TOP, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_L|SBIT_B|SBIT_U, NBT_TANK_SIDE_AUTO_IN, SIDE_LEFT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_D), "wUh", "PMP", "BCB", 'M', OP.casingMachineDouble.dat(aMat), 'U', aRegistry.getItem(1039), 'C', OP.plateDouble.dat(ANY.Cu), 'B', Blocks.brick_block, 'P', OP.pipeMedium.dat(aMat));
        aMat = MT.DATA.Heat_T[4];       aRegistry.add("Crystallisation Crucible ("      +aMat.getLocal()+")", "Basic Machines"                      , 20254, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  12.5F, NBT_RESISTANCE,  12.5F, NBT_INPUT, 2048, NBT_TEXTURE, "crystallisationcrucible", NBT_ENERGY_ACCEPTED, TD.Energy.HU, NBT_RECIPEMAP, RM.CrystallisationCrucible, NBT_INV_SIDE_IN, SBIT_L|SBIT_B|SBIT_U, NBT_INV_SIDE_AUTO_IN, SIDE_TOP, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_L|SBIT_B|SBIT_U, NBT_TANK_SIDE_AUTO_IN, SIDE_LEFT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_D), "wUh", "PMP", "BCB", 'M', OP.casingMachineDouble.dat(aMat), 'U', aRegistry.getItem(1039), 'C', OP.plateDouble.dat(ANY.Cu), 'B', Blocks.brick_block, 'P', OP.pipeMedium.dat(aMat));

        aClass = MultiTileEntityBasicMachineElectric_CH.class;
        aMat = MT.DATA.Electric_T[1];   aRegistry.add("Injector ("                                +VN[1]+")", "Basic Machines"                      , 20261, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,   32, NBT_TEXTURE, "injector", NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, RM.Injector, NBT_INV_SIDE_IN, SBIT_U|SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R|SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_U|SBIT_L, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_R|SBIT_D, NBT_TANK_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B), "XPw", "CMW", 'M', OP.casingMachine.dat(aMat), 'X', IL.PISTONS[1], 'C', OD_CIRCUITS[1], 'W', MT.DATA.CABLES_01[1], 'P', OP.pipeTiny  .dat(MT.StainlessSteel));
        aMat = MT.DATA.Electric_T[2];   aRegistry.add("Injector ("                                +VN[2]+")", "Basic Machines"                      , 20262, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,  128, NBT_TEXTURE, "injector", NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, RM.Injector, NBT_INV_SIDE_IN, SBIT_U|SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R|SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_U|SBIT_L, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_R|SBIT_D, NBT_TANK_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B), "XPw", "CMW", 'M', OP.casingMachine.dat(aMat), 'X', IL.PISTONS[2], 'C', OD_CIRCUITS[2], 'W', MT.DATA.CABLES_01[2], 'P', OP.pipeSmall .dat(MT.StainlessSteel));
        aMat = MT.DATA.Electric_T[3];   aRegistry.add("Injector ("                                +VN[3]+")", "Basic Machines"                      , 20263, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,  512, NBT_TEXTURE, "injector", NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, RM.Injector, NBT_INV_SIDE_IN, SBIT_U|SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R|SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_U|SBIT_L, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_R|SBIT_D, NBT_TANK_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B), "XPw", "CMW", 'M', OP.casingMachine.dat(aMat), 'X', IL.PISTONS[3], 'C', OD_CIRCUITS[3], 'W', MT.DATA.CABLES_01[3], 'P', OP.pipeMedium.dat(MT.StainlessSteel));
        aMat = MT.DATA.Electric_T[4];   aRegistry.add("Injector ("                                +VN[4]+")", "Basic Machines"                      , 20264, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT, 2048, NBT_TEXTURE, "injector", NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, RM.Injector, NBT_INV_SIDE_IN, SBIT_U|SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R|SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_U|SBIT_L, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_R|SBIT_D, NBT_TANK_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B), "XPw", "CMW", 'M', OP.casingMachine.dat(aMat), 'X', IL.PISTONS[4], 'C', OD_CIRCUITS[4], 'W', MT.DATA.CABLES_01[4], 'P', OP.pipeLarge .dat(MT.StainlessSteel));
        aMat = MT.DATA.Electric_T[5];   aRegistry.add("Injector ("                                +VN[5]+")", "Basic Machines"                      , 20265, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT, 8192, NBT_TEXTURE, "injector", NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, RM.Injector, NBT_INV_SIDE_IN, SBIT_U|SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R|SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_U|SBIT_L, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_R|SBIT_D, NBT_TANK_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B), "XPw", "CMW", 'M', OP.casingMachine.dat(aMat), 'X', IL.PISTONS[5], 'C', OD_CIRCUITS[5], 'W', MT.DATA.CABLES_01[5], 'P', OP.pipeHuge  .dat(MT.StainlessSteel));

        aClass = MultiTileEntityBasicMachineElectric_CH.class;
        aMat = MT.DATA.Electric_T[1];   aRegistry.add("Printer ("                                 +VN[1]+")", "Basic Machines"                      , 20271, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,   32, NBT_TEXTURE, "printer", NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, RM.Printer, NBT_INV_SIDE_IN, SBIT_U|SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R|SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_U|SBIT_L, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B), "CPC", "wXh", "WMW", 'M', OP.casingMachine.dat(aMat), 'X', IL.CONVEYERS[1], 'C', OD_CIRCUITS[1], 'W', MT.DATA.CABLES_01[1], 'P', OP.pipeTiny.dat(MT.StainlessSteel));
        aMat = MT.DATA.Electric_T[2];   aRegistry.add("Printer ("                                 +VN[2]+")", "Basic Machines"                      , 20272, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,  128, NBT_TEXTURE, "printer", NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, RM.Printer, NBT_INV_SIDE_IN, SBIT_U|SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R|SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_U|SBIT_L, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B), "CPC", "wXh", "WMW", 'M', OP.casingMachine.dat(aMat), 'X', IL.CONVEYERS[2], 'C', OD_CIRCUITS[2], 'W', MT.DATA.CABLES_01[2], 'P', OP.pipeTiny.dat(MT.StainlessSteel));
        aMat = MT.DATA.Electric_T[3];   aRegistry.add("Printer ("                                 +VN[3]+")", "Basic Machines"                      , 20273, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,  512, NBT_TEXTURE, "printer", NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, RM.Printer, NBT_INV_SIDE_IN, SBIT_U|SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R|SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_U|SBIT_L, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B), "CPC", "wXh", "WMW", 'M', OP.casingMachine.dat(aMat), 'X', IL.CONVEYERS[3], 'C', OD_CIRCUITS[3], 'W', MT.DATA.CABLES_01[3], 'P', OP.pipeTiny.dat(MT.StainlessSteel));
        aMat = MT.DATA.Electric_T[4];   aRegistry.add("Printer ("                                 +VN[4]+")", "Basic Machines"                      , 20274, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT, 2048, NBT_TEXTURE, "printer", NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, RM.Printer, NBT_INV_SIDE_IN, SBIT_U|SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R|SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_U|SBIT_L, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B), "CPC", "wXh", "WMW", 'M', OP.casingMachine.dat(aMat), 'X', IL.CONVEYERS[4], 'C', OD_CIRCUITS[4], 'W', MT.DATA.CABLES_01[4], 'P', OP.pipeTiny.dat(MT.StainlessSteel));
        aMat = MT.DATA.Electric_T[5];   aRegistry.add("Printer ("                                 +VN[5]+")", "Basic Machines"                      , 20275, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT, 8192, NBT_TEXTURE, "printer", NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, RM.Printer, NBT_INV_SIDE_IN, SBIT_U|SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R|SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_U|SBIT_L, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B), "CPC", "wXh", "WMW", 'M', OP.casingMachine.dat(aMat), 'X', IL.CONVEYERS[5], 'C', OD_CIRCUITS[5], 'W', MT.DATA.CABLES_01[5], 'P', OP.pipeTiny.dat(MT.StainlessSteel));

        aClass = MultiTileEntityBasicMachineElectric_CH.class;
        aMat = MT.DATA.Electric_T[1];   aRegistry.add("Scanner (Visuals, "                        +VN[1]+")", "Basic Machines"                      , 20281, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,   32, NBT_TEXTURE, "scannervisuals", NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, RM.ScannerVisuals, NBT_INV_SIDE_IN, SBIT_U|SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R|SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B), "CPC", "wXh", "WMW", 'M', OP.casingMachine.dat(aMat), 'X', IL.CONVEYERS[1], 'C', OD_CIRCUITS[1], 'W', MT.DATA.CABLES_01[1], 'P', OP.plate.dat(MT.Lumium));
        aMat = MT.DATA.Electric_T[2];   aRegistry.add("Scanner (Visuals, "                        +VN[2]+")", "Basic Machines"                      , 20282, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,  128, NBT_TEXTURE, "scannervisuals", NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, RM.ScannerVisuals, NBT_INV_SIDE_IN, SBIT_U|SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R|SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B), "CPC", "wXh", "WMW", 'M', OP.casingMachine.dat(aMat), 'X', IL.CONVEYERS[2], 'C', OD_CIRCUITS[2], 'W', MT.DATA.CABLES_01[2], 'P', OP.plate.dat(MT.Lumium));
        aMat = MT.DATA.Electric_T[3];   aRegistry.add("Scanner (Visuals, "                        +VN[3]+")", "Basic Machines"                      , 20283, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,  512, NBT_TEXTURE, "scannervisuals", NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, RM.ScannerVisuals, NBT_INV_SIDE_IN, SBIT_U|SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R|SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B), "CPC", "wXh", "WMW", 'M', OP.casingMachine.dat(aMat), 'X', IL.CONVEYERS[3], 'C', OD_CIRCUITS[3], 'W', MT.DATA.CABLES_01[3], 'P', OP.plate.dat(MT.Lumium));
        aMat = MT.DATA.Electric_T[4];   aRegistry.add("Scanner (Visuals, "                        +VN[4]+")", "Basic Machines"                      , 20284, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT, 2048, NBT_TEXTURE, "scannervisuals", NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, RM.ScannerVisuals, NBT_INV_SIDE_IN, SBIT_U|SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R|SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B), "CPC", "wXh", "WMW", 'M', OP.casingMachine.dat(aMat), 'X', IL.CONVEYERS[4], 'C', OD_CIRCUITS[4], 'W', MT.DATA.CABLES_01[4], 'P', OP.plate.dat(MT.Lumium));
        aMat = MT.DATA.Electric_T[5];   aRegistry.add("Scanner (Visuals, "                        +VN[5]+")", "Basic Machines"                      , 20285, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT, 8192, NBT_TEXTURE, "scannervisuals", NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, RM.ScannerVisuals, NBT_INV_SIDE_IN, SBIT_U|SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R|SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B), "CPC", "wXh", "WMW", 'M', OP.casingMachine.dat(aMat), 'X', IL.CONVEYERS[5], 'C', OD_CIRCUITS[5], 'W', MT.DATA.CABLES_01[5], 'P', OP.plate.dat(MT.Lumium));

        aClass = MultiTileEntityBasicMachine_CH.class;
        aMat = MT.DATA.Kinetic_T[1];    aRegistry.add("Sluice ("                        +aMat.getLocal()+")", "Basic Machines"                      , 20291, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   7.0F, NBT_RESISTANCE,   7.0F, NBT_INPUT,   32, NBT_TEXTURE, "sluice", NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_RECIPEMAP, RM.Sluice, NBT_INV_SIDE_IN, SBIT_L|SBIT_U, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R|SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_L|SBIT_U, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_R|SBIT_D, NBT_TANK_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B), "PPP", "RGR", "GMG", 'M', OP.casingMachineDouble.dat(aMat), 'R', OP.rotor.dat(aMat), 'G', OP.gearGt.dat(aMat), 'P', OP.plateDouble.dat(aMat));
        aMat = MT.DATA.Kinetic_T[2];    aRegistry.add("Sluice ("                        +aMat.getLocal()+")", "Basic Machines"                      , 20292, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_INPUT,  128, NBT_TEXTURE, "sluice", NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_RECIPEMAP, RM.Sluice, NBT_INV_SIDE_IN, SBIT_L|SBIT_U, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R|SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_L|SBIT_U, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_R|SBIT_D, NBT_TANK_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B), "PPP", "RGR", "GMG", 'M', OP.casingMachineDouble.dat(aMat), 'R', OP.rotor.dat(aMat), 'G', OP.gearGt.dat(aMat), 'P', OP.plateDouble.dat(aMat));
        aMat = MT.DATA.Kinetic_T[3];    aRegistry.add("Sluice ("                        +aMat.getLocal()+")", "Basic Machines"                      , 20293, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   9.0F, NBT_RESISTANCE,   9.0F, NBT_INPUT,  512, NBT_TEXTURE, "sluice", NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_RECIPEMAP, RM.Sluice, NBT_INV_SIDE_IN, SBIT_L|SBIT_U, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R|SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_L|SBIT_U, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_R|SBIT_D, NBT_TANK_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B), "PPP", "RGR", "GMG", 'M', OP.casingMachineDouble.dat(aMat), 'R', OP.rotor.dat(aMat), 'G', OP.gearGt.dat(aMat), 'P', OP.plateDouble.dat(aMat));
        aMat = MT.DATA.Kinetic_T[4];    aRegistry.add("Sluice ("                        +aMat.getLocal()+")", "Basic Machines"                      , 20294, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  12.5F, NBT_RESISTANCE,  12.5F, NBT_INPUT, 2048, NBT_TEXTURE, "sluice", NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_RECIPEMAP, RM.Sluice, NBT_INV_SIDE_IN, SBIT_L|SBIT_U, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R|SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_L|SBIT_U, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_R|SBIT_D, NBT_TANK_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B), "PPP", "RGR", "GMG", 'M', OP.casingMachineDouble.dat(aMat), 'R', OP.rotor.dat(aMat), 'G', OP.gearGt.dat(aMat), 'P', OP.plateDouble.dat(aMat));

        aClass = MultiTileEntityBasicMachine_CH.class;
        aMat = MT.DATA.Electric_T[1];   aRegistry.add("Magnetic Separator ("            +aMat.getLocal()+")", "Basic Machines"                      , 20301, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,   32, NBT_TEXTURE, "magneticseparator", NBT_ENERGY_ACCEPTED, TD.Energy.MU, NBT_RECIPEMAP, RM.MagneticSeparator, NBT_INV_SIDE_IN, SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R|SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_U), "TwT", "TdT", "PMP", 'M', OP.casingMachine.dat(aMat), 'P', OP.plate.dat(aMat), 'T', OP.screw.dat(aMat));
        aMat = MT.DATA.Electric_T[2];   aRegistry.add("Magnetic Separator ("            +aMat.getLocal()+")", "Basic Machines"                      , 20302, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,  128, NBT_TEXTURE, "magneticseparator", NBT_ENERGY_ACCEPTED, TD.Energy.MU, NBT_RECIPEMAP, RM.MagneticSeparator, NBT_INV_SIDE_IN, SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R|SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_U), "TwT", "TdT", "PMP", 'M', OP.casingMachine.dat(aMat), 'P', OP.plate.dat(aMat), 'T', OP.screw.dat(aMat));
        aMat = MT.DATA.Electric_T[3];   aRegistry.add("Magnetic Separator ("            +aMat.getLocal()+")", "Basic Machines"                      , 20303, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,  512, NBT_TEXTURE, "magneticseparator", NBT_ENERGY_ACCEPTED, TD.Energy.MU, NBT_RECIPEMAP, RM.MagneticSeparator, NBT_INV_SIDE_IN, SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R|SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_U), "TwT", "TdT", "PMP", 'M', OP.casingMachine.dat(aMat), 'P', OP.plate.dat(aMat), 'T', OP.screw.dat(aMat));
        aMat = MT.DATA.Electric_T[4];   aRegistry.add("Magnetic Separator ("            +aMat.getLocal()+")", "Basic Machines"                      , 20304, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT, 2048, NBT_TEXTURE, "magneticseparator", NBT_ENERGY_ACCEPTED, TD.Energy.MU, NBT_RECIPEMAP, RM.MagneticSeparator, NBT_INV_SIDE_IN, SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R|SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_U), "TwT", "TdT", "PMP", 'M', OP.casingMachine.dat(aMat), 'P', OP.plate.dat(aMat), 'T', OP.screw.dat(aMat));
        aMat = MT.DATA.Electric_T[5];   aRegistry.add("Magnetic Separator ("            +aMat.getLocal()+")", "Basic Machines"                      , 20305, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT, 8192, NBT_TEXTURE, "magneticseparator", NBT_ENERGY_ACCEPTED, TD.Energy.MU, NBT_RECIPEMAP, RM.MagneticSeparator, NBT_INV_SIDE_IN, SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R|SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_U), "TwT", "TdT", "PMP", 'M', OP.casingMachine.dat(aMat), 'P', OP.plate.dat(aMat), 'T', OP.screw.dat(aMat));

        aClass = MultiTileEntityBasicMachine_CH.class;
        aMat = MT.DATA.Heat_T[1];       aRegistry.add("Dryer ("                         +aMat.getLocal()+")", "Basic Machines"                      , 20311, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_INPUT,   32, NBT_TEXTURE, "dryer", NBT_ENERGY_ACCEPTED, TD.Energy.HU, NBT_RECIPEMAP, RM.Drying, NBT_INV_SIDE_IN, SBIT_B|SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_B|SBIT_L, NBT_TANK_SIDE_AUTO_IN, SIDE_BACK, NBT_TANK_SIDE_OUT, SBIT_U, NBT_TANK_SIDE_AUTO_OUT, SIDE_TOP, NBT_ENERGY_ACCEPTED_SIDES, SBIT_D, NBT_CHEAP_OVERCLOCKING, T, NBT_PARALLEL,  8, NBT_PARALLEL_DURATION, T), "wPh", "BMB", "BCB", 'M', OP.casingMachine.dat(aMat), 'C', OP.plateDouble.dat(ANY.Cu), 'B', Blocks.brick_block, 'P', OP.pipeMedium.dat(aMat));
        aMat = MT.DATA.Heat_T[2];       aRegistry.add("Dryer ("                         +aMat.getLocal()+")", "Basic Machines"                      , 20312, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,  128, NBT_TEXTURE, "dryer", NBT_ENERGY_ACCEPTED, TD.Energy.HU, NBT_RECIPEMAP, RM.Drying, NBT_INV_SIDE_IN, SBIT_B|SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_B|SBIT_L, NBT_TANK_SIDE_AUTO_IN, SIDE_BACK, NBT_TANK_SIDE_OUT, SBIT_U, NBT_TANK_SIDE_AUTO_OUT, SIDE_TOP, NBT_ENERGY_ACCEPTED_SIDES, SBIT_D, NBT_CHEAP_OVERCLOCKING, T, NBT_PARALLEL, 16, NBT_PARALLEL_DURATION, T), "wPh", "BMB", "BCB", 'M', OP.casingMachine.dat(aMat), 'C', OP.plateDouble.dat(ANY.Cu), 'B', Blocks.brick_block, 'P', OP.pipeMedium.dat(aMat));
        aMat = MT.DATA.Heat_T[3];       aRegistry.add("Dryer ("                         +aMat.getLocal()+")", "Basic Machines"                      , 20313, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   9.0F, NBT_RESISTANCE,   9.0F, NBT_INPUT,  512, NBT_TEXTURE, "dryer", NBT_ENERGY_ACCEPTED, TD.Energy.HU, NBT_RECIPEMAP, RM.Drying, NBT_INV_SIDE_IN, SBIT_B|SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_B|SBIT_L, NBT_TANK_SIDE_AUTO_IN, SIDE_BACK, NBT_TANK_SIDE_OUT, SBIT_U, NBT_TANK_SIDE_AUTO_OUT, SIDE_TOP, NBT_ENERGY_ACCEPTED_SIDES, SBIT_D, NBT_CHEAP_OVERCLOCKING, T, NBT_PARALLEL, 32, NBT_PARALLEL_DURATION, T), "wPh", "BMB", "BCB", 'M', OP.casingMachine.dat(aMat), 'C', OP.plateDouble.dat(ANY.Cu), 'B', Blocks.brick_block, 'P', OP.pipeMedium.dat(aMat));
        aMat = MT.DATA.Heat_T[4];       aRegistry.add("Dryer ("                         +aMat.getLocal()+")", "Basic Machines"                      , 20314, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  12.5F, NBT_RESISTANCE,  12.5F, NBT_INPUT, 2048, NBT_TEXTURE, "dryer", NBT_ENERGY_ACCEPTED, TD.Energy.HU, NBT_RECIPEMAP, RM.Drying, NBT_INV_SIDE_IN, SBIT_B|SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_B|SBIT_L, NBT_TANK_SIDE_AUTO_IN, SIDE_BACK, NBT_TANK_SIDE_OUT, SBIT_U, NBT_TANK_SIDE_AUTO_OUT, SIDE_TOP, NBT_ENERGY_ACCEPTED_SIDES, SBIT_D, NBT_CHEAP_OVERCLOCKING, T, NBT_PARALLEL, 64, NBT_PARALLEL_DURATION, T), "wPh", "BMB", "BCB", 'M', OP.casingMachine.dat(aMat), 'C', OP.plateDouble.dat(ANY.Cu), 'B', Blocks.brick_block, 'P', OP.pipeMedium.dat(aMat));

        aClass = MultiTileEntityBasicMachine_CH.class;
        aMat = MT.DATA.Electric_T[1];   aRegistry.add("Laser Engraver (T1)"                                 , "Basic Machines"                      , 20321, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,   32, NBT_TEXTURE, "laserengraver", NBT_ENERGY_ACCEPTED, TD.Energy.LU, NBT_RECIPEMAP, RM.LaserEngraver, NBT_INV_SIDE_IN, SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_U), "TdT", "GPG", "CMC", 'M', OP.casingMachine.dat(aMat), 'P', OD.craftingHardenedClay, 'C', OD_CIRCUITS[1], 'T', OP.screw.dat(aMat), 'G', OP.gearGtSmall.dat(aMat));
        aMat = MT.DATA.Electric_T[2];   aRegistry.add("Laser Engraver (T2)"                                 , "Basic Machines"                      , 20322, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,  128, NBT_TEXTURE, "laserengraver", NBT_ENERGY_ACCEPTED, TD.Energy.LU, NBT_RECIPEMAP, RM.LaserEngraver, NBT_INV_SIDE_IN, SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_U), "TdT", "GPG", "CMC", 'M', OP.casingMachine.dat(aMat), 'P', OD.craftingHardenedClay, 'C', OD_CIRCUITS[2], 'T', OP.screw.dat(aMat), 'G', OP.gearGtSmall.dat(aMat));
        aMat = MT.DATA.Electric_T[3];   aRegistry.add("Laser Engraver (T3)"                                 , "Basic Machines"                      , 20323, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,  512, NBT_TEXTURE, "laserengraver", NBT_ENERGY_ACCEPTED, TD.Energy.LU, NBT_RECIPEMAP, RM.LaserEngraver, NBT_INV_SIDE_IN, SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_U), "TdT", "GPG", "CMC", 'M', OP.casingMachine.dat(aMat), 'P', OD.craftingHardenedClay, 'C', OD_CIRCUITS[3], 'T', OP.screw.dat(aMat), 'G', OP.gearGtSmall.dat(aMat));
        aMat = MT.DATA.Electric_T[4];   aRegistry.add("Laser Engraver (T4)"                                 , "Basic Machines"                      , 20324, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT, 2048, NBT_TEXTURE, "laserengraver", NBT_ENERGY_ACCEPTED, TD.Energy.LU, NBT_RECIPEMAP, RM.LaserEngraver, NBT_INV_SIDE_IN, SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_U), "TdT", "GPG", "CMC", 'M', OP.casingMachine.dat(aMat), 'P', OD.craftingHardenedClay, 'C', OD_CIRCUITS[4], 'T', OP.screw.dat(aMat), 'G', OP.gearGtSmall.dat(aMat));
        aMat = MT.DATA.Electric_T[5];   aRegistry.add("Laser Engraver (T5)"                                 , "Basic Machines"                      , 20325, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT, 8192, NBT_TEXTURE, "laserengraver", NBT_ENERGY_ACCEPTED, TD.Energy.LU, NBT_RECIPEMAP, RM.LaserEngraver, NBT_INV_SIDE_IN, SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_U), "TdT", "GPG", "CMC", 'M', OP.casingMachine.dat(aMat), 'P', OD.craftingHardenedClay, 'C', OD_CIRCUITS[5], 'T', OP.screw.dat(aMat), 'G', OP.gearGtSmall.dat(aMat));

        aClass = MultiTileEntityBasicMachine_CH.class;
        aMat = MT.DATA.Electric_T[1];   aRegistry.add("Laser Welder (T1)"                                   , "Basic Machines"                      , 20331, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,   32, NBT_TEXTURE, "laserwelder", NBT_ENERGY_ACCEPTED, TD.Energy.LU, NBT_RECIPEMAP, RM.Welder, NBT_INV_SIDE_IN, SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_D|SBIT_L, NBT_TANK_SIDE_AUTO_IN, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_U), "TLT", "GPG", "CMC", 'M', OP.casingMachine.dat(aMat), 'P', OD.craftingHardenedClay, 'C', OD_CIRCUITS[1], 'L', DYE_OREDICTS_LENS[DYE_INDEX_Yellow], 'T', OP.screw.dat(aMat), 'G', OP.gearGtSmall.dat(aMat));
        aMat = MT.DATA.Electric_T[2];   aRegistry.add("Laser Welder (T2)"                                   , "Basic Machines"                      , 20332, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,  128, NBT_TEXTURE, "laserwelder", NBT_ENERGY_ACCEPTED, TD.Energy.LU, NBT_RECIPEMAP, RM.Welder, NBT_INV_SIDE_IN, SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_D|SBIT_L, NBT_TANK_SIDE_AUTO_IN, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_U), "TLT", "GPG", "CMC", 'M', OP.casingMachine.dat(aMat), 'P', OD.craftingHardenedClay, 'C', OD_CIRCUITS[2], 'L', DYE_OREDICTS_LENS[DYE_INDEX_Yellow], 'T', OP.screw.dat(aMat), 'G', OP.gearGtSmall.dat(aMat));
        aMat = MT.DATA.Electric_T[3];   aRegistry.add("Laser Welder (T3)"                                   , "Basic Machines"                      , 20333, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,  512, NBT_TEXTURE, "laserwelder", NBT_ENERGY_ACCEPTED, TD.Energy.LU, NBT_RECIPEMAP, RM.Welder, NBT_INV_SIDE_IN, SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_D|SBIT_L, NBT_TANK_SIDE_AUTO_IN, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_U), "TLT", "GPG", "CMC", 'M', OP.casingMachine.dat(aMat), 'P', OD.craftingHardenedClay, 'C', OD_CIRCUITS[3], 'L', DYE_OREDICTS_LENS[DYE_INDEX_Yellow], 'T', OP.screw.dat(aMat), 'G', OP.gearGtSmall.dat(aMat));
        aMat = MT.DATA.Electric_T[4];   aRegistry.add("Laser Welder (T4)"                                   , "Basic Machines"                      , 20334, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT, 2048, NBT_TEXTURE, "laserwelder", NBT_ENERGY_ACCEPTED, TD.Energy.LU, NBT_RECIPEMAP, RM.Welder, NBT_INV_SIDE_IN, SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_D|SBIT_L, NBT_TANK_SIDE_AUTO_IN, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_U), "TLT", "GPG", "CMC", 'M', OP.casingMachine.dat(aMat), 'P', OD.craftingHardenedClay, 'C', OD_CIRCUITS[4], 'L', DYE_OREDICTS_LENS[DYE_INDEX_Yellow], 'T', OP.screw.dat(aMat), 'G', OP.gearGtSmall.dat(aMat));
        aMat = MT.DATA.Electric_T[5];   aRegistry.add("Laser Welder (T5)"                                   , "Basic Machines"                      , 20335, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT, 8192, NBT_TEXTURE, "laserwelder", NBT_ENERGY_ACCEPTED, TD.Energy.LU, NBT_RECIPEMAP, RM.Welder, NBT_INV_SIDE_IN, SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_D|SBIT_L, NBT_TANK_SIDE_AUTO_IN, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_U), "TLT", "GPG", "CMC", 'M', OP.casingMachine.dat(aMat), 'P', OD.craftingHardenedClay, 'C', OD_CIRCUITS[5], 'L', DYE_OREDICTS_LENS[DYE_INDEX_Yellow], 'T', OP.screw.dat(aMat), 'G', OP.gearGtSmall.dat(aMat));

        aClass = MultiTileEntityBasicMachineElectric_CH.class;
        aMat = MT.DATA.Electric_T[1];   aRegistry.add("Autocrafter ("                             +VN[1]+")", "Basic Machines"                      , 20341, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,   32, NBT_TEXTURE, "autocrafter", NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, RM.Autocrafter, NBT_INV_SIDE_IN, SBIT_U|SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R|SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_U|SBIT_D), "WRW", "RwR", "CMC", 'M', OP.casingMachineDouble.dat(aMat), 'C', OD_CIRCUITS[1], 'W', MT.DATA.CABLES_01[1], 'R', IL.ROBOT_ARMS[1]);
        aMat = MT.DATA.Electric_T[2];   aRegistry.add("Autocrafter ("                             +VN[2]+")", "Basic Machines"                      , 20342, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,  128, NBT_TEXTURE, "autocrafter", NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, RM.Autocrafter, NBT_INV_SIDE_IN, SBIT_U|SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R|SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_U|SBIT_D), "WRW", "RwR", "CMC", 'M', OP.casingMachineDouble.dat(aMat), 'C', OD_CIRCUITS[2], 'W', MT.DATA.CABLES_01[2], 'R', IL.ROBOT_ARMS[2]);
        aMat = MT.DATA.Electric_T[3];   aRegistry.add("Autocrafter ("                             +VN[3]+")", "Basic Machines"                      , 20343, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,  512, NBT_TEXTURE, "autocrafter", NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, RM.Autocrafter, NBT_INV_SIDE_IN, SBIT_U|SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R|SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_U|SBIT_D), "WRW", "RwR", "CMC", 'M', OP.casingMachineDouble.dat(aMat), 'C', OD_CIRCUITS[3], 'W', MT.DATA.CABLES_01[3], 'R', IL.ROBOT_ARMS[3]);
        aMat = MT.DATA.Electric_T[4];   aRegistry.add("Autocrafter ("                             +VN[4]+")", "Basic Machines"                      , 20344, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT, 2048, NBT_TEXTURE, "autocrafter", NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, RM.Autocrafter, NBT_INV_SIDE_IN, SBIT_U|SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R|SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_U|SBIT_D), "WRW", "RwR", "CMC", 'M', OP.casingMachineDouble.dat(aMat), 'C', OD_CIRCUITS[4], 'W', MT.DATA.CABLES_01[4], 'R', IL.ROBOT_ARMS[4]);
        aMat = MT.DATA.Electric_T[5];   aRegistry.add("Autocrafter ("                             +VN[5]+")", "Basic Machines"                      , 20345, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT, 8192, NBT_TEXTURE, "autocrafter", NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, RM.Autocrafter, NBT_INV_SIDE_IN, SBIT_U|SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R|SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_U|SBIT_D), "WRW", "RwR", "CMC", 'M', OP.casingMachineDouble.dat(aMat), 'C', OD_CIRCUITS[5], 'W', MT.DATA.CABLES_01[5], 'R', IL.ROBOT_ARMS[5]);

        aClass = MultiTileEntityBasicMachineElectric_CH.class;
        aMat = MT.DATA.Electric_T[1];   aRegistry.add("Electric Mixer ("                          +VN[1]+")", "Basic Machines"                      , 20351, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,   32, NBT_TEXTURE, "electricmixer", NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, RM.Mixer, NBT_EFFICIENCY, 5000, NBT_INV_SIDE_IN, SBIT_L|SBIT_U, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R|SBIT_B, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_L|SBIT_U, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_R|SBIT_B, NBT_TANK_SIDE_AUTO_OUT, SIDE_BACK, NBT_ENERGY_ACCEPTED_SIDES, SBIT_D, NBT_PARALLEL, 4, NBT_PARALLEL_DURATION, T), "PMP", "PRP", "hSw", 'M', OP.casingMachine.dat(aMat), 'S', IL.MOTORS[1], 'R', OP.rotor.dat(MT.StainlessSteel), 'P', OP.plate.dat(MT.StainlessSteel));
        aMat = MT.DATA.Electric_T[2];   aRegistry.add("Electric Mixer ("                          +VN[2]+")", "Basic Machines"                      , 20352, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,  128, NBT_TEXTURE, "electricmixer", NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, RM.Mixer, NBT_EFFICIENCY, 5000, NBT_INV_SIDE_IN, SBIT_L|SBIT_U, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R|SBIT_B, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_L|SBIT_U, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_R|SBIT_B, NBT_TANK_SIDE_AUTO_OUT, SIDE_BACK, NBT_ENERGY_ACCEPTED_SIDES, SBIT_D, NBT_PARALLEL, 8, NBT_PARALLEL_DURATION, T), "PMP", "PRP", "hSw", 'M', OP.casingMachine.dat(aMat), 'S', IL.MOTORS[2], 'R', OP.rotor.dat(MT.StainlessSteel), 'P', OP.plateDouble.dat(MT.StainlessSteel));
        aMat = MT.DATA.Electric_T[3];   aRegistry.add("Electric Mixer ("                          +VN[3]+")", "Basic Machines"                      , 20353, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,  512, NBT_TEXTURE, "electricmixer", NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, RM.Mixer, NBT_EFFICIENCY, 5000, NBT_INV_SIDE_IN, SBIT_L|SBIT_U, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R|SBIT_B, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_L|SBIT_U, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_R|SBIT_B, NBT_TANK_SIDE_AUTO_OUT, SIDE_BACK, NBT_ENERGY_ACCEPTED_SIDES, SBIT_D, NBT_PARALLEL,16, NBT_PARALLEL_DURATION, T), "PMP", "PRP", "hSw", 'M', OP.casingMachine.dat(aMat), 'S', IL.MOTORS[3], 'R', OP.rotor.dat(MT.StainlessSteel), 'P', OP.plateTriple.dat(MT.StainlessSteel));
        aMat = MT.DATA.Electric_T[4];   aRegistry.add("Electric Mixer ("                          +VN[4]+")", "Basic Machines"                      , 20354, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT, 2048, NBT_TEXTURE, "electricmixer", NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, RM.Mixer, NBT_EFFICIENCY, 5000, NBT_INV_SIDE_IN, SBIT_L|SBIT_U, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R|SBIT_B, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_L|SBIT_U, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_R|SBIT_B, NBT_TANK_SIDE_AUTO_OUT, SIDE_BACK, NBT_ENERGY_ACCEPTED_SIDES, SBIT_D, NBT_PARALLEL,32, NBT_PARALLEL_DURATION, T), "PMP", "PRP", "hSw", 'M', OP.casingMachine.dat(aMat), 'S', IL.MOTORS[4], 'R', OP.rotor.dat(MT.StainlessSteel), 'P', OP.plateQuadruple.dat(MT.StainlessSteel));
        aMat = MT.DATA.Electric_T[5];   aRegistry.add("Electric Mixer ("                          +VN[5]+")", "Basic Machines"                      , 20355, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT, 8192, NBT_TEXTURE, "electricmixer", NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, RM.Mixer, NBT_EFFICIENCY, 5000, NBT_INV_SIDE_IN, SBIT_L|SBIT_U, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R|SBIT_B, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_L|SBIT_U, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_R|SBIT_B, NBT_TANK_SIDE_AUTO_OUT, SIDE_BACK, NBT_ENERGY_ACCEPTED_SIDES, SBIT_D, NBT_PARALLEL,64, NBT_PARALLEL_DURATION, T), "PMP", "PRP", "hSw", 'M', OP.casingMachine.dat(aMat), 'S', IL.MOTORS[5], 'R', OP.rotor.dat(MT.StainlessSteel), 'P', OP.plateQuadruple.dat(MT.StainlessSteel));

        aClass = MultiTileEntityBasicMachineElectric_CH.class;
        aMat = MT.DATA.Electric_T[1];   aRegistry.add("Electric Loom ("                           +VN[1]+")", "Basic Machines"                      , 20361, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,   32, NBT_TEXTURE, "electricloom", NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, RM.Loom, NBT_EFFICIENCY, 5000, NBT_INV_SIDE_IN, SBIT_U, NBT_INV_SIDE_AUTO_IN, SIDE_TOP, NBT_INV_SIDE_OUT, SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_L|SBIT_R), "ShS", "GMG", "SwS", 'M', OP.casingMachine.dat(aMat), 'G', IL.MOTORS[1], 'S', OP.stickLong.dat(aMat));
        aMat = MT.DATA.Electric_T[2];   aRegistry.add("Electric Loom ("                           +VN[2]+")", "Basic Machines"                      , 20362, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,  128, NBT_TEXTURE, "electricloom", NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, RM.Loom, NBT_EFFICIENCY, 5000, NBT_INV_SIDE_IN, SBIT_U, NBT_INV_SIDE_AUTO_IN, SIDE_TOP, NBT_INV_SIDE_OUT, SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_L|SBIT_R), "ShS", "GMG", "SwS", 'M', OP.casingMachine.dat(aMat), 'G', IL.MOTORS[2], 'S', OP.stickLong.dat(aMat));
        aMat = MT.DATA.Electric_T[3];   aRegistry.add("Electric Loom ("                           +VN[3]+")", "Basic Machines"                      , 20363, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,  512, NBT_TEXTURE, "electricloom", NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, RM.Loom, NBT_EFFICIENCY, 5000, NBT_INV_SIDE_IN, SBIT_U, NBT_INV_SIDE_AUTO_IN, SIDE_TOP, NBT_INV_SIDE_OUT, SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_L|SBIT_R), "ShS", "GMG", "SwS", 'M', OP.casingMachine.dat(aMat), 'G', IL.MOTORS[3], 'S', OP.stickLong.dat(aMat));
        aMat = MT.DATA.Electric_T[4];   aRegistry.add("Electric Loom ("                           +VN[4]+")", "Basic Machines"                      , 20364, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT, 2048, NBT_TEXTURE, "electricloom", NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, RM.Loom, NBT_EFFICIENCY, 5000, NBT_INV_SIDE_IN, SBIT_U, NBT_INV_SIDE_AUTO_IN, SIDE_TOP, NBT_INV_SIDE_OUT, SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_L|SBIT_R), "ShS", "GMG", "SwS", 'M', OP.casingMachine.dat(aMat), 'G', IL.MOTORS[4], 'S', OP.stickLong.dat(aMat));
        aMat = MT.DATA.Electric_T[5];   aRegistry.add("Electric Loom ("                           +VN[5]+")", "Basic Machines"                      , 20365, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT, 8192, NBT_TEXTURE, "electricloom", NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, RM.Loom, NBT_EFFICIENCY, 5000, NBT_INV_SIDE_IN, SBIT_U, NBT_INV_SIDE_AUTO_IN, SIDE_TOP, NBT_INV_SIDE_OUT, SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_L|SBIT_R), "ShS", "GMG", "SwS", 'M', OP.casingMachine.dat(aMat), 'G', IL.MOTORS[5], 'S', OP.stickLong.dat(aMat));

        aClass = MultiTileEntityBasicMachineElectric_CH.class;
        aMat = MT.DATA.Electric_T[1];   aRegistry.add("Electric Sifter ("                         +VN[1]+")", "Basic Machines"                      , 20371, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,   32, NBT_TEXTURE, "electricsifter", NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, RM.Sifting, NBT_EFFICIENCY, 5000, NBT_INV_SIDE_IN, SBIT_U, NBT_INV_SIDE_AUTO_IN, SIDE_TOP, NBT_INV_SIDE_OUT, SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B), "WxW", "RMR", "SwS", 'M', OP.casingMachineDouble.dat(aMat), 'S', IL.PISTONS[1], 'W', OP.wireFine.dat(aMat), 'R', OP.stick.dat(aMat));
        aMat = MT.DATA.Electric_T[2];   aRegistry.add("Electric Sifter ("                         +VN[2]+")", "Basic Machines"                      , 20372, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,  128, NBT_TEXTURE, "electricsifter", NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, RM.Sifting, NBT_EFFICIENCY, 5000, NBT_INV_SIDE_IN, SBIT_U, NBT_INV_SIDE_AUTO_IN, SIDE_TOP, NBT_INV_SIDE_OUT, SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B), "WxW", "RMR", "SwS", 'M', OP.casingMachineDouble.dat(aMat), 'S', IL.PISTONS[2], 'W', OP.wireFine.dat(aMat), 'R', OP.stick.dat(aMat));
        aMat = MT.DATA.Electric_T[3];   aRegistry.add("Electric Sifter ("                         +VN[3]+")", "Basic Machines"                      , 20373, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,  512, NBT_TEXTURE, "electricsifter", NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, RM.Sifting, NBT_EFFICIENCY, 5000, NBT_INV_SIDE_IN, SBIT_U, NBT_INV_SIDE_AUTO_IN, SIDE_TOP, NBT_INV_SIDE_OUT, SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B), "WxW", "RMR", "SwS", 'M', OP.casingMachineDouble.dat(aMat), 'S', IL.PISTONS[3], 'W', OP.wireFine.dat(aMat), 'R', OP.stick.dat(aMat));
        aMat = MT.DATA.Electric_T[4];   aRegistry.add("Electric Sifter ("                         +VN[4]+")", "Basic Machines"                      , 20374, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT, 2048, NBT_TEXTURE, "electricsifter", NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, RM.Sifting, NBT_EFFICIENCY, 5000, NBT_INV_SIDE_IN, SBIT_U, NBT_INV_SIDE_AUTO_IN, SIDE_TOP, NBT_INV_SIDE_OUT, SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B), "WxW", "RMR", "SwS", 'M', OP.casingMachineDouble.dat(aMat), 'S', IL.PISTONS[4], 'W', OP.wireFine.dat(aMat), 'R', OP.stick.dat(aMat));
        aMat = MT.DATA.Electric_T[5];   aRegistry.add("Electric Sifter ("                         +VN[5]+")", "Basic Machines"                      , 20375, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT, 8192, NBT_TEXTURE, "electricsifter", NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, RM.Sifting, NBT_EFFICIENCY, 5000, NBT_INV_SIDE_IN, SBIT_U, NBT_INV_SIDE_AUTO_IN, SIDE_TOP, NBT_INV_SIDE_OUT, SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B), "WxW", "RMR", "SwS", 'M', OP.casingMachineDouble.dat(aMat), 'S', IL.PISTONS[5], 'W', OP.wireFine.dat(aMat), 'R', OP.stick.dat(aMat));

        aClass = MultiTileEntityBasicMachineElectric_CH.class;
        aMat = MT.DATA.Electric_T[1];   aRegistry.add("Slicer ("                                  +VN[1]+")", "Basic Machines"                      , 20381, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,   32, NBT_TEXTURE, "slicer", NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, RM.Slicer, NBT_INV_SIDE_IN, SBIT_L|SBIT_U, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R|SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B), "PRw", "YMC", 'M', OP.casingMachine.dat(aMat), 'P', IL.PISTONS[1], 'Y', IL.CONVEYERS[1], 'C', OD_CIRCUITS[1], 'R', OP.stick.dat(aMat));
        aMat = MT.DATA.Electric_T[2];   aRegistry.add("Slicer ("                                  +VN[2]+")", "Basic Machines"                      , 20382, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,  128, NBT_TEXTURE, "slicer", NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, RM.Slicer, NBT_INV_SIDE_IN, SBIT_L|SBIT_U, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R|SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B), "PRw", "YMC", 'M', OP.casingMachine.dat(aMat), 'P', IL.PISTONS[2], 'Y', IL.CONVEYERS[2], 'C', OD_CIRCUITS[2], 'R', OP.stick.dat(aMat));
        aMat = MT.DATA.Electric_T[3];   aRegistry.add("Slicer ("                                  +VN[3]+")", "Basic Machines"                      , 20383, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,  512, NBT_TEXTURE, "slicer", NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, RM.Slicer, NBT_INV_SIDE_IN, SBIT_L|SBIT_U, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R|SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B), "PRw", "YMC", 'M', OP.casingMachine.dat(aMat), 'P', IL.PISTONS[3], 'Y', IL.CONVEYERS[3], 'C', OD_CIRCUITS[3], 'R', OP.stick.dat(aMat));
        aMat = MT.DATA.Electric_T[4];   aRegistry.add("Slicer ("                                  +VN[4]+")", "Basic Machines"                      , 20384, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT, 2048, NBT_TEXTURE, "slicer", NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, RM.Slicer, NBT_INV_SIDE_IN, SBIT_L|SBIT_U, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R|SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B), "PRw", "YMC", 'M', OP.casingMachine.dat(aMat), 'P', IL.PISTONS[4], 'Y', IL.CONVEYERS[4], 'C', OD_CIRCUITS[4], 'R', OP.stick.dat(aMat));
        aMat = MT.DATA.Electric_T[5];   aRegistry.add("Slicer ("                                  +VN[5]+")", "Basic Machines"                      , 20385, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT, 8192, NBT_TEXTURE, "slicer", NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, RM.Slicer, NBT_INV_SIDE_IN, SBIT_L|SBIT_U, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R|SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B), "PRw", "YMC", 'M', OP.casingMachine.dat(aMat), 'P', IL.PISTONS[5], 'Y', IL.CONVEYERS[5], 'C', OD_CIRCUITS[5], 'R', OP.stick.dat(aMat));

        aClass = MultiTileEntityBasicMachine_CH.class;
        aMat = MT.DATA.Heat_T[1];       aRegistry.add("Laminator ("                     +aMat.getLocal()+")", "Basic Machines"                      , 20391, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_INPUT,   32, NBT_TEXTURE, "laminator", NBT_ENERGY_ACCEPTED, TD.Energy.HU, NBT_RECIPEMAP, RM.Laminator, NBT_GUI, RES_PATH_GUI + "machines/Laminator.png", NBT_INV_SIDE_IN, SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_D), "SwS", "GMG", "SCS", 'M', OP.casingMachine.dat(aMat), 'G', OP.gearGtSmall.dat(aMat), 'S', OP.stick.dat(aMat), 'C', OP.plateDouble.dat(ANY.Cu));
        aMat = MT.DATA.Heat_T[2];       aRegistry.add("Laminator ("                     +aMat.getLocal()+")", "Basic Machines"                      , 20392, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,  128, NBT_TEXTURE, "laminator", NBT_ENERGY_ACCEPTED, TD.Energy.HU, NBT_RECIPEMAP, RM.Laminator, NBT_GUI, RES_PATH_GUI + "machines/Laminator.png", NBT_INV_SIDE_IN, SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_D), "SwS", "GMG", "SCS", 'M', OP.casingMachine.dat(aMat), 'G', OP.gearGtSmall.dat(aMat), 'S', OP.stick.dat(aMat), 'C', OP.plateDouble.dat(ANY.Cu));
        aMat = MT.DATA.Heat_T[3];       aRegistry.add("Laminator ("                     +aMat.getLocal()+")", "Basic Machines"                      , 20393, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   9.0F, NBT_RESISTANCE,   9.0F, NBT_INPUT,  512, NBT_TEXTURE, "laminator", NBT_ENERGY_ACCEPTED, TD.Energy.HU, NBT_RECIPEMAP, RM.Laminator, NBT_GUI, RES_PATH_GUI + "machines/Laminator.png", NBT_INV_SIDE_IN, SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_D), "SwS", "GMG", "SCS", 'M', OP.casingMachine.dat(aMat), 'G', OP.gearGtSmall.dat(aMat), 'S', OP.stick.dat(aMat), 'C', OP.plateDouble.dat(ANY.Cu));
        aMat = MT.DATA.Heat_T[4];       aRegistry.add("Laminator ("                     +aMat.getLocal()+")", "Basic Machines"                      , 20394, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  12.5F, NBT_RESISTANCE,  12.5F, NBT_INPUT, 2048, NBT_TEXTURE, "laminator", NBT_ENERGY_ACCEPTED, TD.Energy.HU, NBT_RECIPEMAP, RM.Laminator, NBT_GUI, RES_PATH_GUI + "machines/Laminator.png", NBT_INV_SIDE_IN, SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_D), "SwS", "GMG", "SCS", 'M', OP.casingMachine.dat(aMat), 'G', OP.gearGtSmall.dat(aMat), 'S', OP.stick.dat(aMat), 'C', OP.plateDouble.dat(ANY.Cu));
    }

    protected static void machines3(MultiTileEntityRegistry aRegistry, MultiTileEntityBlock aMetal, MultiTileEntityBlock aMetalChips, MultiTileEntityBlock aMetalWires, MultiTileEntityBlock aMachine, MultiTileEntityBlock aWooden, MultiTileEntityBlock aBush, MultiTileEntityBlock aStone, MultiTileEntityBlock aWool, MultiTileEntityBlock aTNT, MultiTileEntityBlock aHive, MultiTileEntityBlock aUtilMetal, MultiTileEntityBlock aUtilStone, MultiTileEntityBlock aUtilWood, MultiTileEntityBlock aUtilWool, OreDictMaterial aMat, Class<? extends TileEntity> aClass) {
        // TODO: Amplifab at 20401, 20402, 20403, 20404, 20405

        aClass = MultiTileEntityBasicMachine_CH.class;
        aMat = MT.Osmiridium;           aRegistry.add("Matter Fabricator (T1)"                              , "Basic Machines"                      , 20411, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  16.0F, NBT_RESISTANCE,  16.0F, NBT_INPUT,   32, NBT_TEXTURE, "massfab", NBT_ENERGY_ACCEPTED, TD.Energy.QU, NBT_RECIPEMAP, RM.Massfab, NBT_CHEAP_OVERCLOCKING, T, NBT_NO_CONSTANT_POWER, T, NBT_EFFICIENCY,  5000, NBT_INV_SIDE_IN, SBIT_L|SBIT_U, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_D|SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_L|SBIT_U, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_D|SBIT_R, NBT_TANK_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B), "RFS", "FMF", "RFS", 'M', OP.casingMachine.dat(aMat), 'R', IL.Processor_Crystal_Ruby, 'S', IL.Processor_Crystal_Sapphire, 'F', IL.FIELD_GENERATORS[1]);
        aMat = MT.Osmiridium;           aRegistry.add("Matter Fabricator (T2)"                              , "Basic Machines"                      , 20412, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  16.0F, NBT_RESISTANCE,  16.0F, NBT_INPUT,  128, NBT_TEXTURE, "massfab", NBT_ENERGY_ACCEPTED, TD.Energy.QU, NBT_RECIPEMAP, RM.Massfab, NBT_CHEAP_OVERCLOCKING, T, NBT_NO_CONSTANT_POWER, T, NBT_EFFICIENCY,  6250, NBT_INV_SIDE_IN, SBIT_L|SBIT_U, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_D|SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_L|SBIT_U, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_D|SBIT_R, NBT_TANK_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B), "RFS", "FMF", "RFS", 'M', OP.casingMachine.dat(aMat), 'R', IL.Processor_Crystal_Ruby, 'S', IL.Processor_Crystal_Sapphire, 'F', IL.FIELD_GENERATORS[2]);
        aMat = MT.Osmiridium;           aRegistry.add("Matter Fabricator (T3)"                              , "Basic Machines"                      , 20413, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  16.0F, NBT_RESISTANCE,  16.0F, NBT_INPUT,  512, NBT_TEXTURE, "massfab", NBT_ENERGY_ACCEPTED, TD.Energy.QU, NBT_RECIPEMAP, RM.Massfab, NBT_CHEAP_OVERCLOCKING, T, NBT_NO_CONSTANT_POWER, T, NBT_EFFICIENCY,  7500, NBT_INV_SIDE_IN, SBIT_L|SBIT_U, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_D|SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_L|SBIT_U, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_D|SBIT_R, NBT_TANK_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B), "RFS", "FMF", "RFS", 'M', OP.casingMachine.dat(aMat), 'R', IL.Processor_Crystal_Ruby, 'S', IL.Processor_Crystal_Sapphire, 'F', IL.FIELD_GENERATORS[3]);
        aMat = MT.Osmiridium;           aRegistry.add("Matter Fabricator (T4)"                              , "Basic Machines"                      , 20414, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  16.0F, NBT_RESISTANCE,  16.0F, NBT_INPUT, 2048, NBT_TEXTURE, "massfab", NBT_ENERGY_ACCEPTED, TD.Energy.QU, NBT_RECIPEMAP, RM.Massfab, NBT_CHEAP_OVERCLOCKING, T, NBT_NO_CONSTANT_POWER, T, NBT_EFFICIENCY,  8750, NBT_INV_SIDE_IN, SBIT_L|SBIT_U, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_D|SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_L|SBIT_U, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_D|SBIT_R, NBT_TANK_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B), "RFS", "FMF", "RFS", 'M', OP.casingMachine.dat(aMat), 'R', IL.Processor_Crystal_Ruby, 'S', IL.Processor_Crystal_Sapphire, 'F', IL.FIELD_GENERATORS[4]);
        aMat = MT.Osmiridium;           aRegistry.add("Matter Fabricator (T5)"                              , "Basic Machines"                      , 20415, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  16.0F, NBT_RESISTANCE,  16.0F, NBT_INPUT, 8192, NBT_TEXTURE, "massfab", NBT_ENERGY_ACCEPTED, TD.Energy.QU, NBT_RECIPEMAP, RM.Massfab, NBT_CHEAP_OVERCLOCKING, T, NBT_NO_CONSTANT_POWER, T, NBT_EFFICIENCY, 10000, NBT_INV_SIDE_IN, SBIT_L|SBIT_U, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_D|SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_L|SBIT_U, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_D|SBIT_R, NBT_TANK_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B), "RFS", "FMF", "RFS", 'M', OP.casingMachine.dat(aMat), 'R', IL.Processor_Crystal_Ruby, 'S', IL.Processor_Crystal_Sapphire, 'F', IL.FIELD_GENERATORS[5]);

        aClass = MultiTileEntityBasicMachine_CH.class;
//      aMat = MT.Osmiridium;           aRegistry.add("Molecular Scanner (T1)"                              , "Basic Machines"                      , 20421, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  16.0F, NBT_RESISTANCE,  16.0F, NBT_INPUT,   32, NBT_TEXTURE, "scannermolecular", NBT_ENERGY_ACCEPTED, TD.Energy.QU, NBT_RECIPEMAP, RM.ScannerMolecular, NBT_EFFICIENCY, 10000, NBT_INV_SIDE_IN, SBIT_L|SBIT_U, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_D|SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT/*, NBT_TANK_SIDE_INPUT, SIDE_BITS[SIDE_LEFT]|SIDE_BITS[SIDE_TOP], NBT_TANK_SIDE_AUTO_INPUT, SIDE_LEFT, NBT_TANK_SIDE_OUTPUT, SIDE_BITS[SIDE_BOTTOM]|SIDE_BITS[SIDE_RIGHT], NBT_TANK_SIDE_AUTO_OUTPUT, SIDE_RIGHT*/, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B), "DXE", "FMF", "RYS", 'M', OP.casingMachine.dat(aMat), 'D', IL.Processor_Crystal_Diamond, 'E', IL.Processor_Crystal_Emerald, 'R', IL.Processor_Crystal_Ruby, 'S', IL.Processor_Crystal_Sapphire, 'F', IL.FIELD_GENERATORS[1], 'X', IL.EMITTERS[1], 'Y', IL.SENSORS[1]);
//      aMat = MT.Osmiridium;           aRegistry.add("Molecular Scanner (T2)"                              , "Basic Machines"                      , 20422, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  16.0F, NBT_RESISTANCE,  16.0F, NBT_INPUT,  128, NBT_TEXTURE, "scannermolecular", NBT_ENERGY_ACCEPTED, TD.Energy.QU, NBT_RECIPEMAP, RM.ScannerMolecular, NBT_EFFICIENCY, 10000, NBT_INV_SIDE_IN, SBIT_L|SBIT_U, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_D|SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT/*, NBT_TANK_SIDE_INPUT, SIDE_BITS[SIDE_LEFT]|SIDE_BITS[SIDE_TOP], NBT_TANK_SIDE_AUTO_INPUT, SIDE_LEFT, NBT_TANK_SIDE_OUTPUT, SIDE_BITS[SIDE_BOTTOM]|SIDE_BITS[SIDE_RIGHT], NBT_TANK_SIDE_AUTO_OUTPUT, SIDE_RIGHT*/, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B), "DXE", "FMF", "RYS", 'M', OP.casingMachine.dat(aMat), 'D', IL.Processor_Crystal_Diamond, 'E', IL.Processor_Crystal_Emerald, 'R', IL.Processor_Crystal_Ruby, 'S', IL.Processor_Crystal_Sapphire, 'F', IL.FIELD_GENERATORS[2], 'X', IL.EMITTERS[2], 'Y', IL.SENSORS[2]);
        aMat = MT.Osmiridium;           aRegistry.add("Molecular Scanner (T3)"                              , "Basic Machines"                      , 20423, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  16.0F, NBT_RESISTANCE,  16.0F, NBT_INPUT,  512, NBT_TEXTURE, "scannermolecular", NBT_ENERGY_ACCEPTED, TD.Energy.QU, NBT_RECIPEMAP, RM.ScannerMolecular, NBT_EFFICIENCY, 10000, NBT_INV_SIDE_IN, SBIT_L|SBIT_U, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_D|SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT/*, NBT_TANK_SIDE_INPUT, SIDE_BITS[SIDE_LEFT]|SIDE_BITS[SIDE_TOP], NBT_TANK_SIDE_AUTO_INPUT, SIDE_LEFT, NBT_TANK_SIDE_OUTPUT, SIDE_BITS[SIDE_BOTTOM]|SIDE_BITS[SIDE_RIGHT], NBT_TANK_SIDE_AUTO_OUTPUT, SIDE_RIGHT*/, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B), "DXE", "FMF", "RYS", 'M', OP.casingMachine.dat(aMat), 'D', IL.Processor_Crystal_Diamond, 'E', IL.Processor_Crystal_Emerald, 'R', IL.Processor_Crystal_Ruby, 'S', IL.Processor_Crystal_Sapphire, 'F', IL.FIELD_GENERATORS[3], 'X', IL.EMITTERS[3], 'Y', IL.SENSORS[3]);
//      aMat = MT.Osmiridium;           aRegistry.add("Molecular Scanner (T4)"                              , "Basic Machines"                      , 20424, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  16.0F, NBT_RESISTANCE,  16.0F, NBT_INPUT, 2048, NBT_TEXTURE, "scannermolecular", NBT_ENERGY_ACCEPTED, TD.Energy.QU, NBT_RECIPEMAP, RM.ScannerMolecular, NBT_EFFICIENCY, 10000, NBT_INV_SIDE_IN, SBIT_L|SBIT_U, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_D|SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT/*, NBT_TANK_SIDE_INPUT, SIDE_BITS[SIDE_LEFT]|SIDE_BITS[SIDE_TOP], NBT_TANK_SIDE_AUTO_INPUT, SIDE_LEFT, NBT_TANK_SIDE_OUTPUT, SIDE_BITS[SIDE_BOTTOM]|SIDE_BITS[SIDE_RIGHT], NBT_TANK_SIDE_AUTO_OUTPUT, SIDE_RIGHT*/, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B), "DXE", "FMF", "RYS", 'M', OP.casingMachine.dat(aMat), 'D', IL.Processor_Crystal_Diamond, 'E', IL.Processor_Crystal_Emerald, 'R', IL.Processor_Crystal_Ruby, 'S', IL.Processor_Crystal_Sapphire, 'F', IL.FIELD_GENERATORS[4], 'X', IL.EMITTERS[4], 'Y', IL.SENSORS[4]);
//      aMat = MT.Osmiridium;           aRegistry.add("Molecular Scanner (T5)"                              , "Basic Machines"                      , 20425, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  16.0F, NBT_RESISTANCE,  16.0F, NBT_INPUT, 8192, NBT_TEXTURE, "scannermolecular", NBT_ENERGY_ACCEPTED, TD.Energy.QU, NBT_RECIPEMAP, RM.ScannerMolecular, NBT_EFFICIENCY, 10000, NBT_INV_SIDE_IN, SBIT_L|SBIT_U, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_D|SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT/*, NBT_TANK_SIDE_INPUT, SIDE_BITS[SIDE_LEFT]|SIDE_BITS[SIDE_TOP], NBT_TANK_SIDE_AUTO_INPUT, SIDE_LEFT, NBT_TANK_SIDE_OUTPUT, SIDE_BITS[SIDE_BOTTOM]|SIDE_BITS[SIDE_RIGHT], NBT_TANK_SIDE_AUTO_OUTPUT, SIDE_RIGHT*/, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B), "DXE", "FMF", "RYS", 'M', OP.casingMachine.dat(aMat), 'D', IL.Processor_Crystal_Diamond, 'E', IL.Processor_Crystal_Emerald, 'R', IL.Processor_Crystal_Ruby, 'S', IL.Processor_Crystal_Sapphire, 'F', IL.FIELD_GENERATORS[5], 'X', IL.EMITTERS[5], 'Y', IL.SENSORS[5]);

        aClass = MultiTileEntityBasicMachine_CH.class;
        aMat = MT.Osmiridium;           aRegistry.add("Matter Replicator (T1)"                              , "Basic Machines"                      , 20431, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  16.0F, NBT_RESISTANCE,  16.0F, NBT_INPUT,   32, NBT_TEXTURE, "replicator", NBT_ENERGY_ACCEPTED, TD.Energy.QU, NBT_RECIPEMAP, RM.Replicator, NBT_CHEAP_OVERCLOCKING, T, NBT_NO_CONSTANT_POWER, T, NBT_EFFICIENCY,  5000, NBT_INV_SIDE_IN, SBIT_L|SBIT_U, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_D|SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_L|SBIT_U, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_D|SBIT_R, NBT_TANK_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B), "EXE", "FMF", "SXS", 'M', OP.casingMachine.dat(aMat), 'E', IL.Processor_Crystal_Emerald, 'S', IL.Processor_Crystal_Sapphire, 'X', IL.EMITTERS[1], 'F', IL.FIELD_GENERATORS[1]);
        aMat = MT.Osmiridium;           aRegistry.add("Matter Replicator (T2)"                              , "Basic Machines"                      , 20432, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  16.0F, NBT_RESISTANCE,  16.0F, NBT_INPUT,  128, NBT_TEXTURE, "replicator", NBT_ENERGY_ACCEPTED, TD.Energy.QU, NBT_RECIPEMAP, RM.Replicator, NBT_CHEAP_OVERCLOCKING, T, NBT_NO_CONSTANT_POWER, T, NBT_EFFICIENCY,  6250, NBT_INV_SIDE_IN, SBIT_L|SBIT_U, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_D|SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_L|SBIT_U, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_D|SBIT_R, NBT_TANK_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B), "EXE", "FMF", "SXS", 'M', OP.casingMachine.dat(aMat), 'E', IL.Processor_Crystal_Emerald, 'S', IL.Processor_Crystal_Sapphire, 'X', IL.EMITTERS[2], 'F', IL.FIELD_GENERATORS[2]);
        aMat = MT.Osmiridium;           aRegistry.add("Matter Replicator (T3)"                              , "Basic Machines"                      , 20433, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  16.0F, NBT_RESISTANCE,  16.0F, NBT_INPUT,  512, NBT_TEXTURE, "replicator", NBT_ENERGY_ACCEPTED, TD.Energy.QU, NBT_RECIPEMAP, RM.Replicator, NBT_CHEAP_OVERCLOCKING, T, NBT_NO_CONSTANT_POWER, T, NBT_EFFICIENCY,  7500, NBT_INV_SIDE_IN, SBIT_L|SBIT_U, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_D|SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_L|SBIT_U, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_D|SBIT_R, NBT_TANK_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B), "EXE", "FMF", "SXS", 'M', OP.casingMachine.dat(aMat), 'E', IL.Processor_Crystal_Emerald, 'S', IL.Processor_Crystal_Sapphire, 'X', IL.EMITTERS[3], 'F', IL.FIELD_GENERATORS[3]);
        aMat = MT.Osmiridium;           aRegistry.add("Matter Replicator (T4)"                              , "Basic Machines"                      , 20434, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  16.0F, NBT_RESISTANCE,  16.0F, NBT_INPUT, 2048, NBT_TEXTURE, "replicator", NBT_ENERGY_ACCEPTED, TD.Energy.QU, NBT_RECIPEMAP, RM.Replicator, NBT_CHEAP_OVERCLOCKING, T, NBT_NO_CONSTANT_POWER, T, NBT_EFFICIENCY,  8750, NBT_INV_SIDE_IN, SBIT_L|SBIT_U, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_D|SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_L|SBIT_U, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_D|SBIT_R, NBT_TANK_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B), "EXE", "FMF", "SXS", 'M', OP.casingMachine.dat(aMat), 'E', IL.Processor_Crystal_Emerald, 'S', IL.Processor_Crystal_Sapphire, 'X', IL.EMITTERS[4], 'F', IL.FIELD_GENERATORS[4]);
        aMat = MT.Osmiridium;           aRegistry.add("Matter Replicator (T5)"                              , "Basic Machines"                      , 20435, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  16.0F, NBT_RESISTANCE,  16.0F, NBT_INPUT, 8192, NBT_TEXTURE, "replicator", NBT_ENERGY_ACCEPTED, TD.Energy.QU, NBT_RECIPEMAP, RM.Replicator, NBT_CHEAP_OVERCLOCKING, T, NBT_NO_CONSTANT_POWER, T, NBT_EFFICIENCY, 10000, NBT_INV_SIDE_IN, SBIT_L|SBIT_U, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_D|SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_L|SBIT_U, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_D|SBIT_R, NBT_TANK_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B), "EXE", "FMF", "SXS", 'M', OP.casingMachine.dat(aMat), 'E', IL.Processor_Crystal_Emerald, 'S', IL.Processor_Crystal_Sapphire, 'X', IL.EMITTERS[5], 'F', IL.FIELD_GENERATORS[5]);

        aClass = MultiTileEntityBasicMachine_CH.class;
        aMat = MT.DATA.Electric_T[1];   aRegistry.add("Nanoscale Fabricator ("                    +VN[1]+")", "Basic Machines"                      , 20441, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,   32, NBT_TEXTURE, "nanofab", NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, RM.Nanofab, NBT_INV_SIDE_IN, SBIT_L|SBIT_U, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_D|SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_L|SBIT_U, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_D|SBIT_R, NBT_TANK_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B), "KAX", "ZMY", "CSC", 'M', OP.casingMachine.dat(aMat), 'C', OD_CIRCUITS[6], 'A', IL.Comp_Laser_Gas_Ar, 'K', IL.Comp_Laser_Gas_Kr, 'X', IL.Comp_Laser_Gas_Xe, 'S', IL.Processor_Crystal_Sapphire, 'Y', IL.EMITTERS[1], 'Z', IL.SENSORS[1]);
        aMat = MT.DATA.Electric_T[2];   aRegistry.add("Nanoscale Fabricator ("                    +VN[2]+")", "Basic Machines"                      , 20442, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,  128, NBT_TEXTURE, "nanofab", NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, RM.Nanofab, NBT_INV_SIDE_IN, SBIT_L|SBIT_U, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_D|SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_L|SBIT_U, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_D|SBIT_R, NBT_TANK_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B), "KAX", "ZMY", "CSC", 'M', OP.casingMachine.dat(aMat), 'C', OD_CIRCUITS[6], 'A', IL.Comp_Laser_Gas_Ar, 'K', IL.Comp_Laser_Gas_Kr, 'X', IL.Comp_Laser_Gas_Xe, 'S', IL.Processor_Crystal_Sapphire, 'Y', IL.EMITTERS[2], 'Z', IL.SENSORS[2]);
        aMat = MT.DATA.Electric_T[3];   aRegistry.add("Nanoscale Fabricator ("                    +VN[3]+")", "Basic Machines"                      , 20443, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,  512, NBT_TEXTURE, "nanofab", NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, RM.Nanofab, NBT_INV_SIDE_IN, SBIT_L|SBIT_U, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_D|SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_L|SBIT_U, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_D|SBIT_R, NBT_TANK_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B), "KAX", "ZMY", "CSC", 'M', OP.casingMachine.dat(aMat), 'C', OD_CIRCUITS[6], 'A', IL.Comp_Laser_Gas_Ar, 'K', IL.Comp_Laser_Gas_Kr, 'X', IL.Comp_Laser_Gas_Xe, 'S', IL.Processor_Crystal_Sapphire, 'Y', IL.EMITTERS[3], 'Z', IL.SENSORS[3]);
        aMat = MT.DATA.Electric_T[4];   aRegistry.add("Nanoscale Fabricator ("                    +VN[4]+")", "Basic Machines"                      , 20444, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT, 2048, NBT_TEXTURE, "nanofab", NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, RM.Nanofab, NBT_INV_SIDE_IN, SBIT_L|SBIT_U, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_D|SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_L|SBIT_U, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_D|SBIT_R, NBT_TANK_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B), "KAX", "ZMY", "CSC", 'M', OP.casingMachine.dat(aMat), 'C', OD_CIRCUITS[6], 'A', IL.Comp_Laser_Gas_Ar, 'K', IL.Comp_Laser_Gas_Kr, 'X', IL.Comp_Laser_Gas_Xe, 'S', IL.Processor_Crystal_Sapphire, 'Y', IL.EMITTERS[4], 'Z', IL.SENSORS[4]);
        aMat = MT.DATA.Electric_T[5];   aRegistry.add("Nanoscale Fabricator ("                    +VN[5]+")", "Basic Machines"                      , 20445, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT, 8192, NBT_TEXTURE, "nanofab", NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, RM.Nanofab, NBT_INV_SIDE_IN, SBIT_L|SBIT_U, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_D|SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_L|SBIT_U, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_D|SBIT_R, NBT_TANK_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B), "KAX", "ZMY", "CSC", 'M', OP.casingMachine.dat(aMat), 'C', OD_CIRCUITS[6], 'A', IL.Comp_Laser_Gas_Ar, 'K', IL.Comp_Laser_Gas_Kr, 'X', IL.Comp_Laser_Gas_Xe, 'S', IL.Processor_Crystal_Sapphire, 'Y', IL.EMITTERS[5], 'Z', IL.SENSORS[5]);

        aClass = MultiTileEntityBasicMachine_CH.class;
        aMat = MT.DATA.Heat_T[1];       aRegistry.add("Catalytic Cracker ("             +aMat.getLocal()+")", "Basic Machines"                      , 20481, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_INPUT,   32, NBT_TEXTURE, "catalyticcracker", NBT_ENERGY_ACCEPTED, TD.Energy.HU, NBT_RECIPEMAP, RM.CatalyticCracking, NBT_INV_SIDE_IN, SBIT_U|SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_TOP, NBT_INV_SIDE_OUT, SBIT_R|SBIT_B, NBT_INV_SIDE_AUTO_OUT, SIDE_BACK, NBT_TANK_SIDE_IN, SBIT_U|SBIT_L, NBT_TANK_SIDE_AUTO_IN, SIDE_LEFT, NBT_TANK_SIDE_OUT, SBIT_R|SBIT_B, NBT_TANK_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_D), "IPI", "ZMZ", "ICI", 'M', OP.casingMachineDouble.dat(aMat), 'C', OP.plateDouble   .dat(ANY.Cu), 'I', OP.plateDouble   .dat(MT.Invar), 'P', OP.pipeQuadruple.dat(aMat), 'Z', OP.dust.dat(MT.OREMATS.Zeolite));
        aMat = MT.DATA.Heat_T[2];       aRegistry.add("Catalytic Cracker ("             +aMat.getLocal()+")", "Basic Machines"                      , 20482, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,  128, NBT_TEXTURE, "catalyticcracker", NBT_ENERGY_ACCEPTED, TD.Energy.HU, NBT_RECIPEMAP, RM.CatalyticCracking, NBT_INV_SIDE_IN, SBIT_U|SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_TOP, NBT_INV_SIDE_OUT, SBIT_R|SBIT_B, NBT_INV_SIDE_AUTO_OUT, SIDE_BACK, NBT_TANK_SIDE_IN, SBIT_U|SBIT_L, NBT_TANK_SIDE_AUTO_IN, SIDE_LEFT, NBT_TANK_SIDE_OUT, SBIT_R|SBIT_B, NBT_TANK_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_D), "IPI", "ZMZ", "ICI", 'M', OP.casingMachineDouble.dat(aMat), 'C', OP.plateTriple   .dat(ANY.Cu), 'I', OP.plateTriple   .dat(MT.Invar), 'P', OP.pipeQuadruple.dat(aMat), 'Z', OP.dust.dat(MT.OREMATS.Zeolite));
        aMat = MT.DATA.Heat_T[3];       aRegistry.add("Catalytic Cracker ("             +aMat.getLocal()+")", "Basic Machines"                      , 20483, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   9.0F, NBT_RESISTANCE,   9.0F, NBT_INPUT,  512, NBT_TEXTURE, "catalyticcracker", NBT_ENERGY_ACCEPTED, TD.Energy.HU, NBT_RECIPEMAP, RM.CatalyticCracking, NBT_INV_SIDE_IN, SBIT_U|SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_TOP, NBT_INV_SIDE_OUT, SBIT_R|SBIT_B, NBT_INV_SIDE_AUTO_OUT, SIDE_BACK, NBT_TANK_SIDE_IN, SBIT_U|SBIT_L, NBT_TANK_SIDE_AUTO_IN, SIDE_LEFT, NBT_TANK_SIDE_OUT, SBIT_R|SBIT_B, NBT_TANK_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_D), "IPI", "ZMZ", "ICI", 'M', OP.casingMachineDouble.dat(aMat), 'C', OP.plateQuadruple.dat(ANY.Cu), 'I', OP.plateQuadruple.dat(MT.Invar), 'P', OP.pipeQuadruple.dat(aMat), 'Z', OP.dust.dat(MT.OREMATS.Zeolite));
        aMat = MT.DATA.Heat_T[4];       aRegistry.add("Catalytic Cracker ("             +aMat.getLocal()+")", "Basic Machines"                      , 20484, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  12.5F, NBT_RESISTANCE,  12.5F, NBT_INPUT, 2048, NBT_TEXTURE, "catalyticcracker", NBT_ENERGY_ACCEPTED, TD.Energy.HU, NBT_RECIPEMAP, RM.CatalyticCracking, NBT_INV_SIDE_IN, SBIT_U|SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_TOP, NBT_INV_SIDE_OUT, SBIT_R|SBIT_B, NBT_INV_SIDE_AUTO_OUT, SIDE_BACK, NBT_TANK_SIDE_IN, SBIT_U|SBIT_L, NBT_TANK_SIDE_AUTO_IN, SIDE_LEFT, NBT_TANK_SIDE_OUT, SBIT_R|SBIT_B, NBT_TANK_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_D), "IPI", "ZMZ", "ICI", 'M', OP.casingMachineDouble.dat(aMat), 'C', OP.plateQuintuple.dat(ANY.Cu), 'I', OP.plateQuintuple.dat(MT.Invar), 'P', OP.pipeQuadruple.dat(aMat), 'Z', OP.dust.dat(MT.OREMATS.Zeolite));

        aClass = MultiTileEntityBasicMachine_CH.class;
        aMat = MT.DATA.Heat_T[1];       aRegistry.add("Steam Cracker ("                 +aMat.getLocal()+")", "Basic Machines"                      , 20491, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_INPUT,   32, NBT_TEXTURE, "steamcracker", NBT_ENERGY_ACCEPTED, TD.Energy.HU, NBT_RECIPEMAP, RM.SteamCracking, NBT_INV_SIDE_IN, SBIT_U|SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_TOP, NBT_INV_SIDE_OUT, SBIT_R|SBIT_B, NBT_INV_SIDE_AUTO_OUT, SIDE_BACK, NBT_TANK_SIDE_IN, SBIT_U|SBIT_L, NBT_TANK_SIDE_AUTO_IN, SIDE_LEFT, NBT_TANK_SIDE_OUT, SBIT_R|SBIT_B, NBT_TANK_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_D, NBT_CANFILL_STEAM, T), "IwI", "PMP", "ICI", 'M', OP.casingMachineDouble.dat(aMat), 'C', OP.plateDouble   .dat(ANY.Cu), 'I', OP.plateDouble   .dat(MT.Invar), 'P', OP.pipeMedium.dat(aMat));
        aMat = MT.DATA.Heat_T[2];       aRegistry.add("Steam Cracker ("                 +aMat.getLocal()+")", "Basic Machines"                      , 20492, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,  128, NBT_TEXTURE, "steamcracker", NBT_ENERGY_ACCEPTED, TD.Energy.HU, NBT_RECIPEMAP, RM.SteamCracking, NBT_INV_SIDE_IN, SBIT_U|SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_TOP, NBT_INV_SIDE_OUT, SBIT_R|SBIT_B, NBT_INV_SIDE_AUTO_OUT, SIDE_BACK, NBT_TANK_SIDE_IN, SBIT_U|SBIT_L, NBT_TANK_SIDE_AUTO_IN, SIDE_LEFT, NBT_TANK_SIDE_OUT, SBIT_R|SBIT_B, NBT_TANK_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_D, NBT_CANFILL_STEAM, T), "IwI", "PMP", "ICI", 'M', OP.casingMachineDouble.dat(aMat), 'C', OP.plateTriple   .dat(ANY.Cu), 'I', OP.plateTriple   .dat(MT.Invar), 'P', OP.pipeMedium.dat(aMat));
        aMat = MT.DATA.Heat_T[3];       aRegistry.add("Steam Cracker ("                 +aMat.getLocal()+")", "Basic Machines"                      , 20493, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   9.0F, NBT_RESISTANCE,   9.0F, NBT_INPUT,  512, NBT_TEXTURE, "steamcracker", NBT_ENERGY_ACCEPTED, TD.Energy.HU, NBT_RECIPEMAP, RM.SteamCracking, NBT_INV_SIDE_IN, SBIT_U|SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_TOP, NBT_INV_SIDE_OUT, SBIT_R|SBIT_B, NBT_INV_SIDE_AUTO_OUT, SIDE_BACK, NBT_TANK_SIDE_IN, SBIT_U|SBIT_L, NBT_TANK_SIDE_AUTO_IN, SIDE_LEFT, NBT_TANK_SIDE_OUT, SBIT_R|SBIT_B, NBT_TANK_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_D, NBT_CANFILL_STEAM, T), "IwI", "PMP", "ICI", 'M', OP.casingMachineDouble.dat(aMat), 'C', OP.plateQuadruple.dat(ANY.Cu), 'I', OP.plateQuadruple.dat(MT.Invar), 'P', OP.pipeMedium.dat(aMat));
        aMat = MT.DATA.Heat_T[4];       aRegistry.add("Steam Cracker ("                 +aMat.getLocal()+")", "Basic Machines"                      , 20494, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  12.5F, NBT_RESISTANCE,  12.5F, NBT_INPUT, 2048, NBT_TEXTURE, "steamcracker", NBT_ENERGY_ACCEPTED, TD.Energy.HU, NBT_RECIPEMAP, RM.SteamCracking, NBT_INV_SIDE_IN, SBIT_U|SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_TOP, NBT_INV_SIDE_OUT, SBIT_R|SBIT_B, NBT_INV_SIDE_AUTO_OUT, SIDE_BACK, NBT_TANK_SIDE_IN, SBIT_U|SBIT_L, NBT_TANK_SIDE_AUTO_IN, SIDE_LEFT, NBT_TANK_SIDE_OUT, SBIT_R|SBIT_B, NBT_TANK_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_D, NBT_CANFILL_STEAM, T), "IwI", "PMP", "ICI", 'M', OP.casingMachineDouble.dat(aMat), 'C', OP.plateQuintuple.dat(ANY.Cu), 'I', OP.plateQuintuple.dat(MT.Invar), 'P', OP.pipeMedium.dat(aMat));

        aClass = MultiTileEntityBasicMachineElectric_CH.class;
        aMat = MT.DATA.Electric_T[1];   aRegistry.add("Lightning Processor ("                     +VN[1]+")", "Basic Machines"                      , 20501, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,   32, NBT_TEXTURE, "lightning", NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, RM.Lightning, NBT_INV_SIDE_IN, SBIT_U|SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R|SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_U|SBIT_L, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_R|SBIT_D, NBT_TANK_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B, NBT_USE_OUTPUT_TANK, T), "XxX", "WwW", "XMX", 'M', OP.casingMachine.dat(aMat), 'W', MT.DATA.WIRES_04[1], 'X', OP.wireGt01.dat(ANY.Iron));
        aMat = MT.DATA.Electric_T[2];   aRegistry.add("Lightning Processor ("                     +VN[2]+")", "Basic Machines"                      , 20502, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,  128, NBT_TEXTURE, "lightning", NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, RM.Lightning, NBT_INV_SIDE_IN, SBIT_U|SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R|SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_U|SBIT_L, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_R|SBIT_D, NBT_TANK_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B, NBT_USE_OUTPUT_TANK, T), "XxX", "WwW", "XMX", 'M', OP.casingMachine.dat(aMat), 'W', MT.DATA.WIRES_04[2], 'X', OP.wireGt02.dat(ANY.Iron));
        aMat = MT.DATA.Electric_T[3];   aRegistry.add("Lightning Processor ("                     +VN[3]+")", "Basic Machines"                      , 20503, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,  512, NBT_TEXTURE, "lightning", NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, RM.Lightning, NBT_INV_SIDE_IN, SBIT_U|SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R|SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_U|SBIT_L, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_R|SBIT_D, NBT_TANK_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B, NBT_USE_OUTPUT_TANK, T), "XxX", "WwW", "XMX", 'M', OP.casingMachine.dat(aMat), 'W', MT.DATA.WIRES_04[3], 'X', OP.wireGt04.dat(ANY.Iron));
        aMat = MT.DATA.Electric_T[4];   aRegistry.add("Lightning Processor ("                     +VN[4]+")", "Basic Machines"                      , 20504, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT, 2048, NBT_TEXTURE, "lightning", NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, RM.Lightning, NBT_INV_SIDE_IN, SBIT_U|SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R|SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_U|SBIT_L, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_R|SBIT_D, NBT_TANK_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B, NBT_USE_OUTPUT_TANK, T), "XxX", "WwW", "XMX", 'M', OP.casingMachine.dat(aMat), 'W', MT.DATA.WIRES_04[4], 'X', OP.wireGt08.dat(ANY.Iron));
        aMat = MT.DATA.Electric_T[5];   aRegistry.add("Lightning Processor ("                     +VN[5]+")", "Basic Machines"                      , 20505, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT, 8192, NBT_TEXTURE, "lightning", NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, RM.Lightning, NBT_INV_SIDE_IN, SBIT_U|SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R|SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_U|SBIT_L, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_R|SBIT_D, NBT_TANK_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B, NBT_USE_OUTPUT_TANK, T), "XxX", "WwW", "XMX", 'M', OP.casingMachine.dat(aMat), 'W', MT.DATA.WIRES_04[5], 'X', OP.wireGt16.dat(ANY.Iron));

        aClass = MultiTileEntityBasicMachine_CH.class;
        aMat = MT.DATA.Kinetic_T[1];    aRegistry.add("Sanding Machine ("               +aMat.getLocal()+")", "Basic Machines"                      , 20511, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   7.0F, NBT_RESISTANCE,   7.0F, NBT_INPUT,   32, NBT_TEXTURE, "sander", NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_RECIPEMAP, RM.Sharpening, NBT_INV_SIDE_IN, SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_U), "SGS", "XXX", "wMh", 'M', OP.casingMachineDouble.dat(aMat), 'S', OP.gearGtSmall.dat(aMat), 'G', OP.gearGt.dat(aMat), 'X', OD.sandstone);
        aMat = MT.DATA.Kinetic_T[2];    aRegistry.add("Sanding Machine ("               +aMat.getLocal()+")", "Basic Machines"                      , 20512, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_INPUT,  128, NBT_TEXTURE, "sander", NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_RECIPEMAP, RM.Sharpening, NBT_INV_SIDE_IN, SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_U), "SGS", "XXX", "wMh", 'M', OP.casingMachineDouble.dat(aMat), 'S', OP.gearGtSmall.dat(aMat), 'G', OP.gearGt.dat(aMat), 'X', OD.sandstone);
        aMat = MT.DATA.Kinetic_T[3];    aRegistry.add("Sanding Machine ("               +aMat.getLocal()+")", "Basic Machines"                      , 20513, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   9.0F, NBT_RESISTANCE,   9.0F, NBT_INPUT,  512, NBT_TEXTURE, "sander", NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_RECIPEMAP, RM.Sharpening, NBT_INV_SIDE_IN, SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_U), "SGS", "XXX", "wMh", 'M', OP.casingMachineDouble.dat(aMat), 'S', OP.gearGtSmall.dat(aMat), 'G', OP.gearGt.dat(aMat), 'X', OD.sandstone);
        aMat = MT.DATA.Kinetic_T[4];    aRegistry.add("Sanding Machine ("               +aMat.getLocal()+")", "Basic Machines"                      , 20514, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  12.5F, NBT_RESISTANCE,  12.5F, NBT_INPUT, 2048, NBT_TEXTURE, "sander", NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_RECIPEMAP, RM.Sharpening, NBT_INV_SIDE_IN, SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_U), "SGS", "XXX", "wMh", 'M', OP.casingMachineDouble.dat(aMat), 'S', OP.gearGtSmall.dat(aMat), 'G', OP.gearGt.dat(aMat), 'X', OD.sandstone);

        aClass = MultiTileEntityBasicMachine_CH.class;
        aMat = MT.DATA.Kinetic_T[1];    aRegistry.add("Burner Mixer ("                  +aMat.getLocal()+")", "Basic Machines"                      , 20521, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   7.0F, NBT_RESISTANCE,   7.0F, NBT_INPUT,   32, NBT_TEXTURE, "burnmixer", NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_RECIPEMAP, RM.BurnMixer, NBT_INV_SIDE_IN, SBIT_L|SBIT_U, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R|SBIT_B, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_L|SBIT_U, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_R|SBIT_B, NBT_TANK_SIDE_AUTO_OUT, SIDE_BACK, NBT_ENERGY_ACCEPTED_SIDES, SBIT_D, NBT_NEEDS_IGNITION, T, NBT_PARALLEL, 4, NBT_PARALLEL_DURATION, T), "PMP", "PRP", "hSw", 'M', OP.casingMachine.dat(aMat), 'S', OP.stick.dat(aMat), 'R', OP.rotor.dat(MT.Invar), 'P', OP.plate.dat(MT.Invar));
        aMat = MT.DATA.Kinetic_T[2];    aRegistry.add("Burner Mixer ("                  +aMat.getLocal()+")", "Basic Machines"                      , 20522, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_INPUT,  128, NBT_TEXTURE, "burnmixer", NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_RECIPEMAP, RM.BurnMixer, NBT_INV_SIDE_IN, SBIT_L|SBIT_U, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R|SBIT_B, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_L|SBIT_U, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_R|SBIT_B, NBT_TANK_SIDE_AUTO_OUT, SIDE_BACK, NBT_ENERGY_ACCEPTED_SIDES, SBIT_D, NBT_NEEDS_IGNITION, T, NBT_PARALLEL, 8, NBT_PARALLEL_DURATION, T), "PMP", "PRP", "hSw", 'M', OP.casingMachine.dat(aMat), 'S', OP.stick.dat(aMat), 'R', OP.rotor.dat(MT.Invar), 'P', OP.plateDouble.dat(MT.Invar));
        aMat = MT.DATA.Kinetic_T[3];    aRegistry.add("Burner Mixer ("                  +aMat.getLocal()+")", "Basic Machines"                      , 20523, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   9.0F, NBT_RESISTANCE,   9.0F, NBT_INPUT,  512, NBT_TEXTURE, "burnmixer", NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_RECIPEMAP, RM.BurnMixer, NBT_INV_SIDE_IN, SBIT_L|SBIT_U, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R|SBIT_B, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_L|SBIT_U, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_R|SBIT_B, NBT_TANK_SIDE_AUTO_OUT, SIDE_BACK, NBT_ENERGY_ACCEPTED_SIDES, SBIT_D, NBT_NEEDS_IGNITION, T, NBT_PARALLEL,16, NBT_PARALLEL_DURATION, T), "PMP", "PRP", "hSw", 'M', OP.casingMachine.dat(aMat), 'S', OP.stick.dat(aMat), 'R', OP.rotor.dat(MT.Invar), 'P', OP.plateTriple.dat(MT.Invar));
        aMat = MT.DATA.Kinetic_T[4];    aRegistry.add("Burner Mixer ("                  +aMat.getLocal()+")", "Basic Machines"                      , 20524, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  12.5F, NBT_RESISTANCE,  12.5F, NBT_INPUT, 2048, NBT_TEXTURE, "burnmixer", NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_RECIPEMAP, RM.BurnMixer, NBT_INV_SIDE_IN, SBIT_L|SBIT_U, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R|SBIT_B, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_L|SBIT_U, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_R|SBIT_B, NBT_TANK_SIDE_AUTO_OUT, SIDE_BACK, NBT_ENERGY_ACCEPTED_SIDES, SBIT_D, NBT_NEEDS_IGNITION, T, NBT_PARALLEL,32, NBT_PARALLEL_DURATION, T), "PMP", "PRP", "hSw", 'M', OP.casingMachine.dat(aMat), 'S', OP.stick.dat(aMat), 'R', OP.rotor.dat(MT.Invar), 'P', OP.plateQuadruple.dat(MT.Invar));

        aClass = MultiTileEntityBasicMachineElectric_CH.class;
        aMat = MT.DATA.Electric_T[1];   aRegistry.add("Plantalyzer ("                             +VN[1]+")", "Basic Machines"                      , 20531, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,   32, NBT_TEXTURE, "plantalyzer", NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, RM.Plantalyzer, NBT_INV_SIDE_IN, SBIT_U|SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R|SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_U|SBIT_D, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B, NBT_PARALLEL, 64), "WXW", "ZMP", "CYC", 'M', OP.casingMachine.dat(aMat), 'C', OD_CIRCUITS[1], 'W', MT.DATA.CABLES_01[1], 'P', IL.Processor_Crystal_Diamond, 'X', IL.EMITTERS[1], 'Y', IL.SENSORS[1], 'Z', OP.treeSapling);
        aMat = MT.DATA.Electric_T[2];   aRegistry.add("Plantalyzer ("                             +VN[2]+")", "Basic Machines"                      , 20532, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,  128, NBT_TEXTURE, "plantalyzer", NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, RM.Plantalyzer, NBT_INV_SIDE_IN, SBIT_U|SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R|SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_U|SBIT_D, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B, NBT_PARALLEL, 64), "WXW", "ZMP", "CYC", 'M', OP.casingMachine.dat(aMat), 'C', OD_CIRCUITS[2], 'W', MT.DATA.CABLES_01[2], 'P', IL.Processor_Crystal_Diamond, 'X', IL.EMITTERS[2], 'Y', IL.SENSORS[2], 'Z', OP.treeSapling);
        aMat = MT.DATA.Electric_T[3];   aRegistry.add("Plantalyzer ("                             +VN[3]+")", "Basic Machines"                      , 20533, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,  512, NBT_TEXTURE, "plantalyzer", NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, RM.Plantalyzer, NBT_INV_SIDE_IN, SBIT_U|SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R|SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_U|SBIT_D, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B, NBT_PARALLEL, 64), "WXW", "ZMP", "CYC", 'M', OP.casingMachine.dat(aMat), 'C', OD_CIRCUITS[3], 'W', MT.DATA.CABLES_01[3], 'P', IL.Processor_Crystal_Diamond, 'X', IL.EMITTERS[3], 'Y', IL.SENSORS[3], 'Z', OP.treeSapling);
        aMat = MT.DATA.Electric_T[4];   aRegistry.add("Plantalyzer ("                             +VN[4]+")", "Basic Machines"                      , 20534, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT, 2048, NBT_TEXTURE, "plantalyzer", NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, RM.Plantalyzer, NBT_INV_SIDE_IN, SBIT_U|SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R|SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_U|SBIT_D, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B, NBT_PARALLEL, 64), "WXW", "ZMP", "CYC", 'M', OP.casingMachine.dat(aMat), 'C', OD_CIRCUITS[4], 'W', MT.DATA.CABLES_01[4], 'P', IL.Processor_Crystal_Diamond, 'X', IL.EMITTERS[4], 'Y', IL.SENSORS[4], 'Z', OP.treeSapling);
        aMat = MT.DATA.Electric_T[5];   aRegistry.add("Plantalyzer ("                             +VN[5]+")", "Basic Machines"                      , 20535, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT, 8192, NBT_TEXTURE, "plantalyzer", NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, RM.Plantalyzer, NBT_INV_SIDE_IN, SBIT_U|SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R|SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_U|SBIT_D, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B, NBT_PARALLEL, 64), "WXW", "ZMP", "CYC", 'M', OP.casingMachine.dat(aMat), 'C', OD_CIRCUITS[5], 'W', MT.DATA.CABLES_01[5], 'P', IL.Processor_Crystal_Diamond, 'X', IL.EMITTERS[5], 'Y', IL.SENSORS[5], 'Z', OP.treeSapling);

        aClass = MultiTileEntityBasicMachineElectric_CH.class;
        aMat = MT.DATA.Electric_T[1];   aRegistry.add("Bumblelyzer ("                             +VN[1]+")", "Basic Machines"                      , 20541, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,   32, NBT_TEXTURE, "bumblelyzer", NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, RM.Bumblelyzer, NBT_INV_SIDE_IN, SBIT_U|SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R|SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_U|SBIT_D, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B, NBT_PARALLEL, 64), "WXW", "ZMP", "CYC", 'M', OP.casingMachine.dat(aMat), 'C', OD_CIRCUITS[1], 'W', MT.DATA.CABLES_01[1], 'P', IL.Processor_Crystal_Diamond, 'X', IL.EMITTERS[1], 'Y', IL.SENSORS[1], 'Z', OD.container1000honey);
        aMat = MT.DATA.Electric_T[2];   aRegistry.add("Bumblelyzer ("                             +VN[2]+")", "Basic Machines"                      , 20542, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,  128, NBT_TEXTURE, "bumblelyzer", NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, RM.Bumblelyzer, NBT_INV_SIDE_IN, SBIT_U|SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R|SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_U|SBIT_D, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B, NBT_PARALLEL, 64), "WXW", "ZMP", "CYC", 'M', OP.casingMachine.dat(aMat), 'C', OD_CIRCUITS[2], 'W', MT.DATA.CABLES_01[2], 'P', IL.Processor_Crystal_Diamond, 'X', IL.EMITTERS[2], 'Y', IL.SENSORS[2], 'Z', OD.container1000honey);
        aMat = MT.DATA.Electric_T[3];   aRegistry.add("Bumblelyzer ("                             +VN[3]+")", "Basic Machines"                      , 20543, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,  512, NBT_TEXTURE, "bumblelyzer", NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, RM.Bumblelyzer, NBT_INV_SIDE_IN, SBIT_U|SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R|SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_U|SBIT_D, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B, NBT_PARALLEL, 64), "WXW", "ZMP", "CYC", 'M', OP.casingMachine.dat(aMat), 'C', OD_CIRCUITS[3], 'W', MT.DATA.CABLES_01[3], 'P', IL.Processor_Crystal_Diamond, 'X', IL.EMITTERS[3], 'Y', IL.SENSORS[3], 'Z', OD.container1000honey);
        aMat = MT.DATA.Electric_T[4];   aRegistry.add("Bumblelyzer ("                             +VN[4]+")", "Basic Machines"                      , 20544, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT, 2048, NBT_TEXTURE, "bumblelyzer", NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, RM.Bumblelyzer, NBT_INV_SIDE_IN, SBIT_U|SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R|SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_U|SBIT_D, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B, NBT_PARALLEL, 64), "WXW", "ZMP", "CYC", 'M', OP.casingMachine.dat(aMat), 'C', OD_CIRCUITS[4], 'W', MT.DATA.CABLES_01[4], 'P', IL.Processor_Crystal_Diamond, 'X', IL.EMITTERS[4], 'Y', IL.SENSORS[4], 'Z', OD.container1000honey);
        aMat = MT.DATA.Electric_T[5];   aRegistry.add("Bumblelyzer ("                             +VN[5]+")", "Basic Machines"                      , 20545, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT, 8192, NBT_TEXTURE, "bumblelyzer", NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, RM.Bumblelyzer, NBT_INV_SIDE_IN, SBIT_U|SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R|SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_U|SBIT_D, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B, NBT_PARALLEL, 64), "WXW", "ZMP", "CYC", 'M', OP.casingMachine.dat(aMat), 'C', OD_CIRCUITS[5], 'W', MT.DATA.CABLES_01[5], 'P', IL.Processor_Crystal_Diamond, 'X', IL.EMITTERS[5], 'Y', IL.SENSORS[5], 'Z', OD.container1000honey);

        aClass = MultiTileEntityBasicMachine_CH.class;
        aMat = MT.DATA.Kinetic_T[1];    aRegistry.add("Debarker ("                      +aMat.getLocal()+")", "Basic Machines"                      , 20551, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   7.0F, NBT_RESISTANCE,   7.0F, NBT_INPUT,   32, NBT_TEXTURE, "debarker", NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_RECIPEMAP, RM.Debarker, NBT_INV_SIDE_IN, SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_U|SBIT_D, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B), "RPG", "wMG", 'M', OP.casingMachine.dat(aMat), 'G', OP.gearGtSmall.dat(aMat), 'R', OP.rotor.dat(MT.StainlessSteel), 'P', OP.pipeSmall    .dat(MT.StainlessSteel));
        aMat = MT.DATA.Kinetic_T[2];    aRegistry.add("Debarker ("                      +aMat.getLocal()+")", "Basic Machines"                      , 20552, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_INPUT,  128, NBT_TEXTURE, "debarker", NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_RECIPEMAP, RM.Debarker, NBT_INV_SIDE_IN, SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_U|SBIT_D, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B), "RPG", "wMG", 'M', OP.casingMachine.dat(aMat), 'G', OP.gearGtSmall.dat(aMat), 'R', OP.rotor.dat(MT.StainlessSteel), 'P', OP.pipeMedium   .dat(MT.StainlessSteel));
        aMat = MT.DATA.Kinetic_T[3];    aRegistry.add("Debarker ("                      +aMat.getLocal()+")", "Basic Machines"                      , 20553, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   9.0F, NBT_RESISTANCE,   9.0F, NBT_INPUT,  512, NBT_TEXTURE, "debarker", NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_RECIPEMAP, RM.Debarker, NBT_INV_SIDE_IN, SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_U|SBIT_D, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B), "RPG", "wMG", 'M', OP.casingMachine.dat(aMat), 'G', OP.gearGtSmall.dat(aMat), 'R', OP.rotor.dat(MT.StainlessSteel), 'P', OP.pipeLarge    .dat(MT.StainlessSteel));
        aMat = MT.DATA.Kinetic_T[4];    aRegistry.add("Debarker ("                      +aMat.getLocal()+")", "Basic Machines"                      , 20554, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  12.5F, NBT_RESISTANCE,  12.5F, NBT_INPUT, 2048, NBT_TEXTURE, "debarker", NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_RECIPEMAP, RM.Debarker, NBT_INV_SIDE_IN, SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_U|SBIT_D, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B), "RPG", "wMG", 'M', OP.casingMachine.dat(aMat), 'G', OP.gearGtSmall.dat(aMat), 'R', OP.rotor.dat(MT.StainlessSteel), 'P', OP.pipeHuge     .dat(MT.StainlessSteel));

        aClass = MultiTileEntityBasicMachine_CH.class;
        aMat = MT.DATA.Electric_T[1];   aRegistry.add("Freezer (T1)"                                        , "Basic Machines"                      , 20561, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,   32, NBT_TEXTURE, "freezer", NBT_ENERGY_ACCEPTED, TD.Energy.CU, NBT_RECIPEMAP, RM.Freezer, NBT_INV_SIDE_IN, SBIT_U|SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R|SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_U|SBIT_L, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_R|SBIT_D, NBT_TANK_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B), "hPw", "PMP", "PSP", 'M', OP.casingMachine.dat(aMat), 'S', OP.plate           .dat(MT.Si), 'P', OP.plate          .dat(MT.StainlessSteel));
        aMat = MT.DATA.Electric_T[2];   aRegistry.add("Freezer (T2)"                                        , "Basic Machines"                      , 20562, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,  128, NBT_TEXTURE, "freezer", NBT_ENERGY_ACCEPTED, TD.Energy.CU, NBT_RECIPEMAP, RM.Freezer, NBT_INV_SIDE_IN, SBIT_U|SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R|SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_U|SBIT_L, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_R|SBIT_D, NBT_TANK_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B), "hPw", "PMP", "PSP", 'M', OP.casingMachine.dat(aMat), 'S', OP.plateDouble     .dat(MT.Si), 'P', OP.plateDouble    .dat(MT.StainlessSteel));
        aMat = MT.DATA.Electric_T[3];   aRegistry.add("Freezer (T3)"                                        , "Basic Machines"                      , 20563, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,  512, NBT_TEXTURE, "freezer", NBT_ENERGY_ACCEPTED, TD.Energy.CU, NBT_RECIPEMAP, RM.Freezer, NBT_INV_SIDE_IN, SBIT_U|SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R|SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_U|SBIT_L, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_R|SBIT_D, NBT_TANK_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B), "hPw", "PMP", "PSP", 'M', OP.casingMachine.dat(aMat), 'S', OP.plateTriple     .dat(MT.Si), 'P', OP.plateTriple    .dat(MT.StainlessSteel));
        aMat = MT.DATA.Electric_T[4];   aRegistry.add("Freezer (T4)"                                        , "Basic Machines"                      , 20564, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT, 2048, NBT_TEXTURE, "freezer", NBT_ENERGY_ACCEPTED, TD.Energy.CU, NBT_RECIPEMAP, RM.Freezer, NBT_INV_SIDE_IN, SBIT_U|SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R|SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_U|SBIT_L, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_R|SBIT_D, NBT_TANK_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B), "hPw", "PMP", "PSP", 'M', OP.casingMachine.dat(aMat), 'S', OP.plateQuadruple  .dat(MT.Si), 'P', OP.plateQuadruple .dat(MT.StainlessSteel));
        aMat = MT.DATA.Electric_T[5];   aRegistry.add("Freezer (T5)"                                        , "Basic Machines"                      , 20565, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT, 8192, NBT_TEXTURE, "freezer", NBT_ENERGY_ACCEPTED, TD.Energy.CU, NBT_RECIPEMAP, RM.Freezer, NBT_INV_SIDE_IN, SBIT_U|SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R|SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_U|SBIT_L, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_R|SBIT_D, NBT_TANK_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B), "hPw", "PMP", "PSP", 'M', OP.casingMachine.dat(aMat), 'S', OP.plateQuintuple  .dat(MT.Si), 'P', OP.plateQuadruple .dat(MT.StainlessSteel));

        aClass = MultiTileEntityBasicMachine_CH.class;
        aMat = MT.DATA.Electric_T[1];   aRegistry.add("Cryo Mixer (T1)"                                     , "Basic Machines"                      , 20571, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,   32, NBT_TEXTURE, "cryomixer", NBT_ENERGY_ACCEPTED, TD.Energy.CU, NBT_RECIPEMAP, RM.CryoMixer, NBT_INV_SIDE_IN, SBIT_L|SBIT_U, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R|SBIT_B, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_L|SBIT_U, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_R|SBIT_B, NBT_TANK_SIDE_AUTO_OUT, SIDE_BACK, NBT_ENERGY_ACCEPTED_SIDES, SBIT_D, NBT_PARALLEL, 4, NBT_PARALLEL_DURATION, T), "PMP", "PRP", "hSw", 'M', OP.casingMachine.dat(aMat), 'R', OP.rotor.dat(MT.StainlessSteel), 'S', OP.plate           .dat(MT.Si), 'P', OP.plate          .dat(MT.StainlessSteel));
        aMat = MT.DATA.Electric_T[2];   aRegistry.add("Cryo Mixer (T2)"                                     , "Basic Machines"                      , 20572, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,  128, NBT_TEXTURE, "cryomixer", NBT_ENERGY_ACCEPTED, TD.Energy.CU, NBT_RECIPEMAP, RM.CryoMixer, NBT_INV_SIDE_IN, SBIT_L|SBIT_U, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R|SBIT_B, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_L|SBIT_U, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_R|SBIT_B, NBT_TANK_SIDE_AUTO_OUT, SIDE_BACK, NBT_ENERGY_ACCEPTED_SIDES, SBIT_D, NBT_PARALLEL, 8, NBT_PARALLEL_DURATION, T), "PMP", "PRP", "hSw", 'M', OP.casingMachine.dat(aMat), 'R', OP.rotor.dat(MT.StainlessSteel), 'S', OP.plateDouble     .dat(MT.Si), 'P', OP.plateDouble    .dat(MT.StainlessSteel));
        aMat = MT.DATA.Electric_T[3];   aRegistry.add("Cryo Mixer (T3)"                                     , "Basic Machines"                      , 20573, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,  512, NBT_TEXTURE, "cryomixer", NBT_ENERGY_ACCEPTED, TD.Energy.CU, NBT_RECIPEMAP, RM.CryoMixer, NBT_INV_SIDE_IN, SBIT_L|SBIT_U, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R|SBIT_B, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_L|SBIT_U, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_R|SBIT_B, NBT_TANK_SIDE_AUTO_OUT, SIDE_BACK, NBT_ENERGY_ACCEPTED_SIDES, SBIT_D, NBT_PARALLEL,16, NBT_PARALLEL_DURATION, T), "PMP", "PRP", "hSw", 'M', OP.casingMachine.dat(aMat), 'R', OP.rotor.dat(MT.StainlessSteel), 'S', OP.plateTriple     .dat(MT.Si), 'P', OP.plateTriple    .dat(MT.StainlessSteel));
        aMat = MT.DATA.Electric_T[4];   aRegistry.add("Cryo Mixer (T4)"                                     , "Basic Machines"                      , 20574, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT, 2048, NBT_TEXTURE, "cryomixer", NBT_ENERGY_ACCEPTED, TD.Energy.CU, NBT_RECIPEMAP, RM.CryoMixer, NBT_INV_SIDE_IN, SBIT_L|SBIT_U, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R|SBIT_B, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_L|SBIT_U, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_R|SBIT_B, NBT_TANK_SIDE_AUTO_OUT, SIDE_BACK, NBT_ENERGY_ACCEPTED_SIDES, SBIT_D, NBT_PARALLEL,32, NBT_PARALLEL_DURATION, T), "PMP", "PRP", "hSw", 'M', OP.casingMachine.dat(aMat), 'R', OP.rotor.dat(MT.StainlessSteel), 'S', OP.plateQuadruple  .dat(MT.Si), 'P', OP.plateQuadruple .dat(MT.StainlessSteel));
        aMat = MT.DATA.Electric_T[5];   aRegistry.add("Cryo Mixer (T5)"                                     , "Basic Machines"                      , 20575, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT, 8192, NBT_TEXTURE, "cryomixer", NBT_ENERGY_ACCEPTED, TD.Energy.CU, NBT_RECIPEMAP, RM.CryoMixer, NBT_INV_SIDE_IN, SBIT_L|SBIT_U, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R|SBIT_B, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_L|SBIT_U, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_R|SBIT_B, NBT_TANK_SIDE_AUTO_OUT, SIDE_BACK, NBT_ENERGY_ACCEPTED_SIDES, SBIT_D, NBT_PARALLEL,64, NBT_PARALLEL_DURATION, T), "PMP", "PRP", "hSw", 'M', OP.casingMachine.dat(aMat), 'R', OP.rotor.dat(MT.StainlessSteel), 'S', OP.plateQuintuple  .dat(MT.Si), 'P', OP.plateQuadruple .dat(MT.StainlessSteel));

        aClass = MultiTileEntityBasicMachineElectric_CH.class;
        aMat = MT.DATA.Electric_T[1];   aRegistry.add("Boxinator ("                               +VN[1]+")", "Basic Machines"                      , 20581, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,   32, NBT_TEXTURE, "boxinator", NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, RM.Boxinator, NBT_INV_SIDE_IN, SBIT_L|SBIT_U, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_D), "wP", "CY", "CM", 'M', OP.casingMachine.dat(aMat), 'P', IL.PISTONS[1], 'Y', IL.CONVEYERS[1], 'C', OD_CIRCUITS[1]);
        aMat = MT.DATA.Electric_T[2];   aRegistry.add("Boxinator ("                               +VN[2]+")", "Basic Machines"                      , 20582, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,  128, NBT_TEXTURE, "boxinator", NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, RM.Boxinator, NBT_INV_SIDE_IN, SBIT_L|SBIT_U, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_D), "wP", "CY", "CM", 'M', OP.casingMachine.dat(aMat), 'P', IL.PISTONS[2], 'Y', IL.CONVEYERS[2], 'C', OD_CIRCUITS[2]);
        aMat = MT.DATA.Electric_T[3];   aRegistry.add("Boxinator ("                               +VN[3]+")", "Basic Machines"                      , 20583, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,  512, NBT_TEXTURE, "boxinator", NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, RM.Boxinator, NBT_INV_SIDE_IN, SBIT_L|SBIT_U, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_D), "wP", "CY", "CM", 'M', OP.casingMachine.dat(aMat), 'P', IL.PISTONS[3], 'Y', IL.CONVEYERS[3], 'C', OD_CIRCUITS[3]);
        aMat = MT.DATA.Electric_T[4];   aRegistry.add("Boxinator ("                               +VN[4]+")", "Basic Machines"                      , 20584, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT, 2048, NBT_TEXTURE, "boxinator", NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, RM.Boxinator, NBT_INV_SIDE_IN, SBIT_L|SBIT_U, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_D), "wP", "CY", "CM", 'M', OP.casingMachine.dat(aMat), 'P', IL.PISTONS[4], 'Y', IL.CONVEYERS[4], 'C', OD_CIRCUITS[4]);
        aMat = MT.DATA.Electric_T[5];   aRegistry.add("Boxinator ("                               +VN[5]+")", "Basic Machines"                      , 20585, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT, 8192, NBT_TEXTURE, "boxinator", NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, RM.Boxinator, NBT_INV_SIDE_IN, SBIT_L|SBIT_U, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_D), "wP", "CY", "CM", 'M', OP.casingMachine.dat(aMat), 'P', IL.PISTONS[5], 'Y', IL.CONVEYERS[5], 'C', OD_CIRCUITS[5]);

        aClass = MultiTileEntityBasicMachineElectric_CH.class;
        aMat = MT.DATA.Electric_T[1];   aRegistry.add("Unboxinator ("                             +VN[1]+")", "Basic Machines"                      , 20591, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,   32, NBT_TEXTURE, "unboxinator", NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, RM.Unboxinator, NBT_INV_SIDE_IN, SBIT_L|SBIT_U, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_D), "Pw", "YC", "MC", 'M', OP.casingMachine.dat(aMat), 'P', IL.PISTONS[1], 'Y', IL.CONVEYERS[1], 'C', OD_CIRCUITS[1]);
        aMat = MT.DATA.Electric_T[2];   aRegistry.add("Unboxinator ("                             +VN[2]+")", "Basic Machines"                      , 20592, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,  128, NBT_TEXTURE, "unboxinator", NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, RM.Unboxinator, NBT_INV_SIDE_IN, SBIT_L|SBIT_U, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_D), "Pw", "YC", "MC", 'M', OP.casingMachine.dat(aMat), 'P', IL.PISTONS[2], 'Y', IL.CONVEYERS[2], 'C', OD_CIRCUITS[2]);
        aMat = MT.DATA.Electric_T[3];   aRegistry.add("Unboxinator ("                             +VN[3]+")", "Basic Machines"                      , 20593, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,  512, NBT_TEXTURE, "unboxinator", NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, RM.Unboxinator, NBT_INV_SIDE_IN, SBIT_L|SBIT_U, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_D), "Pw", "YC", "MC", 'M', OP.casingMachine.dat(aMat), 'P', IL.PISTONS[3], 'Y', IL.CONVEYERS[3], 'C', OD_CIRCUITS[3]);
        aMat = MT.DATA.Electric_T[4];   aRegistry.add("Unboxinator ("                             +VN[4]+")", "Basic Machines"                      , 20594, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT, 2048, NBT_TEXTURE, "unboxinator", NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, RM.Unboxinator, NBT_INV_SIDE_IN, SBIT_L|SBIT_U, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_D), "Pw", "YC", "MC", 'M', OP.casingMachine.dat(aMat), 'P', IL.PISTONS[4], 'Y', IL.CONVEYERS[4], 'C', OD_CIRCUITS[4]);
        aMat = MT.DATA.Electric_T[5];   aRegistry.add("Unboxinator ("                             +VN[5]+")", "Basic Machines"                      , 20595, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT, 8192, NBT_TEXTURE, "unboxinator", NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, RM.Unboxinator, NBT_INV_SIDE_IN, SBIT_L|SBIT_U, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_D), "Pw", "YC", "MC", 'M', OP.casingMachine.dat(aMat), 'P', IL.PISTONS[5], 'Y', IL.CONVEYERS[5], 'C', OD_CIRCUITS[5]);
    }

    protected static void machines4(MultiTileEntityRegistry aRegistry, MultiTileEntityBlock aMetal, MultiTileEntityBlock aMetalChips, MultiTileEntityBlock aMetalWires, MultiTileEntityBlock aMachine, MultiTileEntityBlock aWooden, MultiTileEntityBlock aBush, MultiTileEntityBlock aStone, MultiTileEntityBlock aWool, MultiTileEntityBlock aTNT, MultiTileEntityBlock aHive, MultiTileEntityBlock aUtilMetal, MultiTileEntityBlock aUtilStone, MultiTileEntityBlock aUtilWood, MultiTileEntityBlock aUtilWool, OreDictMaterial aMat, Class<? extends TileEntity> aClass) {
        // 消耗 TU 的机器也使用，魔改类现在也兼容了
        aClass = MultiTileEntityBasicMachine_CH.class;
        aMat = MT.StainlessSteel;       aRegistry.add("Coagulator"                                          , "Basic Machines"                      , 22000, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_INPUT, 1, NBT_TEXTURE, "coagulator"    , NBT_ENERGY_ACCEPTED, TD.Energy.TU, NBT_NO_CONSTANT_POWER, T, NBT_RECIPEMAP, RM.Coagulator                                                                           , NBT_INV_SIDE_OUT, SBIT_D|SBIT_R   , NBT_INV_SIDE_AUTO_OUT, SIDE_BOTTOM    , NBT_TANK_SIDE_IN, SBIT_U|SBIT_L   , NBT_TANK_SIDE_AUTO_IN, SIDE_TOP                                                                               , NBT_ENERGY_ACCEPTED_SIDES, SBIT_B|SBIT_L|SBIT_R                       ), "T T", "hMw", "TdT", 'M', OP.casingMachine.dat(aMat), 'T', OP.screw.dat(aMat));
        aMat = MT.StainlessSteel;       aRegistry.add("Generifier"                                          , "Basic Machines"                      , 22001, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_INPUT, 1, NBT_TEXTURE, "generifier"    , NBT_ENERGY_ACCEPTED, TD.Energy.TU, NBT_NO_CONSTANT_POWER, T, NBT_RECIPEMAP, RM.Generifier   , NBT_INV_SIDE_IN, SBIT_U|SBIT_L    , NBT_INV_SIDE_AUTO_IN, SIDE_LEFT   , NBT_INV_SIDE_OUT, SBIT_D|SBIT_R   , NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT     , NBT_TANK_SIDE_IN, SBIT_U|SBIT_L   , NBT_TANK_SIDE_AUTO_IN, SIDE_TOP   , NBT_TANK_SIDE_OUT, SBIT_D|SBIT_R  , NBT_TANK_SIDE_AUTO_OUT, SIDE_BOTTOM   , NBT_ENERGY_ACCEPTED_SIDES, SBIT_B                 , NBT_PARALLEL,  100), "ChC", "CMC", "CwC", 'M', OP.casingMachine.dat(aMat), 'C', OP.casingSmall.dat(aMat));
        aMat = MT.StainlessSteel;       aRegistry.add("Bath"                                                , "Basic Machines"                      , 22002, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_INPUT, 1, NBT_TEXTURE, "bath"          , NBT_ENERGY_ACCEPTED, TD.Energy.TU, NBT_NO_CONSTANT_POWER, T, NBT_RECIPEMAP, RM.Bath         , NBT_INV_SIDE_IN, SBIT_U|SBIT_L    , NBT_INV_SIDE_AUTO_IN, SIDE_LEFT   , NBT_INV_SIDE_OUT, SBIT_D|SBIT_R   , NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT     , NBT_TANK_SIDE_IN, SBIT_U|SBIT_L   , NBT_TANK_SIDE_AUTO_IN, SIDE_TOP   , NBT_TANK_SIDE_OUT, SBIT_D|SBIT_R  , NBT_TANK_SIDE_AUTO_OUT, SIDE_BOTTOM   , NBT_ENERGY_ACCEPTED_SIDES, SBIT_B                                     , NBT_CANFILL_STEAM, T), "CwC", "PMP", "PPP", 'M', OP.casingMachine.dat(aMat), 'C', OP.casingSmall.dat(aMat), 'P', OP.plate.dat(aMat));
        aMat = MT.StainlessSteel;       aRegistry.add("Fermenter"                                           , "Basic Machines"                      , 22003, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_INPUT,32, NBT_TEXTURE, "fermenter"     , NBT_ENERGY_ACCEPTED, TD.Energy.HU                          , NBT_RECIPEMAP, RM.Fermenter    , NBT_INV_SIDE_IN, SBIT_B|SBIT_L    , NBT_INV_SIDE_AUTO_IN, SIDE_LEFT   , NBT_INV_SIDE_OUT, SBIT_R          , NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT     , NBT_TANK_SIDE_IN, SBIT_B|SBIT_L   , NBT_TANK_SIDE_AUTO_IN, SIDE_BACK  , NBT_TANK_SIDE_OUT, SBIT_U         , NBT_TANK_SIDE_AUTO_OUT, SIDE_TOP      , NBT_ENERGY_ACCEPTED_SIDES, SBIT_D                                     ), "wMh", "PPP", "BCB", 'M', OP.casingMachine.dat(aMat), 'C', OP.plateDouble.dat(ANY.Cu), 'B', Blocks.brick_block, 'P', OP.pipeLarge.dat(aMat));
        aMat = MT.StainlessSteel;       aRegistry.add("Autoclave"                                           , "Basic Machines"                      , 22004, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_INPUT, 1, NBT_TEXTURE, "autoclave"     , NBT_ENERGY_ACCEPTED, TD.Energy.TU, NBT_NO_CONSTANT_POWER, T, NBT_RECIPEMAP, RM.Autoclave    , NBT_INV_SIDE_IN, SBIT_U|SBIT_L    , NBT_INV_SIDE_AUTO_IN, SIDE_LEFT   , NBT_INV_SIDE_OUT, SBIT_B|SBIT_R   , NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT     , NBT_TANK_SIDE_IN, SBIT_D|SBIT_L   , NBT_TANK_SIDE_AUTO_IN, SIDE_BOTTOM, NBT_TANK_SIDE_OUT, SBIT_B|SBIT_R  , NBT_TANK_SIDE_AUTO_OUT, SIDE_BACK     , NBT_ENERGY_ACCEPTED_SIDES, SBIT_B                                     , NBT_CANFILL_STEAM, T), "CwC", "PMP", "GPG", 'M', OP.casingMachineQuadruple.dat(aMat), 'C', OP.casingSmall.dat(aMat), 'G', OP.gearGtSmall.dat(aMat), 'P', OP.pipeSmall.dat(aMat));
    }

    protected static void kinetic(MultiTileEntityRegistry aRegistry, MultiTileEntityBlock aMetal, MultiTileEntityBlock aMetalChips, MultiTileEntityBlock aMetalWires, MultiTileEntityBlock aMachine, MultiTileEntityBlock aWooden, MultiTileEntityBlock aBush, MultiTileEntityBlock aStone, MultiTileEntityBlock aWool, MultiTileEntityBlock aTNT, MultiTileEntityBlock aHive, MultiTileEntityBlock aUtilMetal, MultiTileEntityBlock aUtilStone, MultiTileEntityBlock aUtilWood, MultiTileEntityBlock aUtilWool, OreDictMaterial aMat, Class<? extends TileEntity> aClass) {
        // Axles
        aClass = MultiTileEntityAxle.class;
        for (AttributesAxleWood_CH AXLE : DATA_MACHINES_KINETIC.AxleWood) {
            aMat = AXLE.material;
            aRegistry.add(AXLE.sizeName + "Wooden Axle", "Axles and Gearboxes", AXLE.ID, 24819, aClass, aMat.mToolQuality, AXLE.stackSize, aWooden ,
                    UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS, AXLE.nbtHardness, NBT_RESISTANCE, AXLE.nbtResistance, NBT_FLAMMABILITY, AXLE.nbtFlammability, NBT_PIPESIZE, AXLE.nbtSpeedLimit, NBT_PIPEBANDWIDTH, AXLE.nbtPowerLimit, NBT_DIAMETER, AXLE.nbtDiameter),
                    AXLE.recipeObject);
        }
        for (AttributesAxle_CH AXLE : DATA_MACHINES_KINETIC.Axle) {
            aMat = AXLE.material;
            aRegistry.add(AXLE.sizeName + aMat.mNameLocal + " Axle", "Axles and Gearboxes", AXLE.ID, 24819, aClass, aMat.mToolQuality, AXLE.stackSize, aMachine,
                    UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS, AXLE.nbtHardness, NBT_RESISTANCE, AXLE.nbtResistance, NBT_PIPESIZE, AXLE.nbtSpeedLimit, NBT_PIPEBANDWIDTH, AXLE.nbtPowerLimit, NBT_DIAMETER, AXLE.nbtDiameter),
                    AXLE.recipeObject);
        }
        // Engine rotations
        for (AttributesEngineRotationWood_CH ENGINE_ROTATION : DATA_MACHINES_KINETIC.EngineRotationWood) {
            aMat = ENGINE_ROTATION.material;
            aRegistry.add("Wooden Rotation Engine", "Axles and Gearboxes", ENGINE_ROTATION.ID, 24819, MultiTileEntityEngineRotation.class, aMat.mToolQuality, ENGINE_ROTATION.stackSize, aWooden ,
                    UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS, ENGINE_ROTATION.nbtHardness, NBT_RESISTANCE, ENGINE_ROTATION.nbtResistance, NBT_FLAMMABILITY, ENGINE_ROTATION.nbtFlammability, NBT_INPUT, ENGINE_ROTATION.nbtInput, NBT_OUTPUT, ENGINE_ROTATION.nbtOutput, NBT_WASTE_ENERGY, ENGINE_ROTATION.nbtWasteEnergy, NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_ENERGY_EMITTED, TD.Energy.KU),
                    ENGINE_ROTATION.recipeObject);
        }
        for (AttributesEngineRotation_CH ENGINE_ROTATION : DATA_MACHINES_KINETIC.EngineRotation) {
            aMat = ENGINE_ROTATION.material;
            aRegistry.add(aMat.mNameLocal + " Rotation Engine", "Axles and Gearboxes", ENGINE_ROTATION.ID, 24819, MultiTileEntityEngineRotation.class     , aMat.mToolQuality, ENGINE_ROTATION.stackSize, aMachine,
                    UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS, ENGINE_ROTATION.nbtHardness, NBT_RESISTANCE, ENGINE_ROTATION.nbtResistance, NBT_INPUT, ENGINE_ROTATION.nbtInput, NBT_OUTPUT, ENGINE_ROTATION.nbtOutput, NBT_WASTE_ENERGY, ENGINE_ROTATION.nbtWasteEnergy, NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_ENERGY_EMITTED, TD.Energy.KU),
                    ENGINE_ROTATION.recipeObject);
        }
        // Transformer rotations
        for (AttributesTransformerRotationWood_CH TRANSFORMER : DATA_MACHINES_KINETIC.TransformerRotationWood) {
            aMat = TRANSFORMER.material;
            aRegistry.add("Wooden Transformer Gearbox", "Axles and Gearboxes", TRANSFORMER.ID, 24819, MultiTileEntityTransformerRotation_CH.class, aMat.mToolQuality, TRANSFORMER.stackSize, aWooden ,
                    UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS, TRANSFORMER.nbtHardness, NBT_RESISTANCE, TRANSFORMER.nbtResistance, NBT_FLAMMABILITY, TRANSFORMER.nbtFlammability, NBT_OUTPUT, TRANSFORMER.nbtOutput, NBT_MULTIPLIER, TRANSFORMER.nbtMultiplier, NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_ENERGY_EMITTED, TD.Energy.RU),
                    TRANSFORMER.recipeObject);
        }
        for (AttributesTransformerRotation_CH TRANSFORMER : DATA_MACHINES_KINETIC.TransformerRotation) {
            aMat = TRANSFORMER.material;
            aRegistry.add(aMat.mNameLocal + " Transformer Gearbox", "Axles and Gearboxes", TRANSFORMER.ID, 24819, MultiTileEntityTransformerRotation_CH.class, aMat.mToolQuality, TRANSFORMER.stackSize, aMachine,
                    UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS, TRANSFORMER.nbtHardness, NBT_RESISTANCE, TRANSFORMER.nbtResistance, NBT_OUTPUT, TRANSFORMER.nbtOutput, NBT_MULTIPLIER, TRANSFORMER.nbtMultiplier, NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_ENERGY_EMITTED, TD.Energy.RU),
                    TRANSFORMER.recipeObject);
        }
        // Gear boxes
        for (AttributesGearBoxWood_CH GEAR_BOX : DATA_MACHINES_KINETIC.GearBoxWood) {
            aMat = GEAR_BOX.material;
            aRegistry.add("Custom Wooden Gearbox", "Axles and Gearboxes", GEAR_BOX.ID, 24819, MultiTileEntityGearBox.class, aMat.mToolQuality, GEAR_BOX.stackSize, aWooden ,
                    UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS, GEAR_BOX.nbtHardness, NBT_RESISTANCE, GEAR_BOX.nbtResistance, NBT_FLAMMABILITY, GEAR_BOX.nbtFlammability, NBT_INPUT   , GEAR_BOX.nbtInput),
                    GEAR_BOX.recipeObject);
        }
        for (AttributesGearBox_CH GEAR_BOX : DATA_MACHINES_KINETIC.GearBox) {
            aMat = GEAR_BOX.material;
            aRegistry.add("Custom " + aMat.mNameLocal + " Gearbox", "Axles and Gearboxes", GEAR_BOX.ID, 24819, MultiTileEntityGearBox.class, aMat.mToolQuality, GEAR_BOX.stackSize, aMachine,
                    UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS, GEAR_BOX.nbtHardness, NBT_RESISTANCE, GEAR_BOX.nbtResistance, NBT_INPUT   , GEAR_BOX.nbtInput),
                    GEAR_BOX.recipeObject);
        }
    }

    protected static void sensors(MultiTileEntityRegistry aRegistry, MultiTileEntityBlock aMetal, MultiTileEntityBlock aMetalChips, MultiTileEntityBlock aMetalWires, MultiTileEntityBlock aMachine, MultiTileEntityBlock aWooden, MultiTileEntityBlock aBush, MultiTileEntityBlock aStone, MultiTileEntityBlock aWool, MultiTileEntityBlock aTNT, MultiTileEntityBlock aHive, MultiTileEntityBlock aUtilMetal, MultiTileEntityBlock aUtilStone, MultiTileEntityBlock aUtilWood, MultiTileEntityBlock aUtilWool, OreDictMaterial aMat, Class<? extends TileEntity> aClass) {
        aRegistry.add("Thermometer Sensor"                                  , "Sensors"                             , 31000, 31015, MultiTileEntityThermometer.class                        ,                 1, 16, aUtilMetal     , null, "WRW", "RXR", "WPW", 'P', OP.plateDouble.dat(MT.TinAlloy), 'W', OP.wireFine.dat(MT.RedAlloy), 'R', OD.itemRedstone, 'G', OD.blockGlassColorless, 'B', OP.bolt.dat(MT.TinAlloy), 'C', Items.comparator, 'X', IL.Thermometer_Quicksilver);
        aRegistry.add("Luminometer Sensor"                                  , "Sensors"                             , 31002, 31015, MultiTileEntityLuminometer.class                        ,                 1, 16, aUtilMetal     , null, "WGW", "YXY", "WPW", 'P', OP.plateDouble.dat(MT.TinAlloy), 'W', OP.wireFine.dat(MT.RedAlloy), 'R', OD.itemRedstone, 'G', OD.blockGlassColorless, 'B', OP.bolt.dat(MT.TinAlloy), 'C', Items.comparator, 'X', OP.plate.dat(ANY.Si), 'Y', OP.wireFine.dat(ANY.Cu));
        aRegistry.add("Chronometer Sensor"                                  , "Sensors"                             , 31003, 31015, MultiTileEntityChronometer.class                        ,                 1, 16, aUtilMetal     , null, "WGW", "GXG", "WPW", 'P', OP.plateDouble.dat(MT.TinAlloy), 'W', OP.wireFine.dat(MT.RedAlloy), 'R', OD.itemRedstone, 'G', OD.blockGlassColorless, 'B', OP.bolt.dat(MT.TinAlloy), 'C', Items.comparator, 'X', Items.clock);
        aRegistry.add("Gibbl-O-Meter Sensor"                                , "Sensors"                             , 31001, 31015, MultiTileEntityGibblometer.class                        ,                 1, 16, aUtilMetal     , null, "WPW", "BXB", "WPW", 'P', OP.plateDouble.dat(MT.TinAlloy), 'W', OP.wireFine.dat(MT.RedAlloy), 'R', OD.itemRedstone, 'G', OD.blockGlassColorless, 'B', OP.bolt.dat(MT.TinAlloy), 'C', Items.comparator, 'X', OP.gem.dat(ANY.SiO2));
        aRegistry.add("Item-O-Meter Sensor"                                 , "Sensors"                             , 31004, 31015, MultiTileEntityItemometer.class                         ,                 1, 16, aUtilMetal     , null, "WYW", "BXB", "WPW", 'P', OP.plateDouble.dat(MT.TinAlloy), 'W', OP.wireFine.dat(MT.RedAlloy), 'R', OD.itemRedstone, 'G', OD.blockGlassColorless, 'B', OP.bolt.dat(MT.TinAlloy), 'C', Items.comparator, 'X', OD.pressurePlateGold, 'Y', OD.craftingChest);
        aRegistry.add("Stack-O-Meter Sensor"                                , "Sensors"                             , 31005, 31015, MultiTileEntityStackometer.class                        ,                 1, 16, aUtilMetal     , null, "WYW", "BXB", "WPW", 'P', OP.plateDouble.dat(MT.TinAlloy), 'W', OP.wireFine.dat(MT.RedAlloy), 'R', OD.itemRedstone, 'G', OD.blockGlassColorless, 'B', OP.bolt.dat(MT.TinAlloy), 'C', Items.comparator, 'X', OD.pressurePlateIron, 'Y', OD.craftingChest);
        aRegistry.add("Fluid-O-Meter Sensor"                                , "Sensors"                             , 31006, 31015, MultiTileEntityFluidometer.class                        ,                 1, 16, aUtilMetal     , null, "WYW", "BXB", "WPW", 'P', OP.plateDouble.dat(MT.TinAlloy), 'W', OP.wireFine.dat(MT.RedAlloy), 'R', OD.itemRedstone, 'G', OD.blockGlassColorless, 'B', OP.bolt.dat(MT.TinAlloy), 'C', Items.comparator, 'X', OD.pressurePlateGold, 'Y', Items.bucket);
        aRegistry.add("Bucket-O-Meter Sensor"                               , "Sensors"                             , 31007, 31015, MultiTileEntityBucketometer.class                       ,                 1, 16, aUtilMetal     , null, "WYW", "BXB", "WPW", 'P', OP.plateDouble.dat(MT.TinAlloy), 'W', OP.wireFine.dat(MT.RedAlloy), 'R', OD.itemRedstone, 'G', OD.blockGlassColorless, 'B', OP.bolt.dat(MT.TinAlloy), 'C', Items.comparator, 'X', OD.pressurePlateIron, 'Y', Items.bucket);
        aRegistry.add("Light Weight-O-Meter Sensor"                         , "Sensors"                             , 31010, 31015, MultiTileEntityWeightometerLight.class                  ,                 1, 16, aUtilMetal     , null, "WPW", "BXB", "WPW", 'P', OP.plateDouble.dat(MT.TinAlloy), 'W', OP.wireFine.dat(MT.RedAlloy), 'R', OD.itemRedstone, 'G', OD.blockGlassColorless, 'B', OP.bolt.dat(MT.TinAlloy), 'C', Items.comparator, 'X', OD.pressurePlateWood);
        aRegistry.add("Medium Weight-O-Meter Sensor"                        , "Sensors"                             , 31011, 31015, MultiTileEntityWeightometerMedium.class                 ,                 1, 16, aUtilMetal     , null, "WPW", "BXB", "WPW", 'P', OP.plateDouble.dat(MT.TinAlloy), 'W', OP.wireFine.dat(MT.RedAlloy), 'R', OD.itemRedstone, 'G', OD.blockGlassColorless, 'B', OP.bolt.dat(MT.TinAlloy), 'C', Items.comparator, 'X', OD.pressurePlateStone);
        aRegistry.add("Heavy Weight-O-Meter Sensor"                         , "Sensors"                             , 31012, 31015, MultiTileEntityWeightometerHeavy.class                  ,                 1, 16, aUtilMetal     , null, "WPW", "BXB", "WPW", 'P', OP.plateDouble.dat(MT.TinAlloy), 'W', OP.wireFine.dat(MT.RedAlloy), 'R', OD.itemRedstone, 'G', OD.blockGlassColorless, 'B', OP.bolt.dat(MT.TinAlloy), 'C', Items.comparator, 'X', OD.pressurePlateGold);
        aRegistry.add("Super Heavy Weight-O-Meter Sensor"                   , "Sensors"                             , 31013, 31015, MultiTileEntityWeightometerSuperHeavy.class             ,                 1, 16, aUtilMetal     , null, "WPW", "BXB", "WPW", 'P', OP.plateDouble.dat(MT.TinAlloy), 'W', OP.wireFine.dat(MT.RedAlloy), 'R', OD.itemRedstone, 'G', OD.blockGlassColorless, 'B', OP.bolt.dat(MT.TinAlloy), 'C', Items.comparator, 'X', OD.pressurePlateIron);
        aRegistry.add("TPS Sensor"                                          , "Sensors"                             , 31016, 31015, MultiTileEntityTPSmeter.class                           ,                 1, 16, aUtilMetal     , null, "WGW", "XXX", "WPW", 'P', OP.plateDouble.dat(MT.TinAlloy), 'W', OP.wireFine.dat(MT.RedAlloy), 'R', OD.itemRedstone, 'G', OD.blockGlassColorless, 'B', OP.bolt.dat(MT.TinAlloy), 'C', Items.comparator, 'X', Items.clock);
        aRegistry.add("Player Counter Sensor"                               , "Sensors"                             , 31017, 31015, MultiTileEntityPlayerCounter.class                      ,                 1, 16, aUtilMetal     , null, "WGW", "CXC", "WPW", 'P', OP.plateDouble.dat(MT.TinAlloy), 'W', OP.wireFine.dat(MT.RedAlloy), 'R', OD.itemRedstone, 'G', OD.blockGlassColorless, 'B', OP.bolt.dat(MT.TinAlloy), 'C', Items.comparator, 'X', OD.pressurePlateStone);
        aRegistry.add("Progress Sensor"                                     , "Sensors"                             , 31018, 31015, MultiTileEntityProgressmeter.class                      ,                 1, 16, aUtilMetal     , null, "WGW", "CXC", "WPW", 'P', OP.plateDouble.dat(MT.TinAlloy), 'W', OP.wireFine.dat(MT.RedAlloy), 'R', OD.itemRedstone, 'G', OD.blockGlassColorless, 'B', OP.bolt.dat(MT.TinAlloy), 'C', Items.comparator, 'X', OP.gearGtSmall.dat(MT.Brass));
        aRegistry.add("Geiger Counter Sensor"                               , "Sensors"                             , 31020, 31015, MultiTileEntityGeigerCounter.class                      ,                 1, 16, aUtilMetal     , null, "WGW", "YXY", "WPW", 'P', OP.plateDouble.dat(MT.TinAlloy), 'W', OP.wireFine.dat(MT.RedAlloy), 'R', OD.itemRedstone, 'G', OD.blockGlassColorless, 'B', OP.bolt.dat(MT.TinAlloy), 'C', Items.comparator, 'X', IL.Geiger_Counter, 'Y', OP.plateDouble.dat(MT.Pb));
        aRegistry.add("Electrometer Sensor"                                 , "Sensors"                             , 31015, 31015, MultiTileEntityElectrometer.class                       ,                 1, 16, aUtilMetal     , null, "WGW", "YXY", "WPW", 'P', OP.plateDouble.dat(MT.TinAlloy), 'W', OP.wireFine.dat(MT.RedAlloy), 'R', OD.itemRedstone, 'G', OD.blockGlassColorless, 'B', OP.bolt.dat(MT.TinAlloy), 'C', Items.comparator, 'X', OD.lever, 'Y', OP.wireFine.dat(ANY.Cu));
        aRegistry.add("Tachometer Sensor"                                   , "Sensors"                             , 31019, 31015, MultiTileEntityTachometer.class                         ,                 1, 16, aUtilMetal     , null, "WGW", "YXY", "WPW", 'P', OP.plateDouble.dat(MT.TinAlloy), 'W', OP.wireFine.dat(MT.RedAlloy), 'R', OD.itemRedstone, 'G', OD.blockGlassColorless, 'B', OP.bolt.dat(MT.TinAlloy), 'C', Items.comparator, 'X', OP.gearGt.dat(MT.Brass), 'Y', OP.gearGtSmall.dat(MT.Brass));
        aRegistry.add("Laser-O-Meter Sensor"                                , "Sensors"                             , 31021, 31015, MultiTileEntityLaserometer.class                        ,                 1, 16, aUtilMetal     , null, "WGW", "YXY", "WPW", 'P', OP.plateDouble.dat(MT.TinAlloy), 'W', OP.wireFine.dat(MT.RedAlloy), 'R', OD.itemRedstone, 'G', OD.blockGlassColorless, 'B', OP.bolt.dat(MT.TinAlloy), 'C', Items.comparator, 'X', IL.SENSORS[1], 'Y', OP.wireFine.dat(ANY.Cu));

        aRegistry.add(T, "Flow-O-Meter Sensor"                      , "Sensors"                             , 31030, 31015, MultiTileEntityFlowometer_CH.class                      ,                 1, 16, aUtilMetal     , null, "WYW", "ZXZ", "WPW", 'P', OP.plateDouble.dat(MT.TinAlloy), 'W', OP.wireFine.dat(MT.RedAlloy), 'R', OD.itemRedstone, 'G', OD.blockGlassColorless, 'B', OP.bolt.dat(MT.TinAlloy), 'C', Items.comparator, 'X', OD.pressurePlateGold, 'Y', OP.rotor.dat(MT.TinAlloy), 'Z', OP.ring.dat(MT.Rubber));
        aRegistry.add(T, "Bucket Flow-O-Meter Sensor"               , "Sensors"                             , 31031, 31015, MultiTileEntityFlowometerBucket_CH.class                ,                 1, 16, aUtilMetal     , null, "WYW", "ZXZ", "WPW", 'P', OP.plateDouble.dat(MT.TinAlloy), 'W', OP.wireFine.dat(MT.RedAlloy), 'R', OD.itemRedstone, 'G', OD.blockGlassColorless, 'B', OP.bolt.dat(MT.TinAlloy), 'C', Items.comparator, 'X', OD.pressurePlateIron, 'Y', OP.rotor.dat(MT.TinAlloy), 'Z', OP.ring.dat(MT.Rubber));
    }
}
