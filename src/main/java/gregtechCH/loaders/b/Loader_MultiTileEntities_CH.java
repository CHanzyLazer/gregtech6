package gregtechCH.loaders.b;

import static gregapi.data.CS.*;
import static gregtechCH.config.ConfigJson_CH.DATA_MACHINES;
import static gregtechCH.data.CS_CH.*;
import static gregtechCH.config.ConfigForge_CH.*;

import gregapi.block.MaterialMachines;
import gregapi.block.MaterialScoopable;
import gregapi.block.multitileentity.MultiTileEntityBlock;
import gregapi.block.multitileentity.MultiTileEntityRegistry;
import gregapi.data.*;
import gregapi.data.CS.ItemsGT;
import gregapi.oredict.OreDictItemData;
import gregapi.oredict.OreDictMaterial;
import gregapi.util.OM;
import gregapi.util.UT;
import gregtech.loaders.b.Loader_MultiTileEntities;
import gregtech.tileentity.energy.converters.*;
import gregtech.tileentity.energy.generators.MultiTileEntityGeneratorBrick;
import gregtech.tileentity.energy.generators.MultiTileEntityGeneratorFluidBed;
import gregtech.tileentity.energy.generators.MultiTileEntityGeneratorGas;
import gregtech.tileentity.energy.generators.MultiTileEntityGeneratorHotFluid;
import gregtech.tileentity.energy.generators.MultiTileEntityGeneratorLiquid;
import gregtech.tileentity.energy.generators.MultiTileEntityGeneratorMetal;
import gregtech.tileentity.energy.generators.MultiTileEntityMotorLiquid;
import gregtech.tileentity.energy.reactors.MultiTileEntityReactorCore1x1;
import gregtech.tileentity.energy.reactors.MultiTileEntityReactorCore2x2;
import gregtech.tileentity.energy.reactors.MultiTileEntityReactorRodAbsorber;
import gregtech.tileentity.energy.reactors.MultiTileEntityReactorRodBase;
import gregtech.tileentity.energy.reactors.MultiTileEntityReactorRodBreeder;
import gregtech.tileentity.energy.reactors.MultiTileEntityReactorRodDepleted;
import gregtech.tileentity.energy.reactors.MultiTileEntityReactorRodModerator;
import gregtech.tileentity.energy.reactors.MultiTileEntityReactorRodNuclear;
import gregtech.tileentity.energy.reactors.MultiTileEntityReactorRodReflector;
import gregtechCH.config.ConfigCategories_CH;
import net.minecraft.block.Block;
import net.minecraft.block.material.Material;
import net.minecraft.init.Blocks;
import net.minecraft.tileentity.TileEntity;

import java.util.*;

public class Loader_MultiTileEntities_CH extends Loader_MultiTileEntities implements Runnable  {
    @Override
    public void run() {
        MultiTileEntityRegistry aRegistry = MultiTileEntityRegistry.getRegistry("gt.multitileentity");

        MultiTileEntityBlock
                aMetal      = MultiTileEntityBlock.getOrCreate(MD.GT.mID, "iron"         , Material.iron             , Block.soundTypeMetal, TOOL_pickaxe, 0, 0, 15, F, F)
                , aMetalChips = MultiTileEntityBlock.getOrCreate(MD.GT.mID, "iron"         , Material.iron             , Block.soundTypeMetal, TOOL_shovel , 0, 0, 15, F, F)
                , aMetalWires = MultiTileEntityBlock.getOrCreate(MD.GT.mID, "machine"      , MaterialMachines.instance , Block.soundTypeMetal, TOOL_cutter , 0, 0, 15, F, F)
                , aMachine    = MultiTileEntityBlock.getOrCreate(MD.GT.mID, "machine"      , MaterialMachines.instance , Block.soundTypeMetal, TOOL_wrench , 0, 0, 15, F, F)
                , aWooden     = MultiTileEntityBlock.getOrCreate(MD.GT.mID, "wood"         , Material.wood             , Block.soundTypeWood , TOOL_axe    , 0, 0, 15, F, F)
                , aBush       = MultiTileEntityBlock.getOrCreate(MD.GT.mID, "leaves"       , Material.leaves           , Block.soundTypeGrass, TOOL_axe    , 0, 0, 15, F, F)
                , aStone      = MultiTileEntityBlock.getOrCreate(MD.GT.mID, "rock"         , Material.rock             , Block.soundTypeStone, TOOL_pickaxe, 0, 0, 15, F, F)
                , aWool       = MultiTileEntityBlock.getOrCreate(MD.GT.mID, "cloth"        , Material.cloth            , Block.soundTypeCloth, TOOL_shears , 0, 0, 15, F, F)
                , aTNT        = MultiTileEntityBlock.getOrCreate(MD.GT.mID, "tnt"          , Material.tnt              , Block.soundTypeGrass, TOOL_pickaxe, 0, 0, 15, F, F)
                , aUtilMetal  = MultiTileEntityBlock.getOrCreate(MD.GT.mID, "redstoneLight", Material.redstoneLight    , Block.soundTypeMetal, TOOL_pickaxe, 0, 0, 15, F, F)
                , aUtilStone  = MultiTileEntityBlock.getOrCreate(MD.GT.mID, "redstoneLight", Material.redstoneLight    , Block.soundTypeStone, TOOL_pickaxe, 0, 0, 15, F, F)
                , aUtilWood   = MultiTileEntityBlock.getOrCreate(MD.GT.mID, "redstoneLight", Material.redstoneLight    , Block.soundTypeWood , TOOL_axe    , 0, 0, 15, F, F)
                , aUtilWool   = MultiTileEntityBlock.getOrCreate(MD.GT.mID, "redstoneLight", Material.redstoneLight    , Block.soundTypeCloth, TOOL_shears , 0, 0, 15, F, F)
                , aHive       = MultiTileEntityBlock.getOrCreate(MD.GT.mID, "rock"         , MaterialScoopable.instance, Block.soundTypeWood , TOOL_scoop  , 0, 0, 15, F, F)
                ;

        storages   (aRegistry, aMetal, aMetalChips, aMetalWires, aMachine, aWooden, aBush, aStone, aWool, aTNT, aHive, aUtilMetal, aUtilStone, aUtilWood, aUtilWool, MT.NULL, null);
        crucible   (aRegistry, aMetal, aMetalChips, aMetalWires, aMachine, aWooden, aBush, aStone, aWool, aTNT, aHive, aUtilMetal, aUtilStone, aUtilWood, aUtilWool, MT.NULL, null);
        if (DATA_GTCH.enableMachineUnsorted1){
            unsorted1  (aRegistry, aMetal, aMetalChips, aMetalWires, aMachine, aWooden, aBush, aStone, aWool, aTNT, aHive, aUtilMetal, aUtilStone, aUtilWood, aUtilWool, MT.NULL, null);
        } else {
            Loader_MultiTileEntities.unsorted1(aRegistry, aMetal, aMetalChips, aMetalWires, aMachine, aWooden, aBush, aStone, aWool, aTNT, aHive, aUtilMetal, aUtilStone, aUtilWood, aUtilWool, MT.NULL, null);
        }
        unsorted2  (aRegistry, aMetal, aMetalChips, aMetalWires, aMachine, aWooden, aBush, aStone, aWool, aTNT, aHive, aUtilMetal, aUtilStone, aUtilWood, aUtilWool, MT.NULL, null);
        computer   (aRegistry, aMetal, aMetalChips, aMetalWires, aMachine, aWooden, aBush, aStone, aWool, aTNT, aHive, aUtilMetal, aUtilStone, aUtilWood, aUtilWool, MT.NULL, null);
        multiblocks(aRegistry, aMetal, aMetalChips, aMetalWires, aMachine, aWooden, aBush, aStone, aWool, aTNT, aHive, aUtilMetal, aUtilStone, aUtilWood, aUtilWool, MT.NULL, null);
        machines1  (aRegistry, aMetal, aMetalChips, aMetalWires, aMachine, aWooden, aBush, aStone, aWool, aTNT, aHive, aUtilMetal, aUtilStone, aUtilWood, aUtilWool, MT.NULL, null);
        machines2  (aRegistry, aMetal, aMetalChips, aMetalWires, aMachine, aWooden, aBush, aStone, aWool, aTNT, aHive, aUtilMetal, aUtilStone, aUtilWood, aUtilWool, MT.NULL, null);
        machines3  (aRegistry, aMetal, aMetalChips, aMetalWires, aMachine, aWooden, aBush, aStone, aWool, aTNT, aHive, aUtilMetal, aUtilStone, aUtilWood, aUtilWool, MT.NULL, null);
        machines4  (aRegistry, aMetal, aMetalChips, aMetalWires, aMachine, aWooden, aBush, aStone, aWool, aTNT, aHive, aUtilMetal, aUtilStone, aUtilWood, aUtilWool, MT.NULL, null);
        kinetic    (aRegistry, aMetal, aMetalChips, aMetalWires, aMachine, aWooden, aBush, aStone, aWool, aTNT, aHive, aUtilMetal, aUtilStone, aUtilWood, aUtilWool, MT.NULL, null);
        connectors (aRegistry, aMetal, aMetalChips, aMetalWires, aMachine, aWooden, aBush, aStone, aWool, aTNT, aHive, aUtilMetal, aUtilStone, aUtilWood, aUtilWool, MT.NULL, null);
        extenders  (aRegistry, aMetal, aMetalChips, aMetalWires, aMachine, aWooden, aBush, aStone, aWool, aTNT, aHive, aUtilMetal, aUtilStone, aUtilWood, aUtilWool, MT.NULL, null);
        sensors    (aRegistry, aMetal, aMetalChips, aMetalWires, aMachine, aWooden, aBush, aStone, aWool, aTNT, aHive, aUtilMetal, aUtilStone, aUtilWood, aUtilWool, MT.NULL, null);
        misc       (aRegistry, aMetal, aMetalChips, aMetalWires, aMachine, aWooden, aBush, aStone, aWool, aTNT, aHive, aUtilMetal, aUtilStone, aUtilWood, aUtilWool, MT.NULL, null);
    }

    protected static void unsorted1(MultiTileEntityRegistry aRegistry, MultiTileEntityBlock aMetal, MultiTileEntityBlock aMetalChips, MultiTileEntityBlock aMetalWires, MultiTileEntityBlock aMachine, MultiTileEntityBlock aWooden, MultiTileEntityBlock aBush, MultiTileEntityBlock aStone, MultiTileEntityBlock aWool, MultiTileEntityBlock aTNT, MultiTileEntityBlock aHive, MultiTileEntityBlock aUtilMetal, MultiTileEntityBlock aUtilStone, MultiTileEntityBlock aUtilWood, MultiTileEntityBlock aUtilWool, OreDictMaterial aMat, Class<? extends TileEntity> aClass) {
        long tinput, toutput, tefficiency;

        // Burning Boxes
        aClass = MultiTileEntityGeneratorBrick.class;
        for (String mtName : DATA_MACHINES.BurningBoxBrick.keySet()) {
            aMat = OreDictMaterial.get(mtName);
            aRegistry.add("Brick Burning Box (Solid)",                      "Burning Boxes",  DATA_MACHINES.BurningBoxBrick.get(mtName).ID,       1104, aClass, aMat.mToolQuality, DATA_MACHINES.BurningBoxBrick.get(mtName).stackSize,         aStone,
                    UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   DATA_MACHINES.BurningBoxBrick.get(mtName).nbtHardness,        NBT_RESISTANCE,   DATA_MACHINES.BurningBoxBrick.get(mtName).nbtResistance,        NBT_FUELMAP, FM.Furnace, NBT_EFFICIENCY,  DATA_MACHINES.BurningBoxBrick.get(mtName).nbtEfficiency,        NBT_OUTPUT,  DATA_MACHINES.BurningBoxBrick.get(mtName).nbtOutput,         NBT_ENERGY_EMITTED, TD.Energy.HU),
                    DATA_MACHINES.BurningBoxBrick.get(mtName).recipeObject);
        }
        aClass = MultiTileEntityGeneratorMetal.class;
        for (String mtName : DATA_MACHINES.BurningBoxSolid.keySet()) {
            aMat = OreDictMaterial.get(mtName);
            aRegistry.add("Burning Box (Solid, "+aMat.getLocal()+")",       "Burning Boxes",  DATA_MACHINES.BurningBoxSolid.get(mtName).ID,       1104, aClass, aMat.mToolQuality, DATA_MACHINES.BurningBoxSolid.get(mtName).stackSize,         aMachine,
                    UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   DATA_MACHINES.BurningBoxSolid.get(mtName).nbtHardness,        NBT_RESISTANCE,   DATA_MACHINES.BurningBoxSolid.get(mtName).nbtResistance,        NBT_FUELMAP, FM.Furnace, NBT_EFFICIENCY,  DATA_MACHINES.BurningBoxSolid.get(mtName).nbtEfficiency,        NBT_OUTPUT,  DATA_MACHINES.BurningBoxSolid.get(mtName).nbtOutput,         NBT_ENERGY_EMITTED, TD.Energy.HU),
                    DATA_MACHINES.BurningBoxSolid.get(mtName).recipeObject);
        }
        for (String mtName : DATA_MACHINES.DenseBurningBoxSolid.keySet()) {
            aMat = OreDictMaterial.get(mtName);
            aRegistry.add("Dense Burning Box (Solid, "+aMat.getLocal()+")", "Burning Boxes",  DATA_MACHINES.DenseBurningBoxSolid.get(mtName).ID,  1104, aClass, aMat.mToolQuality, DATA_MACHINES.DenseBurningBoxSolid.get(mtName).stackSize,    aMachine,
                    UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   DATA_MACHINES.DenseBurningBoxSolid.get(mtName).nbtHardness,   NBT_RESISTANCE,   DATA_MACHINES.DenseBurningBoxSolid.get(mtName).nbtResistance,   NBT_FUELMAP, FM.Furnace, NBT_EFFICIENCY,  DATA_MACHINES.DenseBurningBoxSolid.get(mtName).nbtEfficiency,   NBT_OUTPUT,  DATA_MACHINES.DenseBurningBoxSolid.get(mtName).nbtOutput,    NBT_ENERGY_EMITTED, TD.Energy.HU),
                    DATA_MACHINES.DenseBurningBoxSolid.get(mtName).recipeObject);
        }

        // Steam Boilers
        aClass = MultiTileEntityBoilerTank.class;
        for (String mtName : DATA_MACHINES.SteamBoilerTank.keySet()) {
            aMat = OreDictMaterial.get(mtName);
            aRegistry.add("Steam Boiler Tank ("+aMat.getLocal()+")",        "Steam Boilers",  DATA_MACHINES.SteamBoilerTank.get(mtName).ID,         1204, aClass, aMat.mToolQuality, DATA_MACHINES.SteamBoilerTank.get(mtName).stackSize,           aMachine,
                    UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   DATA_MACHINES.SteamBoilerTank.get(mtName).nbtHardness,          NBT_RESISTANCE,   DATA_MACHINES.SteamBoilerTank.get(mtName).nbtResistance,          NBT_CAPACITY,  DATA_MACHINES.SteamBoilerTank.get(mtName).nbtCapacity,       NBT_CAPACITY_SU,  DATA_MACHINES.SteamBoilerTank.get(mtName).nbtCapacity_SU,         NBT_INPUT_HU,  DATA_MACHINES.SteamBoilerTank.get(mtName).nbtInput_HU,       NBT_EFFICIENCY_CH, DATA_MACHINES.SteamBoilerTank.get(mtName).nbtEfficiency_CH,          NBT_ENERGY_ACCEPTED, TD.Energy.HU),
                    DATA_MACHINES.SteamBoilerTank.get(mtName).recipeObject);
        }
        for (String mtName : DATA_MACHINES.StrongSteamBoilerTank.keySet()) {
            aMat = OreDictMaterial.get(mtName);
            aRegistry.add("Steam Boiler Tank ("+aMat.getLocal()+")",        "Steam Boilers",  DATA_MACHINES.StrongSteamBoilerTank.get(mtName).ID,   1204, aClass, aMat.mToolQuality, DATA_MACHINES.StrongSteamBoilerTank.get(mtName).stackSize,     aMachine,
                    UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   DATA_MACHINES.StrongSteamBoilerTank.get(mtName).nbtHardness,    NBT_RESISTANCE,   DATA_MACHINES.StrongSteamBoilerTank.get(mtName).nbtResistance,    NBT_CAPACITY,  DATA_MACHINES.StrongSteamBoilerTank.get(mtName).nbtCapacity, NBT_CAPACITY_SU,  DATA_MACHINES.StrongSteamBoilerTank.get(mtName).nbtCapacity_SU,   NBT_INPUT_HU,  DATA_MACHINES.StrongSteamBoilerTank.get(mtName).nbtInput_HU, NBT_EFFICIENCY_CH, DATA_MACHINES.StrongSteamBoilerTank.get(mtName).nbtEfficiency_CH,    NBT_ENERGY_ACCEPTED, TD.Energy.HU),
                    DATA_MACHINES.StrongSteamBoilerTank.get(mtName).recipeObject);
        }

        // Steam Engines
        aClass = MultiTileEntityEngineSteam.class;
        for (String mtName : DATA_MACHINES.SteamEngine.keySet()) {
            aMat = OreDictMaterial.get(mtName);
            aRegistry.add("Steam Engine ("+aMat.getLocal()+")",             "Engines",        DATA_MACHINES.SteamEngine.get(mtName).ID,             1304, aClass, aMat.mToolQuality, DATA_MACHINES.SteamEngine.get(mtName).stackSize,               Objects.equals(mtName, MT.IronWood.mNameInternal) ? aWooden : aMachine,
                    UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   DATA_MACHINES.SteamEngine.get(mtName).nbtHardness,              NBT_RESISTANCE,   DATA_MACHINES.SteamEngine.get(mtName).nbtResistance,              NBT_EFFICIENCY, DATA_MACHINES.SteamEngine.get(mtName).nbtEfficiency,        NBT_CAPACITY,    DATA_MACHINES.SteamEngine.get(mtName).nbtCapacity,                 NBT_OUTPUT,    DATA_MACHINES.SteamEngine.get(mtName).nbtOutput,             NBT_ENERGY_EMITTED, TD.Energy.KU),
                    DATA_MACHINES.SteamEngine.get(mtName).recipeObject);
        }
        for (String mtName : DATA_MACHINES.StrongSteamEngine.keySet()) {
            aMat = OreDictMaterial.get(mtName);
            aRegistry.add("Strong Steam Engine ("+aMat.getLocal()+")",      "Engines",        DATA_MACHINES.StrongSteamEngine.get(mtName).ID,       1304, aClass, aMat.mToolQuality, DATA_MACHINES.StrongSteamEngine.get(mtName).stackSize,         Objects.equals(mtName, MT.IronWood.mNameInternal) ? aWooden : aMachine,
                    UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   DATA_MACHINES.StrongSteamEngine.get(mtName).nbtHardness,        NBT_RESISTANCE,   DATA_MACHINES.StrongSteamEngine.get(mtName).nbtResistance,        NBT_EFFICIENCY, DATA_MACHINES.StrongSteamEngine.get(mtName).nbtEfficiency,  NBT_CAPACITY,    DATA_MACHINES.StrongSteamEngine.get(mtName).nbtCapacity,           NBT_OUTPUT,    DATA_MACHINES.StrongSteamEngine.get(mtName).nbtOutput,       NBT_ENERGY_EMITTED, TD.Energy.KU),
                    DATA_MACHINES.StrongSteamEngine.get(mtName).recipeObject);
        }

        // Burning Boxes Liquid
        aClass = MultiTileEntityGeneratorLiquid.class;
        for (String mtName : DATA_MACHINES.BurningBoxLiquid.keySet()) {
            aMat = OreDictMaterial.get(mtName);
            aRegistry.add("Burning Box (Liquid, "+aMat.getLocal()+")",       "Burning Boxes",  DATA_MACHINES.BurningBoxLiquid.get(mtName).ID,       1104, aClass, aMat.mToolQuality, DATA_MACHINES.BurningBoxLiquid.get(mtName).stackSize,         aMachine,
                    UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   DATA_MACHINES.BurningBoxLiquid.get(mtName).nbtHardness,        NBT_RESISTANCE,   DATA_MACHINES.BurningBoxLiquid.get(mtName).nbtResistance,        NBT_FUELMAP, FM.Burn, NBT_EFFICIENCY,  DATA_MACHINES.BurningBoxLiquid.get(mtName).nbtEfficiency,        NBT_OUTPUT,  DATA_MACHINES.BurningBoxLiquid.get(mtName).nbtOutput,         NBT_ENERGY_EMITTED, TD.Energy.HU),
                    DATA_MACHINES.BurningBoxLiquid.get(mtName).recipeObject);
        }
        for (String mtName : DATA_MACHINES.DenseBurningBoxLiquid.keySet()) {
            aMat = OreDictMaterial.get(mtName);
            aRegistry.add("Dense Burning Box (Liquid, "+aMat.getLocal()+")",       "Burning Boxes",  DATA_MACHINES.DenseBurningBoxLiquid.get(mtName).ID,       1104, aClass, aMat.mToolQuality, DATA_MACHINES.DenseBurningBoxLiquid.get(mtName).stackSize,         aMachine,
                    UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   DATA_MACHINES.DenseBurningBoxLiquid.get(mtName).nbtHardness,        NBT_RESISTANCE,   DATA_MACHINES.DenseBurningBoxLiquid.get(mtName).nbtResistance,        NBT_FUELMAP, FM.Burn, NBT_EFFICIENCY,  DATA_MACHINES.DenseBurningBoxLiquid.get(mtName).nbtEfficiency,        NBT_OUTPUT,  DATA_MACHINES.DenseBurningBoxLiquid.get(mtName).nbtOutput,         NBT_ENERGY_EMITTED, TD.Energy.HU),
                    DATA_MACHINES.DenseBurningBoxLiquid.get(mtName).recipeObject);
        }
        // Burning Boxes Gas
        aClass = MultiTileEntityGeneratorGas.class;
        for (String mtName : DATA_MACHINES.BurningBoxGas.keySet()) {
            aMat = OreDictMaterial.get(mtName);
            aRegistry.add("Burning Box (Gas, "+aMat.getLocal()+")",       "Burning Boxes",  DATA_MACHINES.BurningBoxGas.get(mtName).ID,       1104, aClass, aMat.mToolQuality, DATA_MACHINES.BurningBoxGas.get(mtName).stackSize,         aMachine,
                    UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   DATA_MACHINES.BurningBoxGas.get(mtName).nbtHardness,        NBT_RESISTANCE,   DATA_MACHINES.BurningBoxGas.get(mtName).nbtResistance,        NBT_FUELMAP, FM.Burn, NBT_EFFICIENCY,  DATA_MACHINES.BurningBoxGas.get(mtName).nbtEfficiency,        NBT_OUTPUT,  DATA_MACHINES.BurningBoxGas.get(mtName).nbtOutput,         NBT_ENERGY_EMITTED, TD.Energy.HU),
                    DATA_MACHINES.BurningBoxGas.get(mtName).recipeObject);
        }
        for (String mtName : DATA_MACHINES.DenseBurningBoxGas.keySet()) {
            aMat = OreDictMaterial.get(mtName);
            aRegistry.add("Dense Burning Box (Gas, "+aMat.getLocal()+")",       "Burning Boxes",  DATA_MACHINES.DenseBurningBoxGas.get(mtName).ID,       1104, aClass, aMat.mToolQuality, DATA_MACHINES.DenseBurningBoxGas.get(mtName).stackSize,         aMachine,
                    UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   DATA_MACHINES.DenseBurningBoxGas.get(mtName).nbtHardness,        NBT_RESISTANCE,   DATA_MACHINES.DenseBurningBoxGas.get(mtName).nbtResistance,        NBT_FUELMAP, FM.Burn, NBT_EFFICIENCY,  DATA_MACHINES.DenseBurningBoxGas.get(mtName).nbtEfficiency,        NBT_OUTPUT,  DATA_MACHINES.DenseBurningBoxGas.get(mtName).nbtOutput,         NBT_ENERGY_EMITTED, TD.Energy.HU),
                    DATA_MACHINES.DenseBurningBoxGas.get(mtName).recipeObject);
        }
        // Burning Boxes Fluidized Bed
        aClass = MultiTileEntityGeneratorFluidBed.class;
        for (String mtName : DATA_MACHINES.BurningBoxFluidizedBed.keySet()) {
            aMat = OreDictMaterial.get(mtName);
            aRegistry.add("Fluidized Bed Burning Box ("+aMat.getLocal()+")",       "Burning Boxes",  DATA_MACHINES.BurningBoxFluidizedBed.get(mtName).ID,       1104, aClass, aMat.mToolQuality, DATA_MACHINES.BurningBoxFluidizedBed.get(mtName).stackSize,         aMachine,
                    UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   DATA_MACHINES.BurningBoxFluidizedBed.get(mtName).nbtHardness,        NBT_RESISTANCE,   DATA_MACHINES.BurningBoxFluidizedBed.get(mtName).nbtResistance,        NBT_FUELMAP, FM.FluidBed, NBT_EFFICIENCY,  DATA_MACHINES.BurningBoxFluidizedBed.get(mtName).nbtEfficiency,        NBT_OUTPUT,  DATA_MACHINES.BurningBoxFluidizedBed.get(mtName).nbtOutput,         NBT_ENERGY_EMITTED, TD.Energy.HU),
                    DATA_MACHINES.BurningBoxFluidizedBed.get(mtName).recipeObject);
        }
        for (String mtName : DATA_MACHINES.DenseBurningBoxFluidizedBed.keySet()) {
            aMat = OreDictMaterial.get(mtName);
            aRegistry.add("Dense Fluidized Bed Burning Box ("+aMat.getLocal()+")",       "Burning Boxes",  DATA_MACHINES.DenseBurningBoxFluidizedBed.get(mtName).ID,       1104, aClass, aMat.mToolQuality, DATA_MACHINES.DenseBurningBoxFluidizedBed.get(mtName).stackSize,         aMachine,
                    UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   DATA_MACHINES.DenseBurningBoxFluidizedBed.get(mtName).nbtHardness,        NBT_RESISTANCE,   DATA_MACHINES.DenseBurningBoxFluidizedBed.get(mtName).nbtResistance,        NBT_FUELMAP, FM.FluidBed, NBT_EFFICIENCY,  DATA_MACHINES.DenseBurningBoxFluidizedBed.get(mtName).nbtEfficiency,        NBT_OUTPUT,  DATA_MACHINES.DenseBurningBoxFluidizedBed.get(mtName).nbtOutput,         NBT_ENERGY_EMITTED, TD.Energy.HU),
                    DATA_MACHINES.DenseBurningBoxFluidizedBed.get(mtName).recipeObject);
        }

        // Heat Exchangers
        aClass = MultiTileEntityGeneratorHotFluid.class;
        for (String mtName : DATA_MACHINES.HeatExchanger.keySet()) {
            aMat = OreDictMaterial.get(mtName);
            aRegistry.add("Heat Exchanger ("+aMat.getLocal()+")",       "Burning Boxes",  DATA_MACHINES.HeatExchanger.get(mtName).ID,       9103, aClass, aMat.mToolQuality, DATA_MACHINES.HeatExchanger.get(mtName).stackSize,         aMachine,
                    UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   DATA_MACHINES.HeatExchanger.get(mtName).nbtHardness,        NBT_RESISTANCE,   DATA_MACHINES.HeatExchanger.get(mtName).nbtResistance,        NBT_FUELMAP, FM.Hot, NBT_EFFICIENCY,  DATA_MACHINES.HeatExchanger.get(mtName).nbtEfficiency,        NBT_OUTPUT,  DATA_MACHINES.HeatExchanger.get(mtName).nbtOutput,         NBT_ENERGY_EMITTED, TD.Energy.HU),
                    DATA_MACHINES.HeatExchanger.get(mtName).recipeObject);
        }
        for (String mtName : DATA_MACHINES.DenseHeatExchanger.keySet()) {
            aMat = OreDictMaterial.get(mtName);
            aRegistry.add("Dense Heat Exchanger ("+aMat.getLocal()+")",       "Burning Boxes",  DATA_MACHINES.DenseHeatExchanger.get(mtName).ID,       9103, aClass, aMat.mToolQuality, DATA_MACHINES.DenseHeatExchanger.get(mtName).stackSize,         aMachine,
                    UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   DATA_MACHINES.DenseHeatExchanger.get(mtName).nbtHardness,        NBT_RESISTANCE,   DATA_MACHINES.DenseHeatExchanger.get(mtName).nbtResistance,        NBT_FUELMAP, FM.Hot, NBT_EFFICIENCY,  DATA_MACHINES.DenseHeatExchanger.get(mtName).nbtEfficiency,        NBT_OUTPUT,  DATA_MACHINES.DenseHeatExchanger.get(mtName).nbtOutput,         NBT_ENERGY_EMITTED, TD.Energy.HU),
                    DATA_MACHINES.DenseHeatExchanger.get(mtName).recipeObject);
        }
        // Diesel Engines
        aClass = MultiTileEntityMotorLiquid.class;
        if (ConfigsGTCH.MACHINES.get(ConfigCategories_CH.Machines.dieselengine, "enable_diesel_engine_(gt6_true)", T)) {
            aMat = MT.Bronze;			toutput = ConfigsGTCH.MACHINES.get(ConfigCategories_CH.Machines.dieselengine, "ru_output_(gt6_16)_" + aMat.mNameLocal, 16);		tefficiency = ConfigsGTCH.MACHINES.get(ConfigCategories_CH.Machines.dieselengine, "efficiency_(gt6_10000)_" + aMat.mNameLocal, 3000);
            aRegistry.add("Diesel Engine (" 				  +aMat.getLocal()+")", "Engines", 9147, 1304, aClass, aMat.mToolQuality, 16, aMachine, UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,    6.0F, NBT_RESISTANCE,   6.0F, NBT_FUELMAP, FM.Engine, NBT_EFFICIENCY,  tefficiency, NBT_OUTPUT, toutput, NBT_ENERGY_EMITTED, TD.Energy.RU), "PLP", "SMS", "GOC", 'M', OP.casingMachineDense.dat(aMat), 'O', OP.pipeNonuple.dat(aMat), 'P', OP.rotor.dat(aMat), 'S', OP.stickLong.dat(aMat), 'G', OP.gearGt.dat(aMat), 'C', OP.gearGtSmall.dat(aMat), 'L', OD.itemLubricant);
            aMat = ANY.Steel;           toutput = ConfigsGTCH.MACHINES.get(ConfigCategories_CH.Machines.dieselengine, "ru_output_(gt6_32)_" + aMat.mNameLocal, 32);		tefficiency = ConfigsGTCH.MACHINES.get(ConfigCategories_CH.Machines.dieselengine, "efficiency_(gt6_10000)_" + aMat.mNameLocal, 3000);
            aRegistry.add("Diesel Engine ("                 +aMat.getLocal()+")", "Engines",  9148, 1304, aClass, aMat.mToolQuality, 16, aMachine, UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_FUELMAP, FM.Engine, NBT_EFFICIENCY,  tefficiency, NBT_OUTPUT, toutput, NBT_ENERGY_EMITTED, TD.Energy.RU), "PLP", "SMS", "GOC", 'M', OP.casingMachineDense.dat(aMat), 'O', OP.pipeNonuple.dat(aMat), 'P', OP.rotor.dat(aMat), 'S', OP.stickLong.dat(aMat), 'G', OP.gearGt.dat(aMat), 'C', OP.gearGtSmall.dat(aMat), 'L', OD.itemLubricant);
            aMat = MT.Invar;            toutput = ConfigsGTCH.MACHINES.get(ConfigCategories_CH.Machines.dieselengine, "ru_output_(gt6_64)_" + aMat.mNameLocal, 64);		tefficiency = ConfigsGTCH.MACHINES.get(ConfigCategories_CH.Machines.dieselengine, "efficiency_(gt6_10000)_" + aMat.mNameLocal, 3000);
            aRegistry.add("Diesel Engine ("                 +aMat.getLocal()+")", "Engines",  9149, 1304, aClass, aMat.mToolQuality, 16, aMachine, UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_FUELMAP, FM.Engine, NBT_EFFICIENCY,  tefficiency, NBT_OUTPUT, toutput, NBT_ENERGY_EMITTED, TD.Energy.RU), "PLP", "SMS", "GOC", 'M', OP.casingMachineDense.dat(aMat), 'O', OP.pipeNonuple.dat(aMat), 'P', OP.rotor.dat(aMat), 'S', OP.stickLong.dat(aMat), 'G', OP.gearGt.dat(aMat), 'C', OP.gearGtSmall.dat(aMat), 'L', OD.itemLubricant);
            aMat = MT.Ti;               toutput = ConfigsGTCH.MACHINES.get(ConfigCategories_CH.Machines.dieselengine, "ru_output_(gt6_128)_" + aMat.mNameLocal, 128);		tefficiency = ConfigsGTCH.MACHINES.get(ConfigCategories_CH.Machines.dieselengine, "efficiency_(gt6_10000)_" + aMat.mNameLocal, 3000);
            aRegistry.add("Diesel Engine ("                 +aMat.getLocal()+")", "Engines",  9197, 1304, aClass, aMat.mToolQuality, 16, aMachine, UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_FUELMAP, FM.Engine, NBT_EFFICIENCY,  tefficiency, NBT_OUTPUT, toutput, NBT_ENERGY_EMITTED, TD.Energy.RU), "PLP", "SMS", "GOC", 'M', OP.casingMachineDense.dat(aMat), 'O', OP.pipeNonuple.dat(aMat), 'P', OP.rotor.dat(aMat), 'S', OP.stickLong.dat(aMat), 'G', OP.gearGt.dat(aMat), 'C', OP.gearGtSmall.dat(aMat), 'L', OD.itemLubricant);
            aMat = MT.TungstenSteel;    toutput = ConfigsGTCH.MACHINES.get(ConfigCategories_CH.Machines.dieselengine, "ru_output_(gt6_256)_" + aMat.mNameLocal, 256);		tefficiency = ConfigsGTCH.MACHINES.get(ConfigCategories_CH.Machines.dieselengine, "efficiency_(gt6_10000)_" + aMat.mNameLocal, 3000);
            aRegistry.add("Diesel Engine ("                 +aMat.getLocal()+")", "Engines",  9198, 1304, aClass, aMat.mToolQuality, 16, aMachine, UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_FUELMAP, FM.Engine, NBT_EFFICIENCY,  tefficiency, NBT_OUTPUT, toutput, NBT_ENERGY_EMITTED, TD.Energy.RU), "PLP", "SMS", "GOC", 'M', OP.casingMachineDense.dat(aMat), 'O', OP.pipeNonuple.dat(aMat), 'P', OP.rotor.dat(aMat), 'S', OP.stickLong.dat(aMat), 'G', OP.gearGt.dat(aMat), 'C', OP.gearGtSmall.dat(aMat), 'L', OD.itemLubricant);
            aMat = MT.Ir;               toutput = ConfigsGTCH.MACHINES.get(ConfigCategories_CH.Machines.dieselengine, "ru_output_(gt6_512)_" + aMat.mNameLocal, 512);		tefficiency = ConfigsGTCH.MACHINES.get(ConfigCategories_CH.Machines.dieselengine, "efficiency_(gt6_10000)_" + aMat.mNameLocal, 3000);
            aRegistry.add("Diesel Engine ("                 +aMat.getLocal()+")", "Engines",  9199, 1304, aClass, aMat.mToolQuality, 16, aMachine, UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_FUELMAP, FM.Engine, NBT_EFFICIENCY,  tefficiency, NBT_OUTPUT, toutput, NBT_ENERGY_EMITTED, TD.Energy.RU), "PLP", "SMS", "GOC", 'M', OP.casingMachineDense.dat(aMat), 'O', OP.pipeNonuple.dat(aMat), 'P', OP.rotor.dat(aMat), 'S', OP.stickLong.dat(aMat), 'G', OP.gearGt.dat(aMat), 'C', OP.gearGtSmall.dat(aMat), 'L', OD.itemLubricant);
        }


        // Reactor Stuffs
        aMat = MT.Pb;                   aRegistry.add("Nuclear Reactor Core (1x1)"                    , "Reactors",  9300,  9200, MultiTileEntityReactorCore1x1.class     , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F), "CP" , "wM"        , 'M', OP.casingMachineDense.dat(aMat), 'C', IL.Processor_Crystal_Ruby, 'P', IL.PISTONS[4]); ItemsGT.addNEIRedirects(aRegistry.getItem(), FL.Coolant_IC2.display(), FL.Coolant_IC2_Hot.display());
        aMat = MT.Pb;                   aRegistry.add("Nuclear Reactor Core (2x2)"                    , "Reactors",  9200,  9200, MultiTileEntityReactorCore2x2.class     , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F), "PCP", "CMC", "PCP", 'M', OP.casingMachineDense.dat(aMat), 'C', IL.Processor_Crystal_Ruby, 'P', IL.PISTONS[4]); ItemsGT.addNEIRedirects(aRegistry.getItem(), FL.Coolant_IC2.display(), FL.Coolant_IC2_Hot.display());


        aMat = MT.Zr;                   aRegistry.add("Empty Reactor Rod"                             , "Reactors",  9201,  9200, MultiTileEntityReactorRodBase.class     , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F)); IL.Reactor_Rod_Empty.set(aRegistry.getItem(), new OreDictItemData(MT.Zr, U));
        aMat = MT.Cd_In_Ag_Alloy;       aRegistry.add("Neutron Absorber Rod"                          , "Reactors",  9202,  9200, MultiTileEntityReactorRodAbsorber.class , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F)); RM.Canner.addRecipe2(F, 16, 16, OP.stick.mat(aMat, 1), IL.Reactor_Rod_Empty.get(1), aRegistry.getItem()); OM.data(aRegistry.getItem(), aMat, OP.stick.mAmount, MT.Zr, U);
        aMat = MT.Be;                   aRegistry.add("Neutron Reflector Rod"                         , "Reactors",  9203,  9200, MultiTileEntityReactorRodReflector.class, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F)); RM.Canner.addRecipe2(F, 16, 16, OP.stick.mat(aMat, 1), IL.Reactor_Rod_Empty.get(1), aRegistry.getItem()); OM.data(aRegistry.getItem(), aMat, OP.stick.mAmount, MT.Zr, U);
        aMat = MT.Graphite;             aRegistry.add("Neutron Moderator Rod"                         , "Reactors",  9204,  9200, MultiTileEntityReactorRodModerator.class, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F)); RM.Canner.addRecipe2(F, 16, 16, OP.stick.mat(aMat, 1), IL.Reactor_Rod_Empty.get(1), aRegistry.getItem()); OM.data(aRegistry.getItem(), aMat, OP.stick.mAmount, MT.Zr, U);

        aMat = MT.Th;                   aRegistry.add("Thorium-232 Fuel Rod"                          , "Reactors",  9210,  9200, MultiTileEntityReactorRodNuclear.class  , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_MAXDURABILITY, 12000000000L, NBT_NUCLEAR_SELF,   2, NBT_NUCLEAR_OTHER,   2, NBT_NUCLEAR_DIV, 32, NBT_NUCLEAR_MAX,      128, NBT_VALUE, 9310)); RM.Canner.addRecipe2(F, 16, 16, OP.stick.mat(aMat, 1), IL.Reactor_Rod_Empty.get(1), aRegistry.getItem());
        aMat = MT.Cyanite;              aRegistry.add("Cyanite Fuel Rod"                              , "Reactors",  9219,  9200, MultiTileEntityReactorRodNuclear.class  , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_MAXDURABILITY, 12000000000L, NBT_NUCLEAR_SELF,   2, NBT_NUCLEAR_OTHER,   2, NBT_NUCLEAR_DIV, 32, NBT_NUCLEAR_MAX,       64, NBT_VALUE, 9319)); RM.Canner.addRecipe2(F, 16, 16, OP.stick.mat(aMat, 1), IL.Reactor_Rod_Empty.get(1), aRegistry.getItem());
        aMat = MT.U_238;                aRegistry.add("Uranium-238 Fuel Rod"                          , "Reactors",  9220,  9200, MultiTileEntityReactorRodNuclear.class  , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_MAXDURABILITY,  6000000000L, NBT_NUCLEAR_SELF,   4, NBT_NUCLEAR_OTHER,   4, NBT_NUCLEAR_DIV, 16, NBT_NUCLEAR_MAX,      512, NBT_VALUE, 9320)); RM.Canner.addRecipe2(F, 16, 16, OP.stick.mat(aMat, 1), IL.Reactor_Rod_Empty.get(1), aRegistry.getItem());
        aMat = MT.U_235;                aRegistry.add("Uranium-235 Fuel Rod"                          , "Reactors",  9221,  9200, MultiTileEntityReactorRodNuclear.class  , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_MAXDURABILITY,  1200000000L, NBT_NUCLEAR_SELF,  32, NBT_NUCLEAR_OTHER,  32, NBT_NUCLEAR_DIV,  4, NBT_NUCLEAR_MAX,     2048, NBT_VALUE, 9321)); RM.Canner.addRecipe2(F, 16, 16, OP.stick.mat(aMat, 1), IL.Reactor_Rod_Empty.get(1), aRegistry.getItem());
        aMat = MT.U_233;                aRegistry.add("Uranium-233 Fuel Rod"                          , "Reactors",  9222,  9200, MultiTileEntityReactorRodNuclear.class  , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_MAXDURABILITY,  6000000000L, NBT_NUCLEAR_SELF,  32, NBT_NUCLEAR_OTHER,  32, NBT_NUCLEAR_DIV,  4, NBT_NUCLEAR_MAX,     2048, NBT_VALUE, 9322)); RM.Canner.addRecipe2(F, 16, 16, OP.stick.mat(aMat, 1), IL.Reactor_Rod_Empty.get(1), aRegistry.getItem());
        aMat = MT.Yellorium;            aRegistry.add("Yellorium Fuel Rod"                            , "Reactors",  9229,  9200, MultiTileEntityReactorRodNuclear.class  , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_MAXDURABILITY,  6000000000L, NBT_NUCLEAR_SELF,   4, NBT_NUCLEAR_OTHER,   4, NBT_NUCLEAR_DIV, 16, NBT_NUCLEAR_MAX,      256, NBT_VALUE, 9329)); RM.Canner.addRecipe2(F, 16, 16, OP.stick.mat(aMat, 1), IL.Reactor_Rod_Empty.get(1), aRegistry.getItem());
        aMat = MT.Pu;                   aRegistry.add("Plutonium-244 Fuel Rod"                        , "Reactors",  9230,  9200, MultiTileEntityReactorRodNuclear.class  , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_MAXDURABILITY,  1200000000L, NBT_NUCLEAR_SELF,  64, NBT_NUCLEAR_OTHER,  64, NBT_NUCLEAR_DIV,  4, NBT_NUCLEAR_MAX,     2048, NBT_VALUE, 9330)); RM.Canner.addRecipe2(F, 16, 16, OP.stick.mat(aMat, 1), IL.Reactor_Rod_Empty.get(1), aRegistry.getItem());
        aMat = MT.Pu_241;               aRegistry.add("Plutonium-241 Fuel Rod"                        , "Reactors",  9231,  9200, MultiTileEntityReactorRodNuclear.class  , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_MAXDURABILITY,  1200000000L, NBT_NUCLEAR_SELF, 128, NBT_NUCLEAR_OTHER, 128, NBT_NUCLEAR_DIV,  3, NBT_NUCLEAR_MAX,     3072, NBT_VALUE, 9331)); RM.Canner.addRecipe2(F, 16, 16, OP.stick.mat(aMat, 1), IL.Reactor_Rod_Empty.get(1), aRegistry.getItem());
        aMat = MT.Pu_243;               aRegistry.add("Plutonium-243 Fuel Rod"                        , "Reactors",  9232,  9200, MultiTileEntityReactorRodNuclear.class  , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_MAXDURABILITY,  1200000000L, NBT_NUCLEAR_SELF, 128, NBT_NUCLEAR_OTHER, 128, NBT_NUCLEAR_DIV,  3, NBT_NUCLEAR_MAX,     4096, NBT_VALUE, 9332)); RM.Canner.addRecipe2(F, 16, 16, OP.stick.mat(aMat, 1), IL.Reactor_Rod_Empty.get(1), aRegistry.getItem());
        aMat = MT.Pu_239;               aRegistry.add("Plutonium-239 Fuel Rod"                        , "Reactors",  9233,  9200, MultiTileEntityReactorRodNuclear.class  , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_MAXDURABILITY,  2400000000L, NBT_NUCLEAR_SELF, 128, NBT_NUCLEAR_OTHER, 128, NBT_NUCLEAR_DIV,  3, NBT_NUCLEAR_MAX,     4096, NBT_VALUE, 9333)); RM.Canner.addRecipe2(F, 16, 16, OP.stick.mat(aMat, 1), IL.Reactor_Rod_Empty.get(1), aRegistry.getItem());
        aMat = MT.Blutonium;            aRegistry.add("Blutonium Fuel Rod"                            , "Reactors",  9239,  9200, MultiTileEntityReactorRodNuclear.class  , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_MAXDURABILITY,  1200000000L, NBT_NUCLEAR_SELF,  64, NBT_NUCLEAR_OTHER,  64, NBT_NUCLEAR_DIV,  4, NBT_NUCLEAR_MAX,     1024, NBT_VALUE, 9339)); RM.Canner.addRecipe2(F, 16, 16, OP.stick.mat(aMat, 1), IL.Reactor_Rod_Empty.get(1), aRegistry.getItem());
        aMat = MT.Am;                   aRegistry.add("Americium-245 Fuel Rod"                        , "Reactors",  9240,  9200, MultiTileEntityReactorRodNuclear.class  , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_MAXDURABILITY,  1200000000L, NBT_NUCLEAR_SELF,  64, NBT_NUCLEAR_OTHER,  64, NBT_NUCLEAR_DIV,  4, NBT_NUCLEAR_MAX,     4096, NBT_VALUE, 9340)); RM.Canner.addRecipe2(F, 16, 16, OP.stick.mat(aMat, 1), IL.Reactor_Rod_Empty.get(1), aRegistry.getItem());
        aMat = MT.Am_241;               aRegistry.add("Americium-241 Fuel Rod"                        , "Reactors",  9241,  9200, MultiTileEntityReactorRodNuclear.class  , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_MAXDURABILITY,  1200000000L, NBT_NUCLEAR_SELF, 128, NBT_NUCLEAR_OTHER, 128, NBT_NUCLEAR_DIV,  3, NBT_NUCLEAR_MAX,     4096, NBT_VALUE, 9341)); RM.Canner.addRecipe2(F, 16, 16, OP.stick.mat(aMat, 1), IL.Reactor_Rod_Empty.get(1), aRegistry.getItem());
        aMat = MT.Ludicrite;            aRegistry.add("Ludicrite Fuel Rod"                            , "Reactors",  9249,  9200, MultiTileEntityReactorRodNuclear.class  , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_MAXDURABILITY,  1200000000L, NBT_NUCLEAR_SELF, 128, NBT_NUCLEAR_OTHER, 128, NBT_NUCLEAR_DIV,  3, NBT_NUCLEAR_MAX,     3072, NBT_VALUE, 9349)); RM.Canner.addRecipe2(F, 16, 16, OP.stick.mat(aMat, 1), IL.Reactor_Rod_Empty.get(1), aRegistry.getItem());
        aMat = MT.Co_60;                aRegistry.add("Cobalt-60 Fuel Rod"                            , "Reactors",  9250,  9200, MultiTileEntityReactorRodNuclear.class  , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_MAXDURABILITY,  6000000000L, NBT_NUCLEAR_SELF,   2, NBT_NUCLEAR_OTHER,   2, NBT_NUCLEAR_DIV, 16, NBT_NUCLEAR_MAX,      256, NBT_VALUE, 9350)); RM.Canner.addRecipe2(F, 16, 16, OP.stick.mat(aMat, 1), IL.Reactor_Rod_Empty.get(1), aRegistry.getItem());
        aMat = MT.Nq_528;               aRegistry.add("Enriched Naquadah Fuel Rod"                    , "Reactors",  9260,  9200, MultiTileEntityReactorRodNuclear.class  , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_MAXDURABILITY, 12000000000L, NBT_NUCLEAR_SELF, 128, NBT_NUCLEAR_OTHER, 128, NBT_NUCLEAR_DIV,  4, NBT_NUCLEAR_MAX,     8192, NBT_VALUE, 9360)); RM.Canner.addRecipe2(F, 16, 16, OP.stick.mat(aMat, 1), IL.Reactor_Rod_Empty.get(1), aRegistry.getItem());
        aMat = MT.Nq_522;               aRegistry.add("Naquadria Fuel Rod"                            , "Reactors",  9261,  9200, MultiTileEntityReactorRodNuclear.class  , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_MAXDURABILITY, 12000000000L, NBT_NUCLEAR_SELF, 512, NBT_NUCLEAR_OTHER, 512, NBT_NUCLEAR_DIV,  3, NBT_NUCLEAR_MAX,    16384, NBT_VALUE, 9361)); RM.Canner.addRecipe2(F, 16, 16, OP.stick.mat(aMat, 1), IL.Reactor_Rod_Empty.get(1), aRegistry.getItem());

        aMat = MT.Th;                   aRegistry.add("Depleted Thorium-232 Fuel Rod"                 , "Reactors",  9310,  9200, MultiTileEntityReactorRodDepleted.class , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F)); RM.Centrifuge.addRecipe1(F, 64, 256, aRegistry.getItem(), ZL_FS, ZL_FS, OP.scrapGt.mat(MT.Zr, 9), OP.dustTiny.mat(aMat, 1), OP.dustDiv72.mat(MT.U_238, 12));
        aMat = MT.Cyanite;              aRegistry.add("Depleted Cyanite Fuel Rod"                     , "Reactors",  9319,  9200, MultiTileEntityReactorRodDepleted.class , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F)); RM.Centrifuge.addRecipe1(F, 64, 256, aRegistry.getItem(), ZL_FS, ZL_FS, OP.scrapGt.mat(MT.Zr, 9), OP.dustTiny.mat(aMat, 1), OP.dustDiv72.mat(MT.Blutonium, 12));
        aMat = MT.U_238;                aRegistry.add("Depleted Uranium-238 Fuel Rod"                 , "Reactors",  9320,  9200, MultiTileEntityReactorRodDepleted.class , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F)); RM.Centrifuge.addRecipe1(F, 64, 256, aRegistry.getItem(), ZL_FS, ZL_FS, OP.scrapGt.mat(MT.Zr, 9), OP.dustTiny.mat(aMat, 1), OP.dustDiv72.mat(MT.U_235, 12));
        aMat = MT.U_235;                aRegistry.add("Depleted Uranium-235 Fuel Rod"                 , "Reactors",  9321,  9200, MultiTileEntityReactorRodDepleted.class , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F)); RM.Centrifuge.addRecipe1(F, 64, 256, aRegistry.getItem(), ZL_FS, ZL_FS, OP.scrapGt.mat(MT.Zr, 9), OP.dustTiny.mat(aMat, 1), OP.dustDiv72.mat(MT.Pu, 12));
        aMat = MT.U_233;                aRegistry.add("Depleted Uranium-233 Fuel Rod"                 , "Reactors",  9322,  9200, MultiTileEntityReactorRodDepleted.class , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F)); RM.Centrifuge.addRecipe1(F, 64, 256, aRegistry.getItem(), ZL_FS, ZL_FS, OP.scrapGt.mat(MT.Zr, 9), OP.dustTiny.mat(aMat, 1), OP.dustDiv72.mat(MT.Pu_243, 12));
        aMat = MT.Yellorium;            aRegistry.add("Depleted Yellorium Fuel Rod"                   , "Reactors",  9329,  9200, MultiTileEntityReactorRodDepleted.class , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F)); RM.Centrifuge.addRecipe1(F, 64, 256, aRegistry.getItem(), ZL_FS, ZL_FS, OP.scrapGt.mat(MT.Zr, 9), OP.dustTiny.mat(aMat, 1), OP.dustDiv72.mat(MT.Cyanite, 12));
        aMat = MT.Pu;                   aRegistry.add("Depleted Plutonium-244 Fuel Rod"               , "Reactors",  9330,  9200, MultiTileEntityReactorRodDepleted.class , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F)); RM.Centrifuge.addRecipe1(F, 64, 256, aRegistry.getItem(), ZL_FS, ZL_FS, OP.scrapGt.mat(MT.Zr, 9), OP.dustTiny.mat(aMat, 1), OP.dustDiv72.mat(MT.Pu_241, 12));
        aMat = MT.Pu_241;               aRegistry.add("Depleted Plutonium-241 Fuel Rod"               , "Reactors",  9331,  9200, MultiTileEntityReactorRodDepleted.class , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F)); RM.Centrifuge.addRecipe1(F, 64, 256, aRegistry.getItem(), ZL_FS, ZL_FS, OP.scrapGt.mat(MT.Zr, 9), OP.dustTiny.mat(aMat, 1), OP.dustDiv72.mat(MT.Pu_243, 12));
        aMat = MT.Pu_243;               aRegistry.add("Depleted Plutonium-243 Fuel Rod"               , "Reactors",  9332,  9200, MultiTileEntityReactorRodDepleted.class , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F)); RM.Centrifuge.addRecipe1(F, 64, 256, aRegistry.getItem(), ZL_FS, ZL_FS, OP.scrapGt.mat(MT.Zr, 9), OP.dustTiny.mat(aMat, 1), OP.dustDiv72.mat(MT.Am, 12));
        aMat = MT.Pu_239;               aRegistry.add("Depleted Plutonium-239 Fuel Rod"               , "Reactors",  9333,  9200, MultiTileEntityReactorRodDepleted.class , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F)); RM.Centrifuge.addRecipe1(F, 64, 256, aRegistry.getItem(), ZL_FS, ZL_FS, OP.scrapGt.mat(MT.Zr, 9), OP.dustTiny.mat(aMat, 1), OP.dustDiv72.mat(MT.Am_241, 12));
        aMat = MT.Blutonium;            aRegistry.add("Depleted Blutonium Fuel Rod"                   , "Reactors",  9339,  9200, MultiTileEntityReactorRodDepleted.class , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F)); RM.Centrifuge.addRecipe1(F, 64, 256, aRegistry.getItem(), ZL_FS, ZL_FS, OP.scrapGt.mat(MT.Zr, 9), OP.dustTiny.mat(aMat, 1), OP.dustDiv72.mat(MT.Ludicrite, 12));
        aMat = MT.Am;                   aRegistry.add("Depleted Americium-245 Fuel Rod"               , "Reactors",  9340,  9200, MultiTileEntityReactorRodDepleted.class , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F)); RM.Centrifuge.addRecipe1(F, 64, 256, aRegistry.getItem(), ZL_FS, ZL_FS, OP.scrapGt.mat(MT.Zr, 9), OP.dustTiny.mat(aMat, 1), OP.dustDiv72.mat(MT.Am_241, 12));
        aMat = MT.Am_241;               aRegistry.add("Depleted Americium-241 Fuel Rod"               , "Reactors",  9341,  9200, MultiTileEntityReactorRodDepleted.class , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F)); RM.Centrifuge.addRecipe1(F, 64, 256, aRegistry.getItem(), ZL_FS, ZL_FS, OP.scrapGt.mat(MT.Zr, 9), OP.dustTiny.mat(aMat, 1), OP.dustDiv72.mat(MT.Nq_528, 12));
        aMat = MT.Ludicrite;            aRegistry.add("Depleted Ludicrite Fuel Rod"                   , "Reactors",  9349,  9200, MultiTileEntityReactorRodDepleted.class , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F)); RM.Centrifuge.addRecipe1(F, 64, 256, aRegistry.getItem(), ZL_FS, ZL_FS, OP.scrapGt.mat(MT.Zr, 9), OP.dustTiny.mat(aMat, 1), OP.dustDiv72.mat(MT.Yellorium, 12));
        aMat = MT.Co_60;                aRegistry.add("Depleted Cobalt-60 Fuel Rod"                   , "Reactors",  9350,  9200, MultiTileEntityReactorRodDepleted.class , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F)); RM.Centrifuge.addRecipe1(F, 64, 256, aRegistry.getItem(), ZL_FS, ZL_FS, OP.scrapGt.mat(MT.Zr, 9), OP.dustTiny.mat(aMat, 1), OP.dustDiv72.mat(MT.U_238, 12));
        aMat = MT.Nq_528;               aRegistry.add("Depleted Enriched Naquadah Fuel Rod"           , "Reactors",  9360,  9200, MultiTileEntityReactorRodDepleted.class , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F)); RM.Centrifuge.addRecipe1(F, 64, 256, aRegistry.getItem(), ZL_FS, ZL_FS, OP.scrapGt.mat(MT.Zr, 9), OP.dustTiny.mat(aMat, 1), OP.dustDiv72.mat(MT.Nq_522, 12));
        aMat = MT.Nq_522;               aRegistry.add("Depleted Naquadria Fuel Rod"                   , "Reactors",  9361,  9200, MultiTileEntityReactorRodDepleted.class , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F)); RM.Centrifuge.addRecipe1(F, 64, 256, aRegistry.getItem(), ZL_FS, ZL_FS, OP.scrapGt.mat(MT.Zr, 9), OP.dustTiny.mat(aMat, 1), OP.dustDiv72.mat(MT.Th, 12));

        aMat = MT.Th;                   aRegistry.add("Thorium-232 Breeder Rod"                       , "Reactors",  9410,  9200, MultiTileEntityReactorRodBreeder.class  , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_MAXDURABILITY, 144000000L, NBT_VALUE, 9222)); RM.Canner.addRecipe2(F, 16, 16, OP.bolt.mat(aMat, 4), IL.Reactor_Rod_Empty.get(1), aRegistry.getItem());
        aMat = MT.U_238;                aRegistry.add("Uranium-238 Breeder Rod"                       , "Reactors",  9420,  9200, MultiTileEntityReactorRodBreeder.class  , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_MAXDURABILITY, 288000000L, NBT_VALUE, 9233)); RM.Canner.addRecipe2(F, 16, 16, OP.bolt.mat(aMat, 4), IL.Reactor_Rod_Empty.get(1), aRegistry.getItem());



        // Steam Turbines
        aClass = MultiTileEntityTurbineSteam.class;
        aMat = MT.DATA.Kinetic_T[1];    aRegistry.add("Steam Turbine ("+MT.Bronze       .getLocal()+")" , "Turbines"                            ,  1512,  1538, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,   24*STEAM_PER_EU, NBT_OUTPUT,   16, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.STEAM, NBT_ENERGY_EMITTED, TD.Energy.RU), "TwT", "GSG", "TMT", 'S', OP.stickLong.dat(aMat), 'M', OP.casingMachineDouble.dat(aMat), 'G', OP.gearGt.dat(aMat), 'T', OP.rotor.dat(MT.Bronze           ));
        aMat = MT.DATA.Kinetic_T[1];    aRegistry.add("Steam Turbine ("+MT.Brass        .getLocal()+")" , "Turbines"                            ,  1515,  1538, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,   36*STEAM_PER_EU, NBT_OUTPUT,   24, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.STEAM, NBT_ENERGY_EMITTED, TD.Energy.RU), "TwT", "GSG", "TMT", 'S', OP.stickLong.dat(aMat), 'M', OP.casingMachineDouble.dat(aMat), 'G', OP.gearGt.dat(aMat), 'T', OP.rotor.dat(MT.Brass            ));
        aMat = MT.DATA.Kinetic_T[1];    aRegistry.add("Steam Turbine ("+MT.Invar        .getLocal()+")" , "Turbines"                            ,  1518,  1538, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,   48*STEAM_PER_EU, NBT_OUTPUT,   32, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.STEAM, NBT_ENERGY_EMITTED, TD.Energy.RU), "TwT", "GSG", "TMT", 'S', OP.stickLong.dat(aMat), 'M', OP.casingMachineDouble.dat(aMat), 'G', OP.gearGt.dat(aMat), 'T', OP.rotor.dat(MT.Invar            ));

        aMat = MT.DATA.Kinetic_T[2];    aRegistry.add("Steam Turbine ("+ANY.Steel       .getLocal()+")" , "Turbines"                            ,  1522,  1538, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,   96*STEAM_PER_EU, NBT_OUTPUT,   64, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.STEAM, NBT_ENERGY_EMITTED, TD.Energy.RU), "TwT", "GSG", "TMT", 'S', OP.stickLong.dat(aMat), 'M', OP.casingMachineDouble.dat(aMat), 'G', OP.gearGt.dat(aMat), 'T', OP.rotor.dat(ANY.Steel           ));
        aMat = MT.DATA.Kinetic_T[2];    aRegistry.add("Steam Turbine ("+MT.Cr           .getLocal()+")" , "Turbines"                            ,  1525,  1538, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,  144*STEAM_PER_EU, NBT_OUTPUT,   96, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.STEAM, NBT_ENERGY_EMITTED, TD.Energy.RU), "TwT", "GSG", "TMT", 'S', OP.stickLong.dat(aMat), 'M', OP.casingMachineDouble.dat(aMat), 'G', OP.gearGt.dat(aMat), 'T', OP.rotor.dat(MT.Cr               ));
        aMat = MT.DATA.Kinetic_T[2];    aRegistry.add("Steam Turbine ("+MT.IronWood     .getLocal()+")" , "Turbines"                            ,  1527,  1538, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,  192*STEAM_PER_EU, NBT_OUTPUT,  128, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.STEAM, NBT_ENERGY_EMITTED, TD.Energy.RU), "TwT", "GSG", "TMT", 'S', OP.stickLong.dat(aMat), 'M', OP.casingMachineDouble.dat(aMat), 'G', OP.gearGt.dat(aMat), 'T', OP.rotor.dat(MT.IronWood         ));
        aMat = MT.DATA.Kinetic_T[2];    aRegistry.add("Steam Turbine ("+MT.Steeleaf     .getLocal()+")" , "Turbines"                            ,  1528,  1538, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,  192*STEAM_PER_EU, NBT_OUTPUT,  128, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.STEAM, NBT_ENERGY_EMITTED, TD.Energy.RU), "TwT", "GSG", "TMT", 'S', OP.stickLong.dat(aMat), 'M', OP.casingMachineDouble.dat(aMat), 'G', OP.gearGt.dat(aMat), 'T', OP.rotor.dat(MT.Steeleaf         ));
        aMat = MT.DATA.Kinetic_T[2];    aRegistry.add("Steam Turbine ("+MT.Thaumium     .getLocal()+")" , "Turbines"                            ,  1529,  1538, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,  192*STEAM_PER_EU, NBT_OUTPUT,  128, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.STEAM, NBT_ENERGY_EMITTED, TD.Energy.RU), "TwT", "GSG", "TMT", 'S', OP.stickLong.dat(aMat), 'M', OP.casingMachineDouble.dat(aMat), 'G', OP.gearGt.dat(aMat), 'T', OP.rotor.dat(MT.Thaumium         ));

        aMat = MT.DATA.Kinetic_T[3];    aRegistry.add("Steam Turbine ("+MT.Ti           .getLocal()+")" , "Turbines"                            ,  1530,  1538, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,  384*STEAM_PER_EU, NBT_OUTPUT,  256, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.STEAM, NBT_ENERGY_EMITTED, TD.Energy.RU), "TwT", "GSG", "TMT", 'S', OP.stickLong.dat(aMat), 'M', OP.casingMachineDouble.dat(aMat), 'G', OP.gearGt.dat(aMat), 'T', OP.rotor.dat(MT.Ti               ));
        aMat = MT.DATA.Kinetic_T[3];    aRegistry.add("Steam Turbine ("+MT.FierySteel   .getLocal()+")" , "Turbines"                            ,  1531,  1538, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,  384*STEAM_PER_EU, NBT_OUTPUT,  256, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.STEAM, NBT_ENERGY_EMITTED, TD.Energy.RU), "TwT", "GSG", "TMT", 'S', OP.stickLong.dat(aMat), 'M', OP.casingMachineDouble.dat(aMat), 'G', OP.gearGt.dat(aMat), 'T', OP.rotor.dat(MT.FierySteel       ));
        aMat = MT.DATA.Kinetic_T[3];    aRegistry.add("Steam Turbine ("+MT.Al           .getLocal()+")" , "Turbines"                            ,  1535,  1538, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,  576*STEAM_PER_EU, NBT_OUTPUT,  384, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.STEAM, NBT_ENERGY_EMITTED, TD.Energy.RU), "TwT", "GSG", "TMT", 'S', OP.stickLong.dat(aMat), 'M', OP.casingMachineDouble.dat(aMat), 'G', OP.gearGt.dat(aMat), 'T', OP.rotor.dat(MT.Al               ));
        aMat = MT.DATA.Kinetic_T[3];    aRegistry.add("Steam Turbine ("+MT.Magnalium    .getLocal()+")" , "Turbines"                            ,  1538,  1538, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT,  768*STEAM_PER_EU, NBT_OUTPUT,  512, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.STEAM, NBT_ENERGY_EMITTED, TD.Energy.RU), "TwT", "GSG", "TMT", 'S', OP.stickLong.dat(aMat), 'M', OP.casingMachineDouble.dat(aMat), 'G', OP.gearGt.dat(aMat), 'T', OP.rotor.dat(MT.Magnalium        ));

        aMat = MT.DATA.Kinetic_T[4];    aRegistry.add("Steam Turbine ("+MT.VoidMetal    .getLocal()+")" , "Turbines"                            ,  1540,  1538, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT, 1152*STEAM_PER_EU, NBT_OUTPUT,  768, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.STEAM, NBT_ENERGY_EMITTED, TD.Energy.RU), "TwT", "GSG", "TMT", 'S', OP.stickLong.dat(aMat), 'M', OP.casingMachineDouble.dat(aMat), 'G', OP.gearGt.dat(aMat), 'T', OP.rotor.dat(MT.VoidMetal        ));
        aMat = MT.DATA.Kinetic_T[4];    aRegistry.add("Steam Turbine ("+MT.Trinitanium  .getLocal()+")" , "Turbines"                            ,  1545,  1538, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT, 1536*STEAM_PER_EU, NBT_OUTPUT, 1024, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.STEAM, NBT_ENERGY_EMITTED, TD.Energy.RU), "TwT", "GSG", "TMT", 'S', OP.stickLong.dat(aMat), 'M', OP.casingMachineDouble.dat(aMat), 'G', OP.gearGt.dat(aMat), 'T', OP.rotor.dat(MT.Trinitanium      ));
        aMat = MT.DATA.Kinetic_T[4];    aRegistry.add("Steam Turbine ("+MT.Graphene     .getLocal()+")" , "Turbines"                            ,  1548,  1538, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_INPUT, 3072*STEAM_PER_EU, NBT_OUTPUT, 2048, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.STEAM, NBT_ENERGY_EMITTED, TD.Energy.RU), "TwT", "GSG", "TMT", 'S', OP.stickLong.dat(aMat), 'M', OP.casingMachineDouble.dat(aMat), 'G', OP.gearGt.dat(aMat), 'T', OP.rotor.dat(MT.Graphene         ));
    }
}
